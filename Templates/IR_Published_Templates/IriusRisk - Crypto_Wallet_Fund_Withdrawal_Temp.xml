<?xml version="1.0" encoding="UTF-8"?>
<template ref="crypto-wallet-fund-withdrawal-temp" name="Crypto Wallet Fund Withdrawal Temp" tags="" modelUpdated="">
  <desc/>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="application-trust-zone-(high-trust)" uuid="af0b3918-e76b-47db-ba4f-a6f91835829d" name="Application Trust Zone (High Trust)" desc="Contains core business logic and security controls.&#10;&#10;Manages transaction processing and validation." trustRating="80"/>
    <trustZone ref="static-content" uuid="1074a9d0-2994-4480-8bd5-65ab9c1b06a7" name="Static Content" desc="" trustRating="80"/>
    <trustZone ref="client-trust-zone-(low-trust)" uuid="15dc2c5d-30b0-4738-9bf2-d3aed6534076" name="Client-facing Trust Zone (Low Trust)" desc="Contains user-facing components and local device operations.&#10;&#10;Primary threat surface for malware and physical attacks." trustRating="1"/>
  </trustZones>
  <questions/>
  <assets/>
  <settings/>
  <dataflows>
    <dataflow name="User -&gt; Mobile Wallet Interface" ref="0f116595-66c1-4a90-a8af-e17e90779955" source="5a8258f8-0bec-4b60-abf2-a380ca421361" target="14de3ca2-c357-46da-85ba-780676f7999f">
      <assets/>
      <tags>
        <tag tag="Certificate Pinning"/>
        <tag tag="TLS 1.3"/>
        <tag tag="User Credentials"/>
      </tags>
    </dataflow>
    <dataflow name="Account Management Service -&gt; Mobile Wallet Interface" ref="4c30e207-e81c-46c4-b1d5-7d1cc8ef3f05" source="6a7d64cf-bf6d-48f1-92ec-795645af5809" target="14de3ca2-c357-46da-85ba-780676f7999f">
      <assets/>
      <tags>
        <tag tag="Session Token"/>
      </tags>
    </dataflow>
    <dataflow name="Mobile Wallet Interface -&gt; Account Management Service" ref="74b9cef0-2e04-45a2-85a5-f01375609583" source="14de3ca2-c357-46da-85ba-780676f7999f" target="6a7d64cf-bf6d-48f1-92ec-795645af5809">
      <assets/>
      <tags>
        <tag tag="User AuthN Request"/>
      </tags>
    </dataflow>
    <dataflow name="Mobile Wallet Interface -&gt; Balance Management Service" ref="fe1a3436-9611-48da-acf9-1ecc460b4930" source="14de3ca2-c357-46da-85ba-780676f7999f" target="c6612d8f-aba8-4f6b-8322-6df7d8461a9e">
      <assets/>
      <tags>
        <tag tag="Valid Withdrawal Request"/>
      </tags>
    </dataflow>
  </dataflows>
  <customFields/>
  <components>
    <component uuid="35084d77-8e81-4f25-add3-04fe8f07030e" diagramComponentId="2049ec27-6207-4f47-a601-02377c0912fe" ref="6a7d64cf-bf6d-48f1-92ec-795645af5809" name="Account Management Service" desc="" library="" parentComponentRef="b55017fd-ce3a-49a2-b00c-cd76e41d68d8" componentDefinitionRef="">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="application-trust-zone-(high-trust)"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="advanced-session-security-implementation" name="Advanced Session Security Implementation" issueId="" issueLink="" platform="" cost="2" risk="61" state="Recommended" owner="cdalrymple@iriusrisk.com" library="" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;**Note: In a real-world scenario, you would need to integrate this with your authentication system, implement more sophisticated risk calculation algorithms, and add proper error handling and logging.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Configure Session Management:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Set maximum session duration to 15 minutes&lt;/li&gt;&lt;li&gt;Implement session binding to device fingerprint&lt;/li&gt;&lt;li&gt;Enable continuous session monitoring&lt;/li&gt;&lt;li&gt;Configure session termination on suspicious events:&lt;ul&gt;&lt;li&gt;Multiple IP address changes&lt;/li&gt;&lt;li&gt;Unusual geolocation jumps&lt;/li&gt;&lt;li&gt;Concurrent session attempts&lt;/li&gt;&lt;li&gt;Failed transaction attempts&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Implement Tiered Access Control:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Configure withdrawal tiers:&lt;ul&gt;&lt;li&gt;Tier 1 (Basic): Up to $1,000/day&lt;/li&gt;&lt;li&gt;Tier 2 (Enhanced): Up to $10,000/day&lt;/li&gt;&lt;li&gt;Tier 3 (Institutional): Custom limits&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Require additional verification for tier upgrades:&lt;ul&gt;&lt;li&gt;Government ID verification&lt;/li&gt;&lt;li&gt;Proof of address&lt;/li&gt;&lt;li&gt;Video verification call&lt;/li&gt;&lt;li&gt;Banking relationship verification&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Set up Security Event Monitoring:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Monitor and log security events:&lt;ul&gt;&lt;li&gt;Failed login attempts&lt;/li&gt;&lt;li&gt;Password changes&lt;/li&gt;&lt;li&gt;Withdrawal address changes&lt;/li&gt;&lt;li&gt;Security setting modifications&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Configure automatic responses:&lt;ul&gt;&lt;li&gt;Account freeze after 3 failed attempts&lt;/li&gt;&lt;li&gt;Notification to backup email&lt;/li&gt;&lt;li&gt;Requirement for manual verification&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="Example - javascript">
              <desc>Y29uc3QgZ2VvaXAgPSByZXF1aXJlKCdnZW9pcC1saXRlJyk7CgpjbGFzcyBTZXNzaW9uTWFuYWdlciB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLnNlc3Npb25zID0gbmV3IE1hcCgpOwogIH0KCiAgY2hlY2tTZXNzaW9uKHNlc3Npb25JZCwgaXApIHsKICAgIGxldCBzZXNzaW9uID0gdGhpcy5zZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTsKICAgIGlmICghc2Vzc2lvbikgewogICAgICBzZXNzaW9uID0gdGhpcy5pbml0U2Vzc2lvbihzZXNzaW9uSWQsIGlwKTsKICAgIH0KCiAgICBjb25zdCByaXNrID0gdGhpcy5jYWxjdWxhdGVSaXNrKHNlc3Npb24sIGlwKTsKICAgIGlmIChyaXNrID4gMTAwKSB7CiAgICAgIHRoaXMudGVybWluYXRlU2Vzc2lvbihzZXNzaW9uSWQpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgdGhpcy51cGRhdGVTZXNzaW9uKHNlc3Npb24sIGlwKTsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaW5pdFNlc3Npb24oc2Vzc2lvbklkLCBpcCkgewogICAgY29uc3Qgc2Vzc2lvbiA9IHsKICAgICAgaXA6IGlwLAogICAgICBsb2NhdGlvbnM6IFtnZW9pcC5sb29rdXAoaXApXSwKICAgICAgaXBDaGFuZ2VzOiAwLAogICAgICBmYWlsZWRUcmFuc2FjdGlvbnM6IDAsCiAgICAgIGxhc3RBY3Rpdml0eTogRGF0ZS5ub3coKQogICAgfTsKICAgIHRoaXMuc2Vzc2lvbnMuc2V0KHNlc3Npb25JZCwgc2Vzc2lvbik7CiAgICByZXR1cm4gc2Vzc2lvbjsKICB9CgogIGNhbGN1bGF0ZVJpc2soc2Vzc2lvbiwgaXApIHsKICAgIGxldCByaXNrID0gMDsKCiAgICAvLyBDaGVjayBJUCBjaGFuZ2VzCiAgICBpZiAoc2Vzc2lvbi5pcCAhPT0gaXApIHsKICAgICAgcmlzayArPSAyMDsKICAgICAgc2Vzc2lvbi5pcENoYW5nZXMrKzsKICAgIH0KCiAgICAvLyBDaGVjayBnZW9sb2NhdGlvbiBqdW1wcwogICAgY29uc3QgbmV3TG9jYXRpb24gPSBnZW9pcC5sb29rdXAoaXApOwogICAgY29uc3QgbGFzdExvY2F0aW9uID0gc2Vzc2lvbi5sb2NhdGlvbnNbc2Vzc2lvbi5sb2NhdGlvbnMubGVuZ3RoIC0gMV07CiAgICBpZiAodGhpcy5pc0ltcG9zc2libGVUcmF2ZWwobGFzdExvY2F0aW9uLCBuZXdMb2NhdGlvbikpIHsKICAgICAgcmlzayArPSA1MDsKICAgIH0KCiAgICAvLyBDaGVjayBzZXNzaW9uIGluYWN0aXZpdHkKICAgIGNvbnN0IGluYWN0aXZpdHlUaW1lID0gRGF0ZS5ub3coKSAtIHNlc3Npb24ubGFzdEFjdGl2aXR5OwogICAgaWYgKGluYWN0aXZpdHlUaW1lID4gMzAgKiA2MCAqIDEwMDApIHsgLy8gMzAgbWludXRlcwogICAgICByaXNrICs9IDMwOwogICAgfQoKICAgIHJldHVybiByaXNrOwogIH0KCiAgaXNJbXBvc3NpYmxlVHJhdmVsKGxvYzEsIGxvYzIpIHsKICAgIC8vIEltcGxlbWVudCBsb2dpYyB0byBkZXRlY3QgaW1wb3NzaWJsZSB0cmF2ZWwKICAgIC8vIFRoaXMgaXMgYSBzaW1wbGlmaWVkIGV4YW1wbGUKICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KAogICAgICBNYXRoLnBvdyhsb2MxLmxsWzBdIC0gbG9jMi5sbFswXSwgMikgKwogICAgICBNYXRoLnBvdyhsb2MxLmxsWzFdIC0gbG9jMi5sbFsxXSwgMikKICAgICk7CiAgICByZXR1cm4gZGlzdGFuY2UgPiAxMDAwOyAvLyBNb3JlIHRoYW4gMTAwMCBrbQogIH0KCiAgdXBkYXRlU2Vzc2lvbihzZXNzaW9uLCBpcCkgewogICAgc2Vzc2lvbi5pcCA9IGlwOwogICAgc2Vzc2lvbi5sb2NhdGlvbnMucHVzaChnZW9pcC5sb29rdXAoaXApKTsKICAgIHNlc3Npb24ubGFzdEFjdGl2aXR5ID0gRGF0ZS5ub3coKTsKICB9CgogIHRlcm1pbmF0ZVNlc3Npb24oc2Vzc2lvbklkKSB7CiAgICB0aGlzLnNlc3Npb25zLmRlbGV0ZShzZXNzaW9uSWQpOwogICAgLy8gSW1wbGVtZW50IGFkZGl0aW9uYWwgbG9naWMgdG8gaW52YWxpZGF0ZSBzZXNzaW9uIHRva2VuCiAgfQoKICByZWNvcmRGYWlsZWRUcmFuc2FjdGlvbihzZXNzaW9uSWQpIHsKICAgIGNvbnN0IHNlc3Npb24gPSB0aGlzLnNlc3Npb25zLmdldChzZXNzaW9uSWQpOwogICAgaWYgKHNlc3Npb24pIHsKICAgICAgc2Vzc2lvbi5mYWlsZWRUcmFuc2FjdGlvbnMrKzsKICAgICAgaWYgKHNlc3Npb24uZmFpbGVkVHJhbnNhY3Rpb25zID4gNSkgewogICAgICAgIHRoaXMudGVybWluYXRlU2Vzc2lvbihzZXNzaW9uSWQpOwogICAgICB9CiAgICB9CiAgfQp9</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="Crypto.com Security Report &amp; Next Steps" url="https://crypto.com/en/product-news/crypto-com-security-report-next-steps"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.054">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="account-management-service-use-case" name="Account Management Service Use Case" desc="" library="">
          <threats>
            <threat ref="session-hijacking-and-privilege-escalation" name="Session Hijacking and Privilege Escalation" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;: Attackers exploit session management vulnerabilities to take over authenticated sessions or escalate privileges.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;: Sophisticated attackers exploiting session management flaws, insider threats attempting privilege escalation.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;: Unauthorized access to accounts, potential for large-scale automated attacks, bypass of security controls.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;: The 2023 Crypto.com incident resulted in unauthorized withdrawals through compromised sessions.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="advanced-session-security-implementation" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value="Spoofing||Elevation of Privilege"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="6480b13e-020c-4002-be04-2e66b2ee6220" diagramComponentId="dbe345e9-5c23-4b8c-8949-fc6f893d8d2a" ref="c6612d8f-aba8-4f6b-8322-6df7d8461a9e" name="Balance Management Service" desc="" library="" parentComponentRef="b55017fd-ce3a-49a2-b00c-cd76e41d68d8" componentDefinitionRef="">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="application-trust-zone-(high-trust)"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="aaed1c9d-cf3e-4099-ac05-37d5b7abe951" diagramComponentId="ff6113eb-17c1-4467-bc08-c47c8ae97b2d" ref="0590d2bf-d077-49cb-9e22-ec9bb5d4b7dc" name="Blockchain Network" desc="" library="" parentComponentRef="" componentDefinitionRef="CD-BLOCKCHAIN-NETWORK">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="static-content"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-319" name="Cleartext Transmission of Sensitive Information" state="0" impact="100" issueId="" issueLink="">
          <desc>The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

Many communication channels can be "sniffed" by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers.  </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.539">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-200" name="Information Exposure" state="0" impact="100" issueId="" issueLink="">
          <desc>An information exposure is the intentional or unintentional disclosure of information to an
                        actor that is not explicitly authorized to have access to that information.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.539">
              <output/>
            </source>
            <references>
              <reference name="CWE-200: Information Exposure" url="https://cwe.mitre.org/data/definitions/200.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-51-PERCENT-DEFENCE" name="Lack of 51% defence" state="0" impact="100" issueId="" issueLink="">
          <desc>The lack of 51% defence lies in the blockchain network's susceptibility to manipulation by a determined attacker. Some specific weaknesses associated with this vulnerability include:
- Centralization Risk: A blockchain network that lacks robust security measures against 51% attacks is at risk of becoming centralized, as attackers with sufficient resources can dominate the mining power, discouraging other participants and undermining the decentralization principle.
- Loss of Trust: Users, investors, and businesses may lose trust in a blockchain network that is susceptible to 51% attacks, leading to a decreased adoption rate and value of the cryptocurrency associated with the blockchain.
- Financial Impact: Double-spending and other malicious activities can result in significant financial losses for users and businesses relying on the blockchain, potentially leading to a loss of confidence and abandonment of the network.
- Economic Incentives: Miners may be less inclined to participate in a blockchain network that lacks security against 51% attacks, as they risk losing their rewards and investments in mining hardware.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.539">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-VERIFICATION" name="Lack of verification mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>Inadequate verification mechanisms may expose the system to manipulation by dishonest entities, potentially distorting their reputation and fostering a false sense of trust.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.540">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-BLOCKCHAIN-NETWORK4" name="Enhance routing security in Blockchain Network" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Enhance routing security in Blockchain Network&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;A blockchain network and application rely on the real-time movement of massive amounts of knowledge. Hackers can use an account's anonymity to intercept data because it's being transmitted to internet service providers.&lt;br&gt;In the case of a routing attack, blockchain participants are usually unaware of the threat because data transmission and operations proceed as was common. The danger is that these attacks will frequently expose confidential data or extract currency without the user's knowledge.&lt;/p&gt;&lt;p&gt;Remediation:&lt;br&gt;1. Employ Encryption:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Utilize encryption algorithms (e.g., AES) to implement end-to-end encryption for secure data transmission within the blockchain network.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Employ established cryptographic libraries and tools to seamlessly integrate encryption mechanisms into the network's communication protocols.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;2. Implement Secure Routing Protocols with Certificates:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Deploy secure routing protocols such as BGPsec (Border Gateway Protocol Security) along with X.509 certificates for node authentication.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Regularly update and validate certificates to ensure their effectiveness in preventing unauthorized access and routing attacks.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;3. Regularly Change and Utilize Robust Passwords:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Enforce a policy of regularly changing passwords and using strong, complex passwords for access to network devices and infrastructure.&lt;/li&gt;&lt;li&gt;Implement password management policies requiring users to update passwords at regular intervals.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Utilize a combination of uppercase and lowercase letters, numbers, and special characters to create strong passwords.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Implement multi-factor authentication for an additional layer of security.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;4. Foster Awareness About Information Security Risks:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Conduct regular security awareness training sessions for blockchain network participants.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Cover topics such as recognizing phishing attempts, understanding the implications of routing attacks, and emphasizing the importance of reporting suspicious activities promptly. An educated workforce is better equipped to identify and mitigate potential threats.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="5 blockchain security issues and how to prevent them" url="https://www.fastcompany.com/90722111/5-blockchain-security-issues-and-how-to-prevent-them"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Verify the implementation of secure routing protocols and certificate-based authentication. Test the effectiveness of these protocols in preventing unauthorized access.&lt;br /&gt;
2. Confirm that data transmission is encrypted using strong encryption algorithms. Verify that end-to-end encryption is consistently applied.&lt;br /&gt;
3. Review the password management policy and assess compliance. Ensure that users are regularly changing passwords and using strong, unique passwords.&lt;br /&gt;
4. Test the network monitoring systems by simulating routing attack scenarios. Verify that the IDS and IPS systems can detect and respond to these attacks.&lt;br /&gt;
5. Assess the effectiveness of employee training programs by conducting knowledge assessments and simulated phishing exercises.&lt;br /&gt;
6. Review access control lists and RBAC policies to ensure that only authorized users have access to sensitive data.&lt;br /&gt;
7. Conduct a comprehensive security audit to identify vulnerabilities and assess the overall security posture of the blockchain network and application.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-BLOCKCHAIN-NETWORK2" name="Implement effective endpoint security in Blockchain Network" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement effective endpoint security in Blockchain Network&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;The blockchain network's endpoint is where users interact with the blockchain: on electronic devices such as computers and mobile phones. Hackers can observe user behavior and target devices to steal the user's key. This is one of the most visible blockchain security issues.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Do not save blockchain keys on your laptop or mobile as text files.&lt;/li&gt;&lt;li&gt;Transfer and install antivirus software packages for your electronic devices.&lt;/li&gt;&lt;li&gt;Review the system often, keeping track of the time, location, and device access.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="8 blockchain security issues you are likely to encounter" url="https://cybersecurity.att.com/blogs/security-essentials/8-blockchain-security-issues-you-are-likely-to-encounter"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify that blockchain keys are not stored as plain text files on user devices. Test the implementation of secure key storage solutions, such as hardware wallets or encrypted key management tools, to ensure that private keys are adequately protected.&lt;/li&gt;&lt;li&gt;Confirm that antivirus software is installed and functional on electronic devices. Test the antivirus software’s ability to detect and mitigate potential threats, including malware or malicious software.&lt;/li&gt;&lt;li&gt;Implement system review and monitoring procedures. Test the system’s ability to log and track device access, timestamps, and locations. Verify that intrusion detection systems or SIEM solutions can identify unusual or suspicious activities effectively.&lt;/li&gt;&lt;li&gt;Provide security awareness training to users to educate them about the importance of endpoint security. Test users’ knowledge and adherence to security best practices.&lt;/li&gt;&lt;li&gt;Develop and test an incident response plan to address security incidents that may arise from endpoint vulnerabilities. Ensure that the plan includes procedures for detecting, reporting, and mitigating security breaches.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-BLOCKCHAIN-NETWORK3" name="Implement multifaceted defense against 51% attacks in Blockchain Network" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement multifaceted defense against 51% attacks in Blockchain Network&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;A 51% attack occurs when one individual or organization (malicious hackers) collects quite 1/2 the hash rate and seizes control of the whole system, which might be disastrous. Hackers can modify the order of transactions and forestall them from being confirmed. they'll even reverse previously completed transactions, leading to double spending.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Blockchain networks should actively encourage more miners to participate in the network. This can be achieved through marketing, awareness campaigns, and user-friendly mining software.&lt;/li&gt;&lt;li&gt;Miners should be encouraged to join diverse mining pools rather than concentrating mining power in a few large pools. A diversified pool ecosystem reduces the risk of a single pool gaining too much control over the network.&lt;/li&gt;&lt;li&gt;Consider implementing consensus algorithm upgrades that are resistant to 51% attacks. For example, some cryptocurrencies have transitioned to proof-of-stake (PoS) or hybrid PoW/PoS systems to reduce the influence of computational power.&lt;/li&gt;&lt;li&gt;Continue to provide attractive rewards for miners, such as transaction fees and block rewards, to ensure their commitment to the network's security.&lt;/li&gt;&lt;li&gt;Encourage the blockchain community to actively monitor the network's hashrate and take action if there are signs of a significant increase in mining power by a single entity or group.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is a 51% attack and how is it prevented?" url="https://www.bitpanda.com/academy/en/lessons/what-is-a-51-attack-and-how-is-it-prevented"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Regularly monitor the network’s hashrate using tools and analytics to detect any sudden changes or anomalies.&lt;/li&gt;&lt;li&gt;Analyze the distribution of miners across different mining pools to ensure that power is not overly concentrated in a small number of pools.&lt;/li&gt;&lt;li&gt;Continuously assess the incentives provided to miners to ensure they remain motivated to contribute to the network’s security.&lt;/li&gt;&lt;li&gt;If considering a transition to a different consensus algorithm, conduct thorough testing and analysis to ensure it provides the desired security benefits.&lt;/li&gt;&lt;li&gt;Engage with the blockchain community through forums, social media, and newsletters to promote decentralization and encourage more participants to become miners.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.458">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-BLOCKCHAIN-NETWORK1" name="Implement Sybil Attack prevention measures in Blockchain Network" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement Sybil Attack prevention measures in Blockchain Network&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Sybil attacks pose a significant threat to the security and integrity of blockchain networks. These attacks can enable malicious actors to gain disproportionate influence, compromise privacy, and disrupt network operations. Implementing Sybil attack prevention measures is crucial to safeguard the network and its users against these threats.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use identity validation methods to verify the authenticity of network participants. This can include phone number verification, credit card verification, or IP address validation. Identity-based validation provides accountability but may sacrifice some degree of anonymity.&lt;/li&gt;&lt;li&gt;Analyze connectivity data in social graphs to detect and limit the extent of Sybil attacks. Techniques like SybilGuard and the Advogato Trust Metric can help identify suspected Sybil clusters in distributed systems. However, be aware that these techniques may have limitations in certain network contexts.&lt;/li&gt;&lt;li&gt;Introduce economic barriers to entry that make Sybil attacks prohibitively expensive. For example, require participants to invest in resources like stake or storage. Implement Proof of Work (PoW) mechanisms that demand computational effort, making it costly for attackers to create multiple identities.&lt;/li&gt;&lt;li&gt;Implement a 'one entity per person' rule, which requires identity verification without revealing real identities. For example, users can verify their identity through pseudonym parties, ensuring each human participant has exactly one vote.&lt;/li&gt;&lt;li&gt;Explore distributed protocols and algorithms that inherently resist Sybil attacks. Examples include SumUp and DSybil for content recommendation and voting, Whanau for distributed hash tables, and Sybil-resistant versions of Kademlia.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;Identity validation and personhood validation measures could potentially reduce the degree of anonymity in the network, which might be undesirable in some use cases. Economic costs, while effective, may deter legitimate users as well. Additionally, the effectiveness of social trust graphs and application-specific defenses can vary depending on the network's characteristics.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Sybil Attack" url="https://www.imperva.com/learn/application-security/sybil-attack"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Verify that the identity validation mechanisms are correctly implemented and effectively prevent the creation of multiple fake identities by a single user.&lt;/li&gt;&lt;li&gt;Evaluate the performance of social trust graph-based Sybil attack prevention techniques in identifying and limiting impact of Sybil attacks. Test these techniques against various network scenarios.&lt;/li&gt;&lt;li&gt;Assess the economic costs introduced as barriers to Sybil attacks. Ensure that the costs are sufficient to deter attackers without significantly affecting legitimate users.&lt;/li&gt;&lt;li&gt;Test the pseudonym parties or similar mechanisms to validate the personhood of participants without revealing their real identities. Ensure that the process is secure and reliable.&lt;/li&gt;&lt;li&gt;If implementing specific protocols or algorithms, Test their resistance to Sybil attacks in the context of the blockchain network. Verify that these defenses perform as expected and provide effective protection against Sybil threats.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.457">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Blockchain-Components">
          <threats>
            <threat ref="CAPEC-37" name="An attacker examines a target system to find sensitive data that has been embedded within it" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-200">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-NETWORK2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-NETWORK2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="NTW-MITM" name="Attackers could gain access to sensitive data through a man in the middle attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;This type of attack targets the communication between two components (typically client and server). The attacker places himself in the communication channel between the two components. Whenever one component attempts to communicate with the other (data flow, authentication challenges, etc.), the data first goes to the attacker, who has the opportunity to observe or alter it, and it is then passed to the other component as if it were never intercepted. This interposition is transparent leaving the two compromised components unaware of the potential corruption or leakage of their communications. The potential for Man-in-the-Middle attacks yields an implicit lack of trust in communication or identity between two components.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="50"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1557.001" url="https://attack.mitre.org/techniques/T1557/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1557.002" url="https://attack.mitre.org/techniques/T1557/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1557.003" url="https://attack.mitre.org/techniques/T1557/003"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-NETWORK4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-NETWORK4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-51-PERCENT-ATTACK" name="51% attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;A 51% attack is a security threat in blockchain networks, particularly in proof-of-work (PoW) cryptocurrencies like Bitcoin, where an attacker or group of attackers gains control of more than 50% of the network's computational power (hash rate). With this majority control, they can manipulate the blockchain by executing actions such as double spending, censorship of transactions, and blockchain reorganization. This attack is challenging to execute on well-established and secure blockchain networks due to their distributed mining communities and robust security measures. Mitigation strategies include promoting decentralization, using alternative consensus mechanisms like proof-of-stake, and continuous network monitoring to detect and respond to suspicious activities&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="100" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-51-PERCENT-DEFENCE">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-NETWORK3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-NETWORK3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-SYBIL-ATTACK" name="Sybil attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;In a Sybil attack, an attacker creates multiple fake identities or nodes to gain a disproportionately high level of influence or reputation within a network or system. In the context of a blockchain oracle, this could involve an attacker creating numerous fake nodes that all appear to have a good reputation.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-VERIFICATION">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-NETWORK1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-NETWORK1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="ed24f983-da2a-467f-9059-65315acc7c23" diagramComponentId="cfd5e64e-0d8a-47bb-ac3a-ed6f2d5fc0b1" ref="88b9c79b-3b6c-445f-ad09-3de8267d6877" name="Blockchain Oracle" desc="" library="" parentComponentRef="" componentDefinitionRef="CD-BLOCKCHAIN-ORACLE">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="static-content"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-778" name="Insufficient Logging" state="0" impact="100" issueId="" issueLink="">
          <desc>When a critical security event occurs, the software either does not record the event or omits important details about the event when logging it. When critical security events are not logged properly, such as in the case of a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analyses after a successful attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.036">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-345" name="Insufficient Verification of Data Authenticity" state="0" impact="100" issueId="" issueLink="">
          <desc>The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.035">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-VERIFICATION" name="Lack of verification mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>Inadequate verification mechanisms may expose the system to manipulation by dishonest entities, potentially distorting their reputation and fostering a false sense of trust.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.036">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-SYSTEM-VULN-DOS" name="System is vulnerable to a Denial of Service attack" state="0" impact="100" issueId="" issueLink="">
          <desc>A system can be vulnerable to a Denial of Service (DoS) attack if it does not have sufficient safeguards in place to protect against such attacks. There are a number of ways that a system can be vulnerable to a DoS attack, including:
1. Lack of DDoS protection: If a system does not have DDoS protection in place, it may be vulnerable to an attack that involves flooding the system with traffic.
2. Insufficient rate limiting: Rate limiting is a technique used to prevent a system from being overwhelmed with requests from a single source. If a system does not have sufficient rate limiting in place, it may be vulnerable to a DoS attack that involves a high volume of requests from a single source.
3. Inadequate filtering: Filtering is a technique used to block malicious traffic from reaching a system. If a system does not have sufficient filtering in place, it may be vulnerable to a DoS attack that involves malicious traffic.
4. Unpatched vulnerabilities: If a system has known vulnerabilities that have not been patched, it may be vulnerable to a DoS attack that exploits these vulnerabilities.
5. Inadequate capacity: If a system does not have sufficient capacity to handle the expected level of traffic, it may be vulnerable to a DoS attack that involves a volume of traffic that exceeds the system's capacity.
6. Lack of monitoring: If a system is not being actively monitored, it may be more difficult to detect a DoS attack in progress and take appropriate action to mitigate it.
By implementing measures such as DDoS protection, rate limiting, filtering, and regularly patching known vulnerabilities, it is possible to reduce the likelihood of a system being vulnerable to a DoS attack.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.035">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-BLOCKCHAIN-ORACLE2" name="Diversify data sources for redundancy in Blockchain Oracle" issueId="" issueLink="" platform="" cost="1" risk="61" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Diversify data sources for redundancy in Blockchain Oracle&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;To mitigate the risk of inaccurate data and potential vulnerabilities in decentralized applications, it is crucial to diversify data sources and avoid depending solely on a single point of failure. This approach emphasizes the utilization of multiple data sources to introduce redundancy and bolster data reliability and security.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Identify the specific data types required for your smart contract that are critical for its operation. Focus on data types such as cryptocurrency and token prices, which are highly liquid and prone to rapid fluctuations.&lt;/li&gt;&lt;li&gt;Refrain from using a single data source or a limited number of data sources for critical data types. Instead, aim to diversify and aggregate data from multiple reliable sources.&lt;/li&gt;&lt;li&gt;Choose oracle networks that utilize a volume-weighted average price (VWAP) calculation across a broad spectrum of trading environments. VWAP accounts for pricing from both high-volume and low-volume exchanges, ensuring a more accurate representation of market prices.&lt;/li&gt;&lt;li&gt;Assess the oracle networks' use of professional data aggregators, which can provide deep liquidity and enhance price discovery. Look for oracle providers that exclude outliers and fake exchange volume to improve data accuracy.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;Managing data from multiple sources and oracle networks can increase the complexity of data aggregation and verification.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The Ultimate Guide to Blockchain Oracle Security" url="https://chain.link/resources/blockchain-oracle-security"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Identify critical data types required for your smart contract&amp;#8217;s operation.&lt;br /&gt;
2. Verify that your smart contract does not rely solely on a single data source for critical data types.&lt;br /&gt;
3. Evaluate the chosen oracle networks to ensure they calculate a volume-weighted average price (VWAP) across various trading environments.&lt;br /&gt;
4. Confirm that the oracle networks utilize professional data aggregators to enhance data accuracy.&lt;br /&gt;
5. Assess the complexity of managing data from multiple sources and evaluate whether it introduces any operational challenges.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.988">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-BLOCKCHAIN-ORACLE1" name="Ensure data quality through premium data providers in Blockchain Oracle" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure data quality through premium data providers in Blockchain Oracle&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;In the realm of blockchain, data quality stands as a cornerstone for secure and dependable operations. Consider, for instance, a blockchain-based supply chain management system. Accurate and timely data regarding product shipments, inventory levels, and supplier information are crucial. Even small discrepancies or inaccuracies in this data can lead to supply chain disruptions, financial losses, and disputes. This approach emphasizes the utilization of premium data providers to uphold the accuracy, reliability, and consistency of data. By doing so, it minimizes the risks associated with compromised smart contracts and user funds.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Conduct research to identify premium data providers known for their data quality, accuracy, and reliability. Look for providers with a track record of offering standardized, high-quality data, advanced aggregation methodologies, and strong service guarantees.&lt;/li&gt;&lt;li&gt;Assess the data sources used by blockchain oracles. Determine whether they exclusively source data from premium data providers or rely on free APIs. Prioritize oracles that use premium data sources.&lt;/li&gt;&lt;li&gt;Verify that the selected premium data providers offer legally binding availability and service quality guarantees. These guarantees are essential to ensure that the data remains accurate and available when needed.&lt;/li&gt;&lt;li&gt;Choose blockchain oracles that utilize modular adapters and have built-in credential management capabilities for oracle nodes. Modular adapters enable seamless integration with premium data providers and secure storage of API credentials.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;Premium data providers typically charge fees for access to their data sets. This cost may be higher compared to using free APIs.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The Ultimate Guide to Blockchain Oracle Security" url="https://chain.link/resources/blockchain-oracle-security"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Assess the chosen premium data provider based on their reputation for data quality, precision, and reliability. Ensure that they align with the criteria of standardized data, advanced aggregation methods, and service guarantees.&lt;br /&gt;
2. Examine the data sources utilized by the blockchain oracle. Confirm that premium data providers constitute the primary source for data. If free APIs are used, investigate the extent of their influence on data accuracy.&lt;br /&gt;
3. Validate that the selected premium data providers offer legally binding guarantees pertaining to data availability and service quality. These guarantees should ensure the continual accuracy and accessibility of data.&lt;br /&gt;
4. Ensure that the chosen blockchain oracle supports modular adapters and integrated credential management for oracle nodes. Test the integration process with a premium data provider to ensure seamless data access.&lt;br /&gt;
5. Perform a cost-benefit analysis to evaluate the financial implications of accessing data from premium providers compared to using free APIs. Consider the potential benefits in terms of data quality and reliability.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.987">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-BLOCKCHAIN-ORACLE4" name="Prioritize transparent Oracle solutions with robust monitoring systems in Blockchain Oracle" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Prioritize transparent Oracle solutions with robust monitoring systems in Blockchain Oracle&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Ensuring transparency into the current and historical performance of an oracle network is vital for making informed decisions and mitigating unknown vulnerabilities. By prioritizing transparent oracle solutions with robust monitoring systems, developers gain visibility into the entire oracle design, promoting better network security and accountability.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Assess the level of transparency provided by the oracle solution regarding its network design. Look for solutions that openly share information about their architecture and operation.&lt;/li&gt;&lt;li&gt;Check if the oracle solution offers insights into the performance of individual nodes within the network. Transparent solutions often provide data on uptime, reliability, and historical performance for each node.&lt;/li&gt;&lt;li&gt;Look for solutions that offer access to historical data related to node performance and network operation. This historical data can help assess the oracle network's track record.&lt;/li&gt;&lt;li&gt;Give preference to open-source blockchain oracle solutions. Open-source projects tend to provide greater transparency, allowing developers to scrutinize the code and design.&lt;/li&gt;&lt;li&gt;Choose an oracle solution with robust monitoring systems in place. For example, consider solutions like Chainlink, where oracle nodes cryptographically sign their data responses and store them on-chain for transparency and accountability.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The Ultimate Guide to Blockchain Oracle Security" url="https://chain.link/resources/blockchain-oracle-security"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Evaluate the transparency level of the oracle solution&amp;#8217;s network design information.&lt;br /&gt;
2. Check if the solution provides data on individual node performance, including uptime and reliability.&lt;br /&gt;
3. Assess the availability of historical data related to node performance and network operation.&lt;br /&gt;
4. Consider whether the solution is open-source, allowing for code scrutiny.&lt;br /&gt;
5. Verify the presence of robust monitoring systems, such as on-chain data storage for accountability.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.988">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-BLOCKCHAIN-ORACLE3" name="Verify node operator reputation in Blockchain Oracle" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Verify node operator reputation in Blockchain Oracle&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;To uphold the overall network quality and security of oracle solutions, it is vital to ensure the reliability and experience of node operators. This approach centers around the identification and choice of oracle solutions that engage well-established node operators with demonstrated track records and extensive industry experience.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Assess the standards and criteria used by the oracle solution to select node operators. Ensure that they prioritize security, reliability, and a proven track record in node operation.&lt;/li&gt;&lt;li&gt;Research the identities and reputations of the node operator teams associated with the chosen oracle solution. Look for teams with a history of successful node operation and industry experience.&lt;/li&gt;&lt;li&gt;Confirm that the oracle nodes operated by the selected teams have undergone security reviews. Security-reviewed nodes are more likely to adhere to best practices and maintain a high level of security.&lt;/li&gt;&lt;li&gt;Verify that the node operators have a dedicated DevOps team with the necessary expertise and experience in managing nodes effectively.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;Identifying oracle solutions with time-tested and reliable node operators may limit the available options, potentially reducing flexibility.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="The Ultimate Guide to Blockchain Oracle Security" url="https://chain.link/resources/blockchain-oracle-security"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Evaluate the oracle solution&amp;#8217;s criteria for selecting node operators to ensure they prioritize security and reliability.&lt;br /&gt;
2. Research and verify the identities and reputations of the node operator teams associated with the chosen oracle solution.&lt;br /&gt;
3. Confirm that the oracle nodes operated by these teams have undergone security reviews.&lt;br /&gt;
4. Ensure that the node operators have a dedicated DevOps team with the required expertise.&lt;br /&gt;
5. Assess the potential impact of limiting options by choosing an oracle solution with proven node operators.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.988">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Blockchain-Components">
          <threats>
            <threat ref="T-DOS-ATTACK" name="Attackers perform a Denial of Service (DoS)" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;A denial of service (DoS) attack is a type of cyber attack that is designed to make a website or network resource unavailable to users. DoS attacks typically involve flooding the target with traffic, overwhelming the server or network and causing it to crash or become inaccessible. DoS attacks can be launched from a single source or can be distributed, in which case they are known as distributed denial of service (DDoS) attacks. DDoS attacks are more difficult to mitigate because they involve multiple sources of traffic, making it harder to block the attack. DoS attacks can have a significant impact on the availability and performance of a website or network, and can be difficult to defend against due to the sheer volume of traffic involved.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses>
                <weakness ref="W-SYSTEM-VULN-DOS">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-ORACLE2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-ORACLE2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-SYBIL-ATTACK" name="Sybil attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;In a Sybil attack, an attacker creates multiple fake identities or nodes to gain a disproportionately high level of influence or reputation within a network or system. In the context of a blockchain oracle, this could involve an attacker creating numerous fake nodes that all appear to have a good reputation.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-VERIFICATION">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-ORACLE3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-ORACLE3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="no-security-procedures-monitoring" name="Attackers gain access to the system and are not detected" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;Attackers gain access to the systems and are not detected. Therefore, they can make changes to the systems and remain undetected. Data integrity is destroyed.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1562.001" url="https://attack.mitre.org/techniques/T1562/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.002" url="https://attack.mitre.org/techniques/T1562/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.003" url="https://attack.mitre.org/techniques/T1562/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.004" url="https://attack.mitre.org/techniques/T1562/004"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.006" url="https://attack.mitre.org/techniques/T1562/006"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.007" url="https://attack.mitre.org/techniques/T1562/007"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.008" url="https://attack.mitre.org/techniques/T1562/008"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.009" url="https://attack.mitre.org/techniques/T1562/009"/>
                <reference name="Mitre ATT&amp;CK Technique T1562.010" url="https://attack.mitre.org/techniques/T1562/010"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-778">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-ORACLE4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-ORACLE4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-DATA-MANIPULATION" name="Data Manipulation" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;Data manipulation is a threat where attackers attempt to modify or alter the information within the blockchain. This can lead to incorrect execution of smart contracts, fraudulent transactions, or unauthorized changes to critical data. The integrity of the blockchain is compromised, potentially causing financial losses or legal issues.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-345">
                  <countermeasures>
                    <countermeasure ref="C-BLOCKCHAIN-ORACLE1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-BLOCKCHAIN-ORACLE1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="eba3f86b-ad08-49c0-8e21-b0c20e1bce93" diagramComponentId="8d8d9af9-78c3-4840-b18c-a5a1d9ec6668" ref="3340f2cf-74da-4569-98d7-c815aebc28fe" name="Consensus Mechanisms" desc="" library="" parentComponentRef="" componentDefinitionRef="CD-CONSENSUS-MECHANISMS">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="static-content"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="W-INADEQUATE-ECLIPSE-MITIGATION" name="Inadequate Eclipse Attack mitigation" state="0" impact="100" issueId="" issueLink="">
          <desc>Inadequate Eclipse Attack mitigation represents a notable weakness when implementing measures to safeguard against Eclipse Attacks within consensus mechanisms. This weakness emerges when the mitigation strategies in place lack the depth and effectiveness needed to detect and counter Eclipse Attacks comprehensively. Eclipse Attacks occur when malicious entities isolate a target node by gaining control over all its incoming and outgoing network connections, rendering the node susceptible to manipulation and potential adversarial influence. The deficiency in Eclipse Attack mitigation measures exposes the network to vulnerabilities, jeopardizing its security and reliability. To address this weakness, it is essential to develop and continually enhance robust and sophisticated countermeasures capable of effectively detecting and thwarting Eclipse Attacks, thereby ensuring the network's integrity and resilience against this specific threat.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.777">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-INADEQUATE-LONG-RANGE-MITIGATION" name="Inadequate Long-Range Attack mitigation" state="0" impact="100" issueId="" issueLink="">
          <desc>Inadequate Long-Range Attack mitigation presents a significant weakness when considering measures to defend against this specific threat within consensus mechanisms. This weakness emerges when the implemented mitigation strategies lack the necessary depth and effectiveness to comprehensively detect and counter Long-Range Attacks. In a Long-Range Attack, adversaries attempt to rewrite the blockchain's history by creating an alternate and extended chain, often from a distant point in the past, which may go unnoticed due to the impracticality of maintaining a complete historical record by network participants. The insufficiency of mitigation measures exposes the network to the risk of historical blockchain revisions, jeopardizing the integrity of the blockchain's history and diminishing trust in the underlying consensus mechanism. To address this weakness, it is imperative to develop and deploy robust and advanced countermeasures capable of effectively identifying and thwarting Long-Range Attacks, ensuring the network's historical accuracy and resilience against this specific threat.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.777">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-51-PERCENT-DEFENCE" name="Lack of 51% defence" state="0" impact="100" issueId="" issueLink="">
          <desc>The lack of 51% defence lies in the blockchain network's susceptibility to manipulation by a determined attacker. Some specific weaknesses associated with this vulnerability include:
- Centralization Risk: A blockchain network that lacks robust security measures against 51% attacks is at risk of becoming centralized, as attackers with sufficient resources can dominate the mining power, discouraging other participants and undermining the decentralization principle.
- Loss of Trust: Users, investors, and businesses may lose trust in a blockchain network that is susceptible to 51% attacks, leading to a decreased adoption rate and value of the cryptocurrency associated with the blockchain.
- Financial Impact: Double-spending and other malicious activities can result in significant financial losses for users and businesses relying on the blockchain, potentially leading to a loss of confidence and abandonment of the network.
- Economic Incentives: Miners may be less inclined to participate in a blockchain network that lacks security against 51% attacks, as they risk losing their rewards and investments in mining hardware.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.777">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-NOTHING-AT-STAKE-MITIGATION" name="Lack of Nothing at Stake Attack mitigation" state="0" impact="100" issueId="" issueLink="">
          <desc>Lack of Nothing at Stake Attack mitigation represents a critical weakness when implementing measures to safeguard against this particular threat within consensus mechanisms. This weakness arises when the mitigation strategies employed are either absent or insufficient to deter validators or miners from exploiting the absence of financial disincentives for validating multiple competing blockchain forks. In such a scenario, malicious actors may engage in a "nothing at stake" behavior, validating and contributing to multiple forks simultaneously, potentially leading to network instability, chain reorganizations, and a compromised blockchain's security and reliability. The absence of effective mitigation measures leaves the network vulnerable to these attacks, emphasizing the urgent need for comprehensive and robust countermeasures to discourage validators from participating in harmful activities while preserving the blockchain's integrity and trustworthiness.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.777">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-SELFISH-MINING-DEFENCE" name="Lack of prevention measures against selfish mining attack" state="0" impact="100" issueId="" issueLink="">
          <desc>Lack of prevention measures against a selfish mining attack can lead to significant vulnerabilities in a blockchain network's security and fairness. Without robust and well-designed countermeasures in place, malicious miners or mining pools may exploit the absence of safeguards, potentially disrupting the consensus mechanism and unfairly benefiting from selfish mining strategies. This weakness allows for the continued risk of selfish mining attacks, compromising the network's integrity and trustworthiness, and necessitates the urgent implementation of effective prevention measures to mitigate such threats effectively.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.777">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-VERIFICATION" name="Lack of verification mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>Inadequate verification mechanisms may expose the system to manipulation by dishonest entities, potentially distorting their reputation and fostering a false sense of trust.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.776">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-CONSENSUS-MECHANISMS4" name="Implement Eclipse Attack mitigation in Consensus Mechanisms" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement Eclipse Attack mitigation in Consensus Mechanisms&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Eclipse attacks pose a significant threat to the integrity and reliability of peer-to-peer payment systems, potentially leading to misdirected payments and enabling subsequent attacks. Implementing a countermeasure to mitigate Eclipse attacks is essential for maintaining the security and trustworthiness of the blockchain network.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement a randomized peer selection process to reduce the likelihood of an attacker controlling all connections to a node. This can make it more challenging for an attacker to eclipse a node effectively.&lt;/li&gt;&lt;li&gt;Develop and integrate a peer reputation system that evaluates the behavior and history of connected nodes. Suspicious or malicious nodes can be isolated or deprioritized, reducing the risk of eclipse attacks.&lt;/li&gt;&lt;li&gt;Encourage the deployment of nodes on diverse infrastructure, such as different cloud providers and physical locations. This diversity makes it harder for attackers to isolate nodes from the network.&lt;/li&gt;&lt;li&gt;Enhance network monitoring and visibility to detect and respond to eclipse attack attempts promptly. Anomaly detection systems can identify unusual patterns in peer connections.&lt;/li&gt;&lt;li&gt;Employ Sybil attack countermeasures, such as proof-of-work requirements for new nodes to join the network. This can deter attackers from creating multiple malicious nodes to eclipse legitimate ones.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Eclipse attacks on blockchains and how to stop them" url="https://www.cnbctv18.com/cryptocurrency/explained-eclipse-attacks-on-blockchains-and-how-to-stop-them-13020692.htm"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1. Simulate eclipse attack scenarios in a controlled environment to evaluate the effectiveness of randomized peering, peer reputation, and Sybil attack mitigation measures.&lt;br&gt;2. Assess the impact of diverse node types on network stability and latency under various traffic loads.&lt;br&gt;3. Test the scalability of the blockchain network by measuring the time and resources required for new nodes to join under proof-of-work requirements.&lt;br&gt;4. Evaluate the network's response to enhanced peer discovery mechanisms and its ability to prevent nodes from being easily isolated.&lt;br&gt;5. Monitor the network for any centralization trends or risks introduced by eclipse attack mitigation measures.&lt;br&gt;6. Continuously monitor the network for signs of eclipse attacks and fine-tune countermeasures as needed to strike a balance between security and network performance.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-CONSENSUS-MECHANISMS6" name="Implement long range attack mitigation in Consensus Mechanisms" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement long range attack mitigation in Consensus Mechanisms&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Long Range Attacks pose a theoretical threat to Proof of Stake (PoS) consensus blockchains, potentially allowing adversaries to manipulate the blockchain's history. To mitigate this risk, implementing Weak Subjectivity and enhanced security measures becomes crucial. These countermeasures ensure that nodes can distinguish between the valid blockchain and false chains, preserving the integrity of the network.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Introduce Weak Subjectivity checkpoints within the blockchain protocol. These checkpoints establish a boundary beyond which nodes cannot consider any alternative blockchain as valid. Nodes will only recognize blocks within this boundary as part of the true blockchain history.&lt;/li&gt;&lt;li&gt;Define a mechanism for regularly updating Weak Subjectivity checkpoints to adapt to the evolving blockchain.&lt;/li&gt;&lt;li&gt;Implement a list of trusted bootstrap nodes that new nodes can connect to when joining the network. Bootstrap nodes should maintain the most recent blockchain state and provide trustworthy information to new nodes.&lt;/li&gt;&lt;li&gt;Deploy a system of periodic checkpoints where nodes agree on specific blocks that are considered universally valid. These checkpoints serve as anchors for the blockchain's history, preventing manipulation.&lt;/li&gt;&lt;li&gt;Introduce a mechanism that allows nodes to validate the range of blocks they receive from peers. If a peer presents a blockchain that extends beyond the Weak Subjectivity checkpoint, nodes should reject it as invalid.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Long range attack (blockchain)" url="https://golden.com/wiki/Long_range_attack_(blockchain)-DBED4MJ"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1. Simulate Long Range Attack scenarios by attempting to introduce false chains beyond the Weak Subjectivity checkpoint. Verify that nodes correctly reject these chains.&lt;br&gt;2. Test the functionality of the list of trusted bootstrap nodes by connecting new nodes to the network and ensuring they receive accurate blockchain information.&lt;br&gt;3. Validate the periodic checkpoint system by verifying that nodes agree on specific blocks as universally valid.&lt;br&gt;4. Evaluate the adaptability of Weak Subjectivity checkpoints to changes in the blockchain's state and history.&lt;br&gt;5. Monitor community-driven consensus processes for updating Weak Subjectivity checkpoints to assess transparency and community involvement in the blockchain's security.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-CONSENSUS-MECHANISMS1" name="Implement multifaceted defense against 51% attacks in Consensus Mechanisms" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement multifaceted defense against 51% attacks in Consensus Mechanisms&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;A 51% attack occurs when one individual or organization (malicious hackers) collects quite 1/2 the hash rate and seizes control of the whole system, which might be disastrous. Hackers can modify the order of transactions and forestall them from being confirmed. they'll even reverse previously completed transactions, leading to double spending.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Blockchain networks should actively encourage more miners to participate in the network. This can be achieved through marketing, awareness campaigns, and user-friendly mining software.&lt;/li&gt;&lt;li&gt;Miners should be encouraged to join diverse mining pools rather than concentrating mining power in a few large pools. A diversified pool ecosystem reduces the risk of a single pool gaining too much control over the network.&lt;/li&gt;&lt;li&gt;Consider implementing consensus algorithm upgrades that are resistant to 51% attacks. For example, some cryptocurrencies have transitioned to proof-of-stake (PoS) or hybrid PoW/PoS systems to reduce the influence of computational power.&lt;/li&gt;&lt;li&gt;Continue to provide attractive rewards for miners, such as transaction fees and block rewards, to ensure their commitment to the network's security.&lt;/li&gt;&lt;li&gt;Encourage the blockchain community to actively monitor the network's hashrate and take action if there are signs of a significant increase in mining power by a single entity or group.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="What is a 51% attack and how is it prevented?" url="https://www.bitpanda.com/academy/en/lessons/what-is-a-51-attack-and-how-is-it-prevented"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Regularly monitor the network's hashrate using tools and analytics to detect any sudden changes or anomalies.&lt;/li&gt;&lt;li&gt;Analyze the distribution of miners across different mining pools to ensure that power is not overly concentrated in a small number of pools.&lt;/li&gt;&lt;li&gt;Continuously assess the incentives provided to miners to ensure they remain motivated to contribute to the network's security.&lt;/li&gt;&lt;li&gt;If considering a transition to a different consensus algorithm, conduct thorough testing and analysis to ensure it provides the desired security benefits.&lt;/li&gt;&lt;li&gt;Engage with the blockchain community through forums, social media, and newsletters to promote decentralization and encourage more participants to become miners.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.712">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-CONSENSUS-MECHANISMS5" name="Implement nothing at stake attack mitigation in Consensus Mechanisms" issueId="" issueLink="" platform="" cost="1" risk="35" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement nothing at stake attack mitigation in Consensus Mechanisms&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;The nothing-at-stake problem in traditional PoS systems presents a theoretical security risk that could compromise the network's integrity. The adoption of a security-deposit based PoS protocol, such as Casper, can deter malicious behavior by imposing economic penalties on validators who engage in dishonest actions. This strategy strengthens the security and dependability of the PoS blockchain.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement a security-deposit requirement for nodes wishing to participate as validators in the PoS blockchain. This deposit should be a significant economic stake in the network, creating a financial incentive for honest behavior.&lt;/li&gt;&lt;li&gt;Define rules within the protocol that result in the forfeiture of a portion or all of the security deposit if a validator produces invalid blocks or engages in malicious actions. This cost attaches a penalty to dishonest behavior.&lt;/li&gt;&lt;li&gt;Ensure that validators who violate the protocol's rules, such as producing invalid blocks, lose their ability to participate in the consensus process. This prevents malicious validators from continuing to influence the network.&lt;/li&gt;&lt;li&gt;Structure the security-deposit system in a way that aligns the economic interests of validators with the network's overall health and security. Validators should find it more profitable to behave honestly than to engage in malicious activities.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Nothing-at-stake problem" url="https://golden.com/wiki/Nothing-at-stake_problem-639PVZA"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1. Simulate scenarios where validators produce invalid blocks or engage in malicious activities to assess the effectiveness of the security-deposit forfeiture mechanism.&lt;br&gt;2. Evaluate the economic incentives for validators by modeling potential rewards for honest behavior versus penalties for dishonesty.&lt;br&gt;3. Monitor the protocol's governance processes to ensure transparency and fairness in managing security deposits and penalties.&lt;br&gt;4. Assess the impact of the security-deposit requirement on validator participation and network decentralization, considering potential barriers to entry.&lt;br&gt;5. Continuously monitor the PoS blockchain for signs of improved security and validator accountability as a result of the implemented security-deposit based protocol.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-CONSENSUS-MECHANISMS3" name="Implement selfish mining attack prevention measures in Consensus Mechanisms" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement selfish mining attack prevention measures in Consensus Mechanisms&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;The selfish mining attack threatens the integrity and decentralization of blockchain networks by allowing attackers to unfairly gain rewards and undermine the consensus mechanism. Implementing countermeasures to defend against selfish mining is crucial for maintaining a secure and fair blockchain ecosystem.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Consider implementing or enhancing the consensus algorithm used by the blockchain network. Newer algorithms may be designed to be more resistant to selfish mining attacks.&lt;/li&gt;&lt;li&gt;Implement network monitoring solutions to detect and respond to suspicious mining behavior. This includes tracking mining power distribution and identifying any miner attempting to maintain a private chain.&lt;/li&gt;&lt;li&gt;Ensure that block discovery and broadcasting are transparent and aligned with the principles of the blockchain network. Minimize any time advantage gained by selfish miners.&lt;/li&gt;&lt;li&gt;Implement penalties or disincentives for miners who fork the blockchain into a private chain. This could involve delaying the rewards for miners who don't publish blocks promptly.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;None.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="A survey on the security of blockchain systems" url="https://www.sciencedirect.com/science/article/pii/S0167739X17318332"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1. Evaluate the impact of the enhanced consensus algorithm on network performance, scalability, and security through thorough testing and analysis.&lt;br&gt;2. Monitor the resource utilization of network monitoring solutions to ensure they do not excessively burden the network's computational resources.&lt;br&gt;3. Measure the latency introduced by changes in block discovery and broadcasting mechanisms and assess their impact on transaction confirmations.&lt;br&gt;4. Observe the community’s response to penalties or disincentives for selfish mining and assess any disputes or network forks that may arise.&lt;br&gt;5. Gauge the effectiveness of educational campaigns by tracking changes in miner behavior and awareness of selfish mining risks within the blockchain community.&lt;br&gt;6. Continuously monitor the network for signs of selfish mining activity and adjust countermeasures as needed to strike a balance between security and network performance.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-CONSENSUS-MECHANISMS2" name="Implement Sybil Attack prevention measures in Consensus Mechanisms" issueId="" issueLink="" platform="" cost="1" risk="42" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement Sybil Attack prevention measures in Consensus Mechanisms&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Sybil attacks pose a significant threat to the security and integrity of blockchain networks. These attacks can enable malicious actors to gain disproportionate influence, compromise privacy, and disrupt network operations. Implementing Sybil attack prevention measures is crucial to safeguard the network and its users against these threats.&lt;/p&gt;&lt;p&gt;Remediation:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use identity validation methods to verify the authenticity of network participants. This can include phone number verification, credit card verification, or IP address validation. Identity-based validation provides accountability but may sacrifice some degree of anonymity.&lt;/li&gt;&lt;li&gt;Analyze connectivity data in social graphs to detect and limit the extent of Sybil attacks. Techniques like SybilGuard and the Advogato Trust Metric can help identify suspected Sybil clusters in distributed systems. However, be aware that these techniques may have limitations in certain network contexts.&lt;/li&gt;&lt;li&gt;Introduce economic barriers to entry that make Sybil attacks prohibitively expensive. For example, require participants to invest in resources like stake or storage. Implement Proof of Work (PoW) mechanisms that demand computational effort, making it costly for attackers to create multiple identities.&lt;/li&gt;&lt;li&gt;Implement a 'one entity per person' rule, which requires identity verification without revealing real identities. For example, users can verify their identity through pseudonym parties, ensuring each human participant has exactly one vote.&lt;/li&gt;&lt;li&gt;Explore distributed protocols and algorithms that inherently resist Sybil attacks. Examples include SumUp and DSybil for content recommendation and voting, Whanau for distributed hash tables, and Sybil-resistant versions of Kademlia.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Impact:&lt;br&gt;Identity validation and personhood validation measures could potentially reduce the degree of anonymity in the network, which might be undesirable in some use cases. Economic costs, while effective, may deter legitimate users as well. Additionally, the effectiveness of social trust graphs and application-specific defenses can vary depending on the network's characteristics.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Sybil Attack" url="https://www.imperva.com/learn/application-security/sybil-attack"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ul&gt;&lt;li&gt;Verify that the identity validation mechanisms are correctly implemented and effectively prevent the creation of multiple fake identities by a single user.&lt;/li&gt;&lt;li&gt;Evaluate the performance of social trust graph-based Sybil attack prevention techniques in identifying and limiting impact of Sybil attacks. Test these techniques against various network scenarios.&lt;/li&gt;&lt;li&gt;Assess the economic costs introduced as barriers to Sybil attacks. Ensure that the costs are sufficient to deter attackers without significantly affecting legitimate users.&lt;/li&gt;&lt;li&gt;Test the pseudonym parties or similar mechanisms to validate the personhood of participants without revealing their real identities. Ensure that the process is secure and reliable.&lt;/li&gt;&lt;li&gt;If implementing specific protocols or algorithms, Test their resistance to Sybil attacks in the context of the blockchain network. Verify that these defenses perform as expected and provide effective protection against Sybil threats.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.713">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Blockchain-Components">
          <threats>
            <threat ref="T-SYBIL-ATTACK" name="Sybil attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;In a Sybil attack, an attacker creates multiple fake identities or nodes to gain a disproportionately high level of influence or reputation within a network or system. In the context of a blockchain oracle, this could involve an attacker creating numerous fake nodes that all appear to have a good reputation.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-VERIFICATION">
                  <countermeasures>
                    <countermeasure ref="C-CONSENSUS-MECHANISMS2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-CONSENSUS-MECHANISMS2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-SELFISH-MINING-ATTACK" name="Selfish Mining Attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;A Selfish Mining Attack is a strategy employed by malicious miners or mining pools in a blockchain network, primarily within proof-of-work (PoW) systems, to gain an unfair advantage and increase their rewards by withholding mined blocks from the network. Rather than immediately broadcasting valid blocks to the network, the attacker secretly mines new blocks but keeps them private. During this time, the rest of the network continues mining on the outdated blockchain, unaware of the new blocks. When the attacker eventually releases their hidden chain, they outpace the honest network, effectively orphaning the previously mined blocks. This results in the attacker receiving a disproportionately large share of the mining rewards. Selfish mining can undermine the fairness and security of the blockchain network's consensus mechanism, potentially leading to centralization and reduced trust among network participants.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="75" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-SELFISH-MINING-DEFENCE">
                  <countermeasures>
                    <countermeasure ref="C-CONSENSUS-MECHANISMS3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-CONSENSUS-MECHANISMS3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-ECLIPSE-ATTACK" name="Eclipse Attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;An Eclipse Attack is a type of attack where a malicious entity or adversary gains control over all or a significant portion of the network connections of a target node in a blockchain network. By isolating the target node from the rest of the network, the attacker can manipulate the information the node receives and send, potentially leading to various security issues, including double-spending attacks, consensus manipulation, or denial of service. The primary threat of an Eclipse Attack is the compromise of the target node's integrity and the potential disruption of the overall blockchain network's operations.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="100" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="W-INADEQUATE-ECLIPSE-MITIGATION">
                  <countermeasures>
                    <countermeasure ref="C-CONSENSUS-MECHANISMS4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-CONSENSUS-MECHANISMS4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-51-PERCENT-ATTACK" name="51% attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;A 51% attack is a security threat in blockchain networks, particularly in proof-of-work (PoW) cryptocurrencies like Bitcoin, where an attacker or group of attackers gains control of more than 50% of the network's computational power (hash rate). With this majority control, they can manipulate the blockchain by executing actions such as double spending, censorship of transactions, and blockchain reorganization. This attack is challenging to execute on well-established and secure blockchain networks due to their distributed mining communities and robust security measures. Mitigation strategies include promoting decentralization, using alternative consensus mechanisms like proof-of-stake, and continuous network monitoring to detect and respond to suspicious activities&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="100" availability="75" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-51-PERCENT-DEFENCE">
                  <countermeasures>
                    <countermeasure ref="C-CONSENSUS-MECHANISMS1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-CONSENSUS-MECHANISMS1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-LONG-RANGE-ATTACK" name="Long-Range Attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;A Long-Range Attack is a security threat in blockchain networks, particularly relevant to proof-of-stake (PoS) and other consensus mechanisms. In this type of attack, an adversary attempts to rewrite the blockchain's history by creating an alternate and longer chain that originates from a point far back in the past. This attack leverages the fact that network participants typically do not maintain a record of all historical blocks, making it difficult to detect the fraudulent chain. The goal of a Long-Range Attack is to undermine the integrity and historical accuracy of the blockchain, potentially leading to the acceptance of a maliciously crafted history that erodes trust in the network's consensus mechanism. It is a challenge to defend against Long-Range Attacks, and robust mitigation measures are crucial to maintaining the security and reliability of the blockchain.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="100" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-INADEQUATE-LONG-RANGE-MITIGATION">
                  <countermeasures>
                    <countermeasure ref="C-CONSENSUS-MECHANISMS6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-CONSENSUS-MECHANISMS6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-NOTHING-AT-STAKE-ATTACK" name="Nothing at Stake Attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;A Nothing at Stake Attack is a security vulnerability in blockchain consensus mechanisms, particularly in proof-of-stake (PoS) or delegated proof-of-stake (DPoS) systems, where malicious validators or token holders exploit the absence of financial disincentives to validate multiple competing blockchain forks. Since there's "nothing at stake," validators or token holders can simultaneously validate and create blocks on multiple forked chains without significant costs. This can lead to network instability, frequent chain reorganizations, and the potential for double-spending attacks. Mitigation measures often include mechanisms like slashing or bonding, where validators commit tokens and face financial penalties if they support multiple forks, discouraging such behavior and enhancing the network's security and integrity.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="75" availability="75" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-NOTHING-AT-STAKE-MITIGATION">
                  <countermeasures>
                    <countermeasure ref="C-CONSENSUS-MECHANISMS5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-CONSENSUS-MECHANISMS5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="d29b41f9-a725-4548-b5cb-4fb429a90c65" diagramComponentId="8da773e9-f34c-41e4-ba90-df442ba983ef" ref="b55017fd-ce3a-49a2-b00c-cd76e41d68d8" name="Mobile Application" desc="" library="" parentComponentRef="" componentDefinitionRef="CD-V2-MOBILE-BANKING-APPLICATION">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="application-trust-zone-(high-trust)"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-250" name="CWE-250" state="0" impact="100" issueId="" issueLink="">
          <desc>CWE:
CWE-250: Execution with Unnecessary Privileges
The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.483">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="CWE-287" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-287: Improper Authentication
When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.
</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.483">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-319" name="CWE-319" state="0" impact="100" issueId="" issueLink="">
          <desc>CWE:
CWE-319: Cleartext Transmission of Sensitive Information
The product transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.483">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-656" name="CWE-656" state="0" impact="100" issueId="" issueLink="">
          <desc>CWE:
CWE-656: Reliance on Security Through Obscurity
The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.
This reliance on "security through obscurity" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.483">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-693" name="CWE-693" state="0" impact="100" issueId="" issueLink="">
          <desc>CWE:
CWE-693: Protection Mechanism Failure
The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.
This weakness covers three distinct situations. A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.482">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-AUTHENTICATION" name="Enforce secure authentication mechanisms" issueId="" issueLink="" platform="" cost="2" risk="54" state="Required" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Implement Multi-Factor Authentication (MFA):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Integrate MFA into the login process, requiring users to provide two or more verification methods (e.g., password and a one-time code sent to their mobile device).&lt;/li&gt;
 &lt;li&gt;Utilize libraries like Google Authenticator, Authy, or built-in platform-specific solutions such as Firebase Authentication for MFA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use Strong Password Policies:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Enforce a minimum password length of at least 12 characters.&lt;/li&gt;
 &lt;li&gt;Require a mix of uppercase letters, lowercase letters, numbers, and special characters.&lt;/li&gt;
 &lt;li&gt;Prohibit the use of common passwords and dictionary words by implementing password blacklist checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Store Passwords Securely:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Never store passwords in plaintext.&lt;/li&gt;
 &lt;li&gt;Use a strong, industry-standard hashing algorithm like bcrypt, Argon2, or PBKDF2 with a high iteration count.&lt;/li&gt;
 &lt;li&gt;Salt passwords before hashing to prevent rainbow table attacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Secure the Authentication Process:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use HTTPS to encrypt all data transmitted between the client and server, preventing man-in-the-middle attacks.&lt;/li&gt;
 &lt;li&gt;Implement proper SSL/TLS certificates and ensure they are up-to-date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Account Lockout Mechanisms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Temporarily lock accounts after a certain number of failed login attempts to mitigate brute force attacks.&lt;/li&gt;
 &lt;li&gt;Provide a mechanism for legitimate users to unlock their accounts securely, such as through email verification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Securely Manage Sessions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use secure, HTTP-only, and same-site cookies for session management to prevent XSS and CSRF attacks.&lt;/li&gt;
 &lt;li&gt;Implement session expiration and automatic logout after a period of inactivity.&lt;/li&gt;
 &lt;li&gt;Revoke and invalidate sessions on password changes or suspicious activities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regularly Monitor and Log Authentication Events:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Log all authentication attempts, both successful and unsuccessful, along with relevant details (e.g., timestamps, IP addresses).&lt;/li&gt;
 &lt;li&gt;Monitor logs for unusual patterns and implement alerting mechanisms for potential security incidents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Users on Secure Practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Provide guidance on creating strong passwords and recognizing phishing attempts.&lt;/li&gt;
 &lt;li&gt;Encourage users to enable MFA and explain its importance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conduct Regular Security Audits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform periodic security audits and penetration testing on the authentication system.&lt;/li&gt;
 &lt;li&gt;Address any vulnerabilities discovered promptly and update security measures as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can significantly enhance the security of the authentication mechanisms in your mobile banking application, ensuring robust protection against unauthorized access.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST Special Publication 800-63B - Digital Identity Guidelines" url="https://pages.nist.gov/800-63-3/sp800-63b.html"/>
          </references>
          <standards>
            <standard ref="12.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="633-428" supportedStandardRef="OpenCRE"/>
            <standard ref="7.1.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3.8" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.4.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="A3.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="AC-7 UNSUCCESSFUL LOGON ATTEMPTS" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-8 SYSTEM USE NOTIFICATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-9 PREVIOUS LOGON NOTIFICATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="Account Locking" supportedStandardRef="D3FEND"/>
            <standard ref="Authentication information" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Authorized Agents (a)" supportedStandardRef="ccpa"/>
            <standard ref="Authorized Agents (d)" supportedStandardRef="ccpa"/>
            <standard ref="Consumers Less Than Under 13 Years of Age (c)" supportedStandardRef="ccpa"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OV-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.SC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="General Rules Regarding Verification (a)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(1)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(2)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (h)" supportedStandardRef="ccpa"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1 Policy and Procedures" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10 Adaptive Authentication" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-12 Identity Proofing" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-2 Identification and Authentication (organizational Users)" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-3 Device Identification and Authentication" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-4 Identifier Management" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-5 AUTHENTICATOR MANAGEMENT" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-8 Identification and Authentication (non-organizational Users)" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="Local Account Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Multi-factor Authentication" supportedStandardRef="D3FEND"/>
            <standard ref="PR.AA-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AC-1: Identities and credentials are issued, managed, verified, revoked, and audited for authorized devices, users and processes" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6: Identities are proofed and bound to credentials and asserted in interactions" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7: Users, devices, and other assets are authenticated (e.g., single-factor, multi-factor) commensurate with the risk of the transaction (e.g., individuals' security and privacy risks and other organizational risks)" supportedStandardRef="nist-csf"/>
            <standard ref="Requests to Correct (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Know (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Know (b)" supportedStandardRef="ccpa"/>
            <standard ref="Secure authentication" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Verification for Non-Accountholders (b)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Non-Accountholders (c)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Password-Protected Accounts (a)" supportedStandardRef="ccpa"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1032 - Multi-factor Authentication||ATT&amp;CK ICS - M0804 - Human User Authentication||ATT&amp;CK ICS - M0813 - Software Process and Device Authentication"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="AC-7 UNSUCCESSFUL LOGON ATTEMPTS"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-ENCRYPTION" name="Implement end-to-end encryption" issueId="" issueLink="" platform="" cost="2" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Choose an Encryption Protocol:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Select a robust and widely-used end-to-end encryption protocol, such as the Signal Protocol or TLS with mutual authentication.&lt;/li&gt;
 &lt;li&gt;Ensure the chosen protocol supports key exchange, message encryption, and authentication.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Key Management:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Generate unique public-private key pairs for each user during account creation using a secure cryptographic library.&lt;/li&gt;
 &lt;li&gt;Store private keys securely on the user’s device using platform-specific secure storage mechanisms (e.g., Keychain for iOS, Keystore for Android).&lt;/li&gt;
 &lt;li&gt;Distribute public keys securely through a key exchange process when users start a new session or conversation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Establish Secure Channels:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use asymmetric encryption (e.g., RSA or ECC) for the initial key exchange to establish a secure session between clients.&lt;/li&gt;
 &lt;li&gt;Perform mutual authentication to ensure both parties are who they claim to be.&lt;/li&gt;
 &lt;li&gt;Implement forward secrecy to ensure that session keys are ephemeral and regularly replaced.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Encrypt Messages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use symmetric encryption (e.g., AES-256) to encrypt the actual messages exchanged between users.&lt;/li&gt;
 &lt;li&gt;Encrypt the message content before sending it over the network using the session key established during the key exchange.&lt;/li&gt;
 &lt;li&gt;Include message integrity checks (e.g., HMAC) to ensure data has not been tampered with in transit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Secure Message Transmission:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Transmit encrypted messages over secure communication channels (e.g., HTTPS) to protect against network-level attacks.&lt;/li&gt;
 &lt;li&gt;Ensure SSL/TLS certificates are correctly configured and validated to prevent man-in-the-middle attacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Decrypt Messages on the Client Side:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Decrypt received messages on the client device using the session key.&lt;/li&gt;
 &lt;li&gt;Ensure decrypted messages are handled securely and are not stored in plaintext.&lt;/li&gt;
 &lt;li&gt;Use platform-specific secure memory management techniques to protect sensitive data in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Handle Key Rotation and Expiry:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Regularly rotate session keys to minimize the impact of a potential key compromise.&lt;/li&gt;
 &lt;li&gt;Implement key expiry policies to invalidate old keys and establish new ones periodically.&lt;/li&gt;
 &lt;li&gt;Notify users if key changes occur and provide mechanisms to verify key integrity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Secure Backup and Restore:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Encrypt backups of encrypted messages using a secure key derived from a user-specific passphrase.&lt;/li&gt;
 &lt;li&gt;Ensure backups are stored securely and can only be decrypted by the intended user.&lt;/li&gt;
 &lt;li&gt;Provide a secure restore mechanism that verifies user identity and integrity of the backup before decryption.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Test and Audit the Encryption Implementation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Conduct regular security audits and code reviews to ensure encryption mechanisms are correctly implemented.&lt;/li&gt;
 &lt;li&gt;Perform penetration testing to identify and mitigate potential vulnerabilities.&lt;/li&gt;
 &lt;li&gt;Stay updated with the latest security practices and update the encryption implementation as necessary.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Users on Encryption and Security:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Inform users about the benefits of end-to-end encryption and how it protects their data.&lt;/li&gt;
 &lt;li&gt;Provide guidelines on recognizing and avoiding phishing attempts that could compromise encryption keys or user credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can effectively implement end-to-end encryption in your mobile banking application, ensuring that user data remains secure and private throughout its lifecycle.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Cryptographic Storage Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="287-305" supportedStandardRef="OpenCRE"/>
            <standard ref="320" supportedStandardRef="cwe-standard"/>
            <standard ref="508-702" supportedStandardRef="OpenCRE"/>
            <standard ref="821-832" supportedStandardRef="OpenCRE"/>
            <standard ref="Cryptographic Storage Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="Key Management Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="V1.6.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="V1.6.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="V1.6.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1041 - Encrypt Sensitive Information"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V1.6.1||V1.6.2||V1.6.3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-SECURE-CODING" name="Implement secure coding practices" issueId="" issueLink="" platform="" cost="2" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Validate Input Data:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Sanitize and validate all input data from users, APIs, and other external sources.&lt;/li&gt;
 &lt;li&gt;Use allow-lists to specify what is permitted and block any input that does not match the expected format.&lt;/li&gt;
 &lt;li&gt;Utilize input validation libraries provided by your development framework or language.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Proper Authentication and Authorization:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use strong authentication mechanisms, such as OAuth2, to verify user identity.&lt;/li&gt;
 &lt;li&gt;Ensure users have appropriate permissions for accessing resources and performing actions.&lt;/li&gt;
 &lt;li&gt;Follow the principle of least privilege by granting the minimum necessary permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use Prepared Statements for Database Access:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Avoid concatenating SQL queries with user input to prevent SQL injection attacks.&lt;/li&gt;
 &lt;li&gt;Use parameterized queries and prepared statements provided by database libraries or ORM frameworks.&lt;/li&gt;
 &lt;li&gt;Regularly update database libraries to the latest versions for security improvements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Handle Errors and Exceptions Securely:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Catch and handle exceptions to prevent application crashes and exposure of stack traces.&lt;/li&gt;
 &lt;li&gt;Avoid displaying detailed error messages to users; log them securely instead.&lt;/li&gt;
 &lt;li&gt;Implement a generic error handling mechanism to provide user-friendly error messages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Store Sensitive Data Securely:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Encrypt sensitive data both at rest and in transit using strong encryption algorithms like AES-256.&lt;/li&gt;
 &lt;li&gt;Use secure storage solutions, such as Keychain for iOS and Keystore for Android, for storing credentials and other sensitive information.&lt;/li&gt;
 &lt;li&gt;Regularly review and update encryption keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Secure Session Management:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use secure cookies (HTTPOnly and Secure flags) to store session tokens.&lt;/li&gt;
 &lt;li&gt;Implement session expiration and invalidate sessions after a period of inactivity.&lt;/li&gt;
 &lt;li&gt;Use unique, random session IDs and regenerate them upon login.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Protect Against Cross-Site Scripting (XSS):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Escape and encode all output data to prevent injection of malicious scripts.&lt;/li&gt;
 &lt;li&gt;Use security libraries like DOMPurify to sanitize HTML content.&lt;/li&gt;
 &lt;li&gt;Implement Content Security Policy (CSP) headers to restrict the execution of scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Defend Against Cross-Site Request Forgery (CSRF):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use anti-CSRF tokens in forms and validate them on the server-side.&lt;/li&gt;
 &lt;li&gt;Ensure that cookies are set with the SameSite attribute to restrict cross-site usage.&lt;/li&gt;
 &lt;li&gt;Implement double-submit cookie pattern for additional CSRF protection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Regularly Update Dependencies:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Keep all libraries, frameworks, and dependencies up to date with the latest security patches.&lt;/li&gt;
 &lt;li&gt;Use dependency management tools like npm, Gradle, or Maven to automate updates.&lt;/li&gt;
 &lt;li&gt;Monitor and address known vulnerabilities using tools like OWASP Dependency-Check or Snyk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conduct Code Reviews and Security Audits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform regular code reviews with a focus on security best practices.&lt;/li&gt;
 &lt;li&gt;Use static analysis tools like SonarQube, Checkmarx, or Veracode to identify and fix security vulnerabilities.&lt;/li&gt;
 &lt;li&gt;Conduct periodic security audits and penetration testing to uncover and address potential security issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Secure Development Environment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Ensure development environments are secure and isolated from production environments.&lt;/li&gt;
 &lt;li&gt;Use version control systems like Git to track code changes and facilitate code reviews.&lt;/li&gt;
 &lt;li&gt;Implement role-based access controls (RBAC) for development tools and repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Developers on Security Best Practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Provide regular training sessions on secure coding practices and emerging security threats.&lt;/li&gt;
 &lt;li&gt;Encourage developers to follow industry standards and guidelines, such as those provided by OWASP and NIST.&lt;/li&gt;
 &lt;li&gt;Foster a culture of security within the development team, encouraging open discussions about security concerns and solutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can ensure the implementation of secure coding practices in your mobile banking application, reducing the risk of security vulnerabilities and enhancing overall application security.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Secure Coding Practices Quick Reference Guide" url="https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/"/>
          </references>
          <standards>
            <standard ref="272" supportedStandardRef="cwe-standard"/>
            <standard ref="359" supportedStandardRef="cwe-standard"/>
            <standard ref="507" supportedStandardRef="cwe-standard"/>
            <standard ref="540-566" supportedStandardRef="OpenCRE"/>
            <standard ref="834-645" supportedStandardRef="OpenCRE"/>
            <standard ref="838-636" supportedStandardRef="OpenCRE"/>
            <standard ref="Use of privileged utility programs" supportedStandardRef="iso-27002-2022"/>
            <standard ref="V10.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="V10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="V10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1045 - Code Signing||ATT&amp;CK Enterprise - M1054 - Software Configuration"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V10.2.1||V10.2.2||V10.2.3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.201">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-MONITORING" name="Implement transaction monitoring and fraud detection" issueId="" issueLink="" platform="" cost="2" risk="54" state="Required" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Define Fraud Detection Rules:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Identify common fraud patterns and scenarios relevant to your mobile banking application.&lt;/li&gt;
 &lt;li&gt;Develop rules to detect unusual behavior, such as multiple failed login attempts, transactions above a certain threshold, or transactions from unusual locations.&lt;/li&gt;
 &lt;li&gt;Regularly update and refine these rules based on new threat intelligence and evolving fraud patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Real-Time Transaction Monitoring:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use a dedicated transaction monitoring system to track and analyze transactions in real time.&lt;/li&gt;
 &lt;li&gt;Integrate the monitoring system with your backend to capture all transaction data.&lt;/li&gt;
 &lt;li&gt;Use data analytics and machine learning models to identify anomalies and flag suspicious transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Utilize User Behavior Analytics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement user behavior analytics (UBA) to establish a baseline of normal user activity.&lt;/li&gt;
 &lt;li&gt;Monitor deviations from typical behavior, such as unusual transaction amounts, locations, or devices.&lt;/li&gt;
 &lt;li&gt;Use machine learning algorithms to improve the accuracy of anomaly detection over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Incorporate Multi-Layered Authentication:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Require additional authentication (e.g., MFA) for high-risk transactions or when suspicious activity is detected.&lt;/li&gt;
 &lt;li&gt;Implement risk-based authentication to dynamically adjust the level of authentication based on the perceived risk of the transaction.&lt;/li&gt;
 &lt;li&gt;Use biometrics, such as fingerprint or facial recognition, to verify user identity for high-value transactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enable Geolocation and Device Fingerprinting:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use geolocation data to verify the origin of transactions and flag those from unusual or high-risk locations.&lt;/li&gt;
 &lt;li&gt;Implement device fingerprinting to identify and track the devices used for transactions, detecting changes or unknown devices.&lt;/li&gt;
 &lt;li&gt;Combine geolocation and device data with other behavioral indicators to assess transaction risk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Transaction Limits and Alerts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Set transaction limits based on user profiles, such as daily or monthly limits for transaction amounts.&lt;/li&gt;
 &lt;li&gt;Notify users of transactions that exceed predefined thresholds or show signs of fraud.&lt;/li&gt;
 &lt;li&gt;Allow users to configure their own alerts and limits for additional security.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Leverage External Fraud Detection Services:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Integrate with external fraud detection services and APIs that provide advanced fraud detection capabilities.&lt;/li&gt;
 &lt;li&gt;Use services that offer fraud scoring and risk assessment based on global fraud patterns and data.&lt;/li&gt;
 &lt;li&gt;Regularly review and update integrations to ensure the latest fraud detection techniques are utilized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conduct Regular Audits and Reviews:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform regular audits of the transaction monitoring system to ensure it is functioning correctly and effectively.&lt;/li&gt;
 &lt;li&gt;Review flagged transactions and investigate false positives to refine and improve detection rules.&lt;/li&gt;
 &lt;li&gt;Stay informed about emerging fraud trends and update detection mechanisms accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Users on Fraud Prevention:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Provide users with information on how to recognize and avoid fraudulent activities.&lt;/li&gt;
 &lt;li&gt;Encourage users to review their transactions regularly and report any suspicious activity immediately.&lt;/li&gt;
 &lt;li&gt;Offer guidance on creating strong passwords, enabling MFA, and protecting their personal information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Maintain an Incident Response Plan:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Develop a comprehensive incident response plan for handling detected fraud attempts.&lt;/li&gt;
 &lt;li&gt;Ensure the plan includes steps for immediate transaction suspension, user notification, and investigation.&lt;/li&gt;
 &lt;li&gt;Conduct regular drills and updates to the incident response plan to ensure preparedness for actual fraud incidents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can effectively implement transaction monitoring and fraud detection mechanisms in your mobile banking application, significantly enhancing your ability to detect and prevent fraudulent activities.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST Special Publication 800-63C - Digital Identity Federation" url="https://pages.nist.gov/800-63-3/sp800-63c.html"/>
          </references>
          <standards>
            <standard ref="058-083" supportedStandardRef="OpenCRE"/>
            <standard ref="1.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.7.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.5.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.10" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.10.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.10.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.5.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.1.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="DE.AE-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.AE-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.AE-1: A baseline of network operations and expected data flows for users and systems is established and managed" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-2: Detected events are analyzed to understand attack targets and methods" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3: Event data are collected and correlated from multiple sources and sensors" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-4: Impact of events is determined" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-06" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-1: The network is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-4: Malicious code is detected" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-5: Unauthorized mobile code is detected" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6: External service provider activity is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7: Monitoring for unauthorized personnel, connections, devices, and software is performed" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2: Detection activities comply with all applicable requirements" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3: Detection processes are tested" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4: Event detection information is communicated" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5: Detection processes are continuously improved" supportedStandardRef="nist-csf"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.RA-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.RA-1: Asset vulnerabilities are identified and documented" supportedStandardRef="nist-csf"/>
            <standard ref="Incident Detection" supportedStandardRef="SAMM"/>
            <standard ref="Logging and Monitoring" supportedStandardRef="cloud-control-matrix"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Monitoring activities" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Network Traffic Analysis" supportedStandardRef="D3FEND"/>
            <standard ref="Operating System Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="PR.DS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-5: Protections against data leaks are implemented" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8: Effectiveness of protection technologies is shared" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1: Notifications from detection systems are investigated" supportedStandardRef="nist-csf"/>
            <standard ref="SI-4 System Monitoring" supportedStandardRef="NIST 800-53"/>
            <standard ref="Verification for Password-Protected Accounts (b)" supportedStandardRef="ccpa"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1047 - Audit"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SI-4 System Monitoring"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-OBFUSCATE-CODE" name="Obfuscate code and use anti-tampering techniques" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Implement Code Obfuscation:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use code obfuscation tools like ProGuard or R8 for Android, and tools like iOS-obfuscator or SwiftShield for iOS.&lt;/li&gt;
 &lt;li&gt;Apply obfuscation to rename classes, methods, and variables to non-meaningful names.&lt;/li&gt;
 &lt;li&gt;Enable string encryption to hide sensitive strings within the codebase.&lt;/li&gt;
 &lt;li&gt;Use control flow obfuscation to make the logic of the application harder to understand and follow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Integrate Anti-Tampering Libraries:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Utilize anti-tampering libraries and frameworks that detect modifications to the application binary.&lt;/li&gt;
 &lt;li&gt;For Android, integrate tools like DexGuard or ApkProtector.&lt;/li&gt;
 &lt;li&gt;For iOS, use tools like iXGuard or self-integrated integrity checks.&lt;/li&gt;
 &lt;li&gt;Regularly update these libraries to leverage the latest security features and protections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Checksum Verification:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Calculate checksums (e.g., SHA-256) of critical application files at build time.&lt;/li&gt;
 &lt;li&gt;Verify these checksums at runtime to detect any unauthorized modifications.&lt;/li&gt;
 &lt;li&gt;Store the original checksums securely within the application and compare them against recalculated values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use Code Signing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Sign your application code with a digital certificate to ensure its authenticity and integrity.&lt;/li&gt;
 &lt;li&gt;For Android, use the &lt;strong&gt;apksigner&lt;/strong&gt; tool to sign your APK files.&lt;/li&gt;
 &lt;li&gt;For iOS, use Xcode’s code signing capabilities to sign your app with an Apple-issued certificate.&lt;/li&gt;
 &lt;li&gt;Ensure that your application checks the code signature at runtime and refuses to run if the signature is invalid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enable Runtime Integrity Checks:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement runtime integrity checks to detect if the application has been tampered with while running.&lt;/li&gt;
 &lt;li&gt;Use hash functions to verify the integrity of critical code segments and data.&lt;/li&gt;
 &lt;li&gt;Integrate with secure hardware features like Android’s SafetyNet Attestation API or iOS’s DeviceCheck API for added integrity verification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Apply Debugging and Reverse Engineering Protections:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Detect and prevent debugging attempts by checking for the presence of debuggers at runtime.&lt;/li&gt;
 &lt;li&gt;Use platform-specific APIs (e.g., &lt;strong&gt;Debug.isDebuggerConnected()&lt;/strong&gt; on Android, &lt;strong&gt;ptrace&lt;/strong&gt; on iOS) to detect debuggers.&lt;/li&gt;
 &lt;li&gt;Integrate anti-debugging techniques such as breakpoint detection and anti-disassembly tricks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Secure Boot and Root/Jailbreak Detection:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Detect if the device is rooted (Android) or jailbroken (iOS) using libraries like RootBeer for Android and DTTJailbreakDetection for iOS.&lt;/li&gt;
 &lt;li&gt;Restrict app functionality or refuse to run on rooted or jailbroken devices.&lt;/li&gt;
 &lt;li&gt;Use secure boot mechanisms provided by the OS to ensure the device starts up in a known good state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Encrypt Sensitive Assets:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Encrypt sensitive assets such as configuration files, media files, and other resources to prevent easy extraction.&lt;/li&gt;
 &lt;li&gt;Use strong encryption algorithms like AES-256 for asset encryption.&lt;/li&gt;
 &lt;li&gt;Decrypt assets only when needed at runtime, and clear decrypted data from memory as soon as it is no longer needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Monitor and Respond to Tampering Attempts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement monitoring mechanisms to detect tampering attempts in real time.&lt;/li&gt;
 &lt;li&gt;Log and report tampering incidents to a secure server for analysis and response.&lt;/li&gt;
 &lt;li&gt;Take immediate actions such as disabling the app, alerting the user, or locking the account if tampering is detected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conduct Regular Security Audits and Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform regular security audits and code reviews to identify potential weaknesses in your obfuscation and anti-tampering implementations.&lt;/li&gt;
 &lt;li&gt;Use penetration testing and ethical hacking to test the robustness of your protections.&lt;/li&gt;
 &lt;li&gt;Stay updated with the latest security threats and best practices to continually improve your defenses.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can effectively obfuscate your code and implement robust anti-tampering techniques in your mobile banking application, enhancing its security against reverse engineering and unauthorized modifications.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Mobile Top 10 - M10: Extraneous Functionality" url="https://owasp.org/www-project-mobile-top-10/2016-risks/m10-extraneous-functionality"/>
          </references>
          <standards>
            <standard ref="507" supportedStandardRef="cwe-standard"/>
            <standard ref="838-636" supportedStandardRef="OpenCRE"/>
            <standard ref="V10.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1054 - Software Configuration"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V10.2.3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-USER-FRIENDLY" name="Provide user-friendly security features" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Enable Biometric Authentication:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Integrate biometric authentication (e.g., fingerprint, facial recognition) to enhance security and convenience.&lt;/li&gt;
 &lt;li&gt;Use platform-specific APIs, such as Android’s BiometricPrompt and iOS’s Face ID/Touch ID, for seamless integration.&lt;/li&gt;
 &lt;li&gt;Allow users to enable or disable biometric authentication through app settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Multi-Factor Authentication (MFA):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Offer MFA options, including SMS-based codes, email-based codes, or authenticator apps like Google Authenticator or Authy.&lt;/li&gt;
 &lt;li&gt;Provide clear instructions for setting up MFA and make the process simple and intuitive.&lt;/li&gt;
 &lt;li&gt;Allow users to manage their MFA settings and recovery options within the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Provide Secure Account Recovery Options:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement secure account recovery processes, such as password reset via email or SMS.&lt;/li&gt;
 &lt;li&gt;Use security questions and two-step verification to enhance the account recovery process.&lt;/li&gt;
 &lt;li&gt;Offer users the ability to update and manage their recovery information easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Offer Transparent Privacy Controls:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Provide users with clear options to manage their privacy settings, such as data sharing preferences and communication preferences.&lt;/li&gt;
 &lt;li&gt;Include detailed explanations of what each privacy setting does and how it impacts their data.&lt;/li&gt;
 &lt;li&gt;Allow users to easily access and review your privacy policy within the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Enable Real-Time Transaction Alerts:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Send real-time notifications for all transactions, including deposits, withdrawals, and transfers.&lt;/li&gt;
 &lt;li&gt;Allow users to customize their notification preferences, such as receiving alerts via push notifications, SMS, or email.&lt;/li&gt;
 &lt;li&gt;Provide detailed information in the alerts, such as transaction amount, time, and location.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Easy-to-Use Security Settings:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Design the security settings menu to be intuitive and user-friendly.&lt;/li&gt;
 &lt;li&gt;Provide options for users to update their passwords, enable or disable biometric authentication, and manage MFA.&lt;/li&gt;
 &lt;li&gt;Include tooltips and help sections to guide users through security features and settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Facilitate Secure Communication Channels:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Offer secure in-app messaging for users to contact customer support.&lt;/li&gt;
 &lt;li&gt;Ensure all communication is encrypted using strong encryption protocols like TLS.&lt;/li&gt;
 &lt;li&gt;Provide users with clear instructions on how to contact support securely and avoid phishing attempts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Promote Regular Security Checkups:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Encourage users to perform regular security checkups, such as reviewing their account activity and updating their passwords.&lt;/li&gt;
 &lt;li&gt;Offer an in-app security checkup feature that guides users through verifying their security settings and account activity.&lt;/li&gt;
 &lt;li&gt;Provide periodic reminders and tips on maintaining good security hygiene.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Simplify Access Management:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Allow users to view and manage devices that have accessed their account.&lt;/li&gt;
 &lt;li&gt;Provide options to remotely log out from specific devices or all devices at once.&lt;/li&gt;
 &lt;li&gt;Notify users of any new device login and allow them to verify or deny access.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Users on Security Best Practices:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Include educational content within the app on topics such as creating strong passwords, recognizing phishing attempts, and enabling MFA.&lt;/li&gt;
 &lt;li&gt;Use in-app messages, tips, and tutorials to provide ongoing education on security best practices.&lt;/li&gt;
 &lt;li&gt;Offer a dedicated security section within the app for users to learn more about how to protect their accounts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can provide user-friendly security features that enhance the overall security of your mobile banking application while maintaining a positive user experience.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Mobile Application Security" url="https://owasp.org/www-project-mobile-app-security/"/>
          </references>
          <standards>
            <standard ref="208-355" supportedStandardRef="OpenCRE"/>
            <standard ref="Docker Security Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="V14.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1017 - User Training"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V14.1.4"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-APP-PATCHING" name="Regularly update and patch the application" issueId="" issueLink="" platform="" cost="1" risk="54" state="Required" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Establish a Regular Update Schedule:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Set a fixed schedule for releasing updates and patches, such as monthly or quarterly.&lt;/li&gt;
 &lt;li&gt;Ensure that critical security updates are prioritized and released immediately upon discovery of vulnerabilities.&lt;/li&gt;
 &lt;li&gt;Communicate the update schedule to users, so they know when to expect new releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Monitor for Security Vulnerabilities:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Subscribe to security advisories and vulnerability databases (e.g., CVE, NVD) to stay informed about new threats.&lt;/li&gt;
 &lt;li&gt;Use automated tools like dependency checkers (e.g., OWASP Dependency-Check, Snyk) to monitor libraries and frameworks for known vulnerabilities.&lt;/li&gt;
 &lt;li&gt;Regularly audit your codebase and third-party dependencies for potential security issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement an Efficient Patch Management Process:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Create a streamlined process for developing, testing, and deploying patches.&lt;/li&gt;
 &lt;li&gt;Use version control systems (e.g., Git) to manage code changes and track patches.&lt;/li&gt;
 &lt;li&gt;Conduct thorough testing in a staging environment before rolling out updates to production.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Automate the Update Deployment:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use continuous integration and continuous deployment (CI/CD) pipelines to automate the build and deployment process.&lt;/li&gt;
 &lt;li&gt;Implement tools like Jenkins, GitHub Actions, or GitLab CI/CD to manage the update lifecycle.&lt;/li&gt;
 &lt;li&gt;Ensure automated tests are run for each build to detect any issues early in the update process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Notify Users of Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement in-app notifications to inform users about new updates and patches.&lt;/li&gt;
 &lt;li&gt;Provide detailed release notes outlining the changes, improvements, and security fixes included in each update.&lt;/li&gt;
 &lt;li&gt;Encourage users to enable automatic updates if the platform supports it (e.g., via app store settings).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Facilitate Seamless Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Design the update mechanism to be as seamless and non-intrusive as possible, minimizing disruption to users.&lt;/li&gt;
 &lt;li&gt;Use background update processes where possible to download and install updates without requiring user intervention.&lt;/li&gt;
 &lt;li&gt;Ensure the app gracefully handles version mismatches and provides clear instructions if user action is needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Rollback Mechanisms:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Develop rollback procedures to quickly revert to a previous version in case of issues with the new update.&lt;/li&gt;
 &lt;li&gt;Maintain backup copies of previous versions and their respective data schemas.&lt;/li&gt;
 &lt;li&gt;Test rollback processes regularly to ensure they can be executed smoothly if needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Track Update Adoption Metrics:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Monitor the adoption rate of updates using analytics tools.&lt;/li&gt;
 &lt;li&gt;Identify and address any barriers that may prevent users from updating (e.g., device compatibility issues, user feedback).&lt;/li&gt;
 &lt;li&gt;Provide support and troubleshooting for users who experience issues during or after the update process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Users on the Importance of Updates:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Include educational content within the app to explain the importance of regular updates and security patches.&lt;/li&gt;
 &lt;li&gt;Use in-app messages, notifications, and help sections to reinforce the need for keeping the app up to date.&lt;/li&gt;
 &lt;li&gt;Provide easy-to-follow instructions for enabling automatic updates on their devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Collaborate with Security Researchers:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Establish a vulnerability disclosure program to encourage security researchers to report vulnerabilities responsibly.&lt;/li&gt;
 &lt;li&gt;Offer bug bounties or other incentives for reporting security issues.&lt;/li&gt;
 &lt;li&gt;Acknowledge and address reported vulnerabilities promptly, providing updates and patches as needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can ensure that your mobile banking application remains secure and up-to-date, minimizing the risk of vulnerabilities and enhancing overall user trust and satisfaction.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="NIST Special Publication 800-40 - Guide to Enterprise Patch Management Technologies" url="https://csrc.nist.gov/pubs/sp/800/40/r3/final"/>
          </references>
          <standards>
            <standard ref="1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="124-564" supportedStandardRef="OpenCRE"/>
            <standard ref="2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="A3.2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="A3.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="CM-1 Policy and Procedures" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-10 Software Usage Restrictions" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-11 User-installed Software" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-12 Information Location" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-13 Data Action Mapping" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-14 Signed Components" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-3 Configuration Change Control" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-4 Impact Analyses" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-5 Access Restrictions for Change" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-7 Least Functionality" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-8 System Component Inventory" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-9 Configuration Management Plan" supportedStandardRef="NIST 800-53"/>
            <standard ref="Configuration management" supportedStandardRef="iso-27002-2022"/>
            <standard ref="DE.CM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-1: The network is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3: Personnel activity is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7: Monitoring for unauthorized personnel, connections, devices, and software is performed" supportedStandardRef="nist-csf"/>
            <standard ref="Driver Load Integrity Checking" supportedStandardRef="D3FEND"/>
            <standard ref="Executable Allowlisting" supportedStandardRef="D3FEND"/>
            <standard ref="Executable Denylisting" supportedStandardRef="D3FEND"/>
            <standard ref="GV.OC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OV-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.SC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="ID.AM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-07" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-08" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-1: Physical devices and systems within the organization are inventoried" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-2: Software platforms and applications within the organization are inventoried" supportedStandardRef="nist-csf"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.RA-07" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Local Account Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Mandatory Access Control" supportedStandardRef="D3FEND"/>
            <standard ref="Message Authentication" supportedStandardRef="D3FEND"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.DS-3: Assets are formally managed throughout removal, transfers, and disposition" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1: A baseline configuration of information technology/industrial control systems is created and maintained incorporating security principles (e.g. concept of least functionality)" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-3: Configuration change control processes are in place" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PT-3: The principle of least functionality is incorporated by configuring systems to provide only essential capabilities" supportedStandardRef="nist-csf"/>
            <standard ref="Requests to Limit Use and Disclosure of Sensitive Personal Information (m)(8)" supportedStandardRef="ccpa"/>
            <standard ref="System Configuration Permissions" supportedStandardRef="D3FEND"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1051 - Update Software"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="CM-11 User-installed Software"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-MOBILE-BANKING-APPLICATION-RESTRICT-FEATURES" name="Restrict access to sensitive features" issueId="" issueLink="" platform="" cost="2" risk="47" state="Required" owner="cdalrymple@iriusrisk.com" library="financial-services-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;&lt;strong&gt;Implement Role-Based Access Control (RBAC):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Define different user roles (e.g., regular user, admin, manager) and their corresponding permissions.&lt;/li&gt;
 &lt;li&gt;Use an RBAC framework to assign and enforce these roles and permissions within the application.&lt;/li&gt;
 &lt;li&gt;Ensure only authorized roles have access to sensitive features such as financial transactions, user data management, and account settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Require Multi-Factor Authentication (MFA) for Sensitive Actions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Enforce MFA for accessing sensitive features, adding an extra layer of security.&lt;/li&gt;
 &lt;li&gt;Use SMS-based codes, email-based codes, or authenticator apps for the second factor of authentication.&lt;/li&gt;
 &lt;li&gt;Prompt for MFA re-authentication periodically or after a session timeout for continued access to sensitive features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Use Feature Flags for Sensitive Features:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Implement feature flags to control access to sensitive features.&lt;/li&gt;
 &lt;li&gt;Enable or disable features dynamically without deploying new code, based on user roles or other criteria.&lt;/li&gt;
 &lt;li&gt;Use feature flag management tools like LaunchDarkly or Firebase Remote Config for fine-grained control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Access Tokens and API Gateways:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use access tokens (e.g., JWTs) to control access to backend APIs that handle sensitive features.&lt;/li&gt;
 &lt;li&gt;Validate tokens on the server side to ensure they are still valid and have the necessary permissions.&lt;/li&gt;
 &lt;li&gt;Employ API gateways to manage, monitor, and restrict access to APIs based on user roles and permissions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Perform Access Audits and Logging:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Log access to sensitive features and actions taken by users, including timestamps, IP addresses, and user IDs.&lt;/li&gt;
 &lt;li&gt;Regularly audit these logs to detect unauthorized access or suspicious activities.&lt;/li&gt;
 &lt;li&gt;Implement alerting mechanisms to notify administrators of potential access violations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Provide Granular Permission Settings:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Allow administrators to configure and manage permissions at a granular level.&lt;/li&gt;
 &lt;li&gt;Enable role customization so that permissions can be tailored to specific organizational needs.&lt;/li&gt;
 &lt;li&gt;Provide a user-friendly interface for administrators to assign and revoke permissions easily.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Implement Context-Aware Access Controls:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Use context-aware access controls that consider factors like user location, device, and behavior.&lt;/li&gt;
 &lt;li&gt;Restrict access to sensitive features if anomalies are detected, such as logins from unusual locations or unrecognized devices.&lt;/li&gt;
 &lt;li&gt;Integrate with behavioral analytics tools to enhance context-aware access controls.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Secure Access to Administrative Interfaces:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Restrict access to administrative interfaces to trusted networks or specific IP ranges.&lt;/li&gt;
 &lt;li&gt;Require MFA for accessing administrative dashboards and management tools.&lt;/li&gt;
 &lt;li&gt;Regularly review and update access policies to ensure only authorized personnel have access to administrative features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Educate Users and Administrators:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Provide training on the importance of access control and the correct use of sensitive features.&lt;/li&gt;
 &lt;li&gt;Inform users about the potential risks associated with improper access and how to avoid them.&lt;/li&gt;
 &lt;li&gt;Offer clear documentation on how to manage access controls and configure permissions securely.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Conduct Regular Security Reviews and Testing:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Perform regular security reviews and penetration testing focused on access control mechanisms.&lt;/li&gt;
 &lt;li&gt;Identify and remediate vulnerabilities related to access controls and sensitive features.&lt;/li&gt;
 &lt;li&gt;Update access control policies and procedures based on the findings of security reviews and emerging threats.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these steps, you can effectively restrict access to sensitive features in your mobile banking application, ensuring that only authorized users can perform high-risk actions and access critical data.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP - Access Control" url="https://owasp.org/www-community/Access_Control"/>
            <reference name="OWASP Cheat Sheet Series" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.10.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="124-564" supportedStandardRef="OpenCRE"/>
            <standard ref="2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="A3.2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="A3.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="CM-1 Policy and Procedures" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-10 Software Usage Restrictions" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-11 User-installed Software" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-12 Information Location" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-13 Data Action Mapping" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-14 Signed Components" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-3 Configuration Change Control" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-4 Impact Analyses" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-5 Access Restrictions for Change" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-7 Least Functionality" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-8 System Component Inventory" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-9 Configuration Management Plan" supportedStandardRef="NIST 800-53"/>
            <standard ref="Configuration management" supportedStandardRef="iso-27002-2022"/>
            <standard ref="DE.CM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-1: The network is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3: Personnel activity is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7: Monitoring for unauthorized personnel, connections, devices, and software is performed" supportedStandardRef="nist-csf"/>
            <standard ref="Driver Load Integrity Checking" supportedStandardRef="D3FEND"/>
            <standard ref="Executable Allowlisting" supportedStandardRef="D3FEND"/>
            <standard ref="Executable Denylisting" supportedStandardRef="D3FEND"/>
            <standard ref="GV.OC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OV-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.SC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="ID.AM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-07" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-08" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-1: Physical devices and systems within the organization are inventoried" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-2: Software platforms and applications within the organization are inventoried" supportedStandardRef="nist-csf"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.RA-07" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Local Account Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Mandatory Access Control" supportedStandardRef="D3FEND"/>
            <standard ref="Message Authentication" supportedStandardRef="D3FEND"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.DS-3: Assets are formally managed throughout removal, transfers, and disposition" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1: A baseline configuration of information technology/industrial control systems is created and maintained incorporating security principles (e.g. concept of least functionality)" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-3: Configuration change control processes are in place" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PT-3: The principle of least functionality is incorporated by configuring systems to provide only essential capabilities" supportedStandardRef="nist-csf"/>
            <standard ref="Requests to Limit Use and Disclosure of Sensitive Personal Information (m)(8)" supportedStandardRef="ccpa"/>
            <standard ref="System Configuration Permissions" supportedStandardRef="D3FEND"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1018 - User Account Management"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="CM-5 Access Restrictions for Change"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.202">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="UC-STRIDE-ELEVATION-OF-PRIVILEGE" name="Elevation of Privilege" desc="Elevation of privilege involves an attacker gaining higher levels of access or permissions than intended. By exploiting vulnerabilities, attackers can escalate their privileges within a system to perform unauthorized actions or access sensitive data." library="financial-services-components">
          <threats>
            <threat ref="T-MOBILE-BANKING-APPLICATION-EXPLOIT-VULN" name="An attacker can exploit vulnerabilities in the mobile banking application" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="financial-services-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exploiting vulnerabilities in a mobile banking application involves an attacker identifying and using security flaws within the app to gain unauthorized access, execute malicious code, or steal sensitive information. These vulnerabilities may include improper input validation, insecure data storage, weak authentication mechanisms, or outdated libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat agents:&lt;/strong&gt; Cybercriminals, hackers, malicious insiders, and opportunistic attackers.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack vectors:&lt;/strong&gt;
  &lt;ul&gt;
   &lt;li&gt;Exploiting insecure storage to retrieve sensitive data.&lt;/li&gt;
   &lt;li&gt;Leveraging weak authentication to gain unauthorized access.&lt;/li&gt;
   &lt;li&gt;Using Man-in-the-Middle (MitM) attacks to intercept data.&lt;/li&gt;
   &lt;li&gt;Exploiting zero-click vulnerabilities to compromise devices without user interaction.&lt;/li&gt;
   &lt;li&gt;Reverse engineering the app to discover vulnerabilities.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Unauthorized access to user accounts and sensitive financial data.&lt;/li&gt;
 &lt;li&gt;Financial loss due to fraudulent transactions.&lt;/li&gt;
 &lt;li&gt;Loss of customer trust and reputational damage to the financial institution.&lt;/li&gt;
 &lt;li&gt;Potential legal and regulatory consequences.&lt;/li&gt;
 &lt;li&gt;Compromise of user privacy and potential identity theft.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 1: Insecure Data Storage&lt;/strong&gt; An attacker uses a compromised device to access the mobile banking app’s local storage, which contains sensitive data like user credentials and financial information stored in plaintext. The attacker retrieves and uses this data to gain unauthorized access to user accounts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 2: Weak Authentication&lt;/strong&gt; An attacker exploits weak authentication mechanisms by using a brute force attack to guess user passwords. Once successful, the attacker gains access to user accounts, allowing them to perform unauthorized transactions and steal sensitive information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 3: Man-in-the-Middle Attack&lt;/strong&gt; An attacker intercepts the communication between the mobile banking app and the backend servers through a public Wi-Fi network. The attacker captures sensitive information such as login credentials and session tokens, which are then used to hijack user sessions and perform fraudulent activities.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-250">
                  <countermeasures>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-APP-PATCHING" mitigation="50"/>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-SECURE-CODING" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-APP-PATCHING" mitigation="50"/>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-SECURE-CODING" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1190 - Exploit Public-Facing Application"/>
                <customField ref="SF-T-STRIDE-LM" value="Elevation of Privilege"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-INFORMATION-DISCLOSURE" name="Information Disclosure" desc="Information disclosure occurs when sensitive data is exposed to unauthorized parties. This can include unauthorized access to confidential information, such as personal data, financial records, or intellectual property." library="financial-services-components">
          <threats>
            <threat ref="T-MOBILE-BANKING-APPLICATION-STEAL-CREDENTIALS" name="An attacker can intercept and steal user credentials" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="financial-services-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Credential interception involves an attacker capturing user credentials, such as usernames and passwords, during the authentication process. This can occur through various methods like Man-in-the-Middle (MitM) attacks, exploiting unsecured network connections, or leveraging malware to eavesdrop on user input.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat agents:&lt;/strong&gt; Cybercriminals, hackers, malicious insiders, and opportunistic attackers.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack vectors:&lt;/strong&gt;
  &lt;ul&gt;
   &lt;li&gt;Performing MitM attacks over unsecured or public Wi-Fi networks.&lt;/li&gt;
   &lt;li&gt;Exploiting weaknesses in SSL/TLS implementation.&lt;/li&gt;
   &lt;li&gt;Using phishing techniques to trick users into revealing their credentials.&lt;/li&gt;
   &lt;li&gt;Deploying malware or keyloggers on the user's device to capture input data.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Unauthorized access to user accounts and financial information.&lt;/li&gt;
 &lt;li&gt;Financial loss due to fraudulent transactions.&lt;/li&gt;
 &lt;li&gt;Compromise of user privacy and potential identity theft.&lt;/li&gt;
 &lt;li&gt;Loss of customer trust in the financial institution and its mobile banking app.&lt;/li&gt;
 &lt;li&gt;Potential legal and regulatory consequences for the financial institution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 1: Man-in-the-Middle Attack&lt;/strong&gt; An attacker sets up a rogue Wi-Fi hotspot in a public area. When users connect to this hotspot and access their mobile banking app, the attacker intercepts the traffic, capturing login credentials transmitted in cleartext or through poorly secured channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 2: Phishing Attack&lt;/strong&gt; An attacker sends a phishing email with a link to a fake mobile banking login page. Users enter their credentials on this page, which are then sent directly to the attacker. The attacker uses these credentials to access the users' banking accounts and perform unauthorized transactions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 3: Keylogger Malware&lt;/strong&gt; An attacker infects a user's device with keylogger malware. As the user types their credentials into the mobile banking app, the malware records the keystrokes and sends the captured information to the attacker, who then uses it to access the user's banking account.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-AUTHENTICATION" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-319">
                  <countermeasures>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-ENCRYPTION" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-AUTHENTICATION" mitigation="50"/>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-ENCRYPTION" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1110 - Brute Force"/>
                <customField ref="SF-T-STRIDE-LM" value="Information Disclosure"/>
              </customFields>
            </threat>
            <threat ref="T-MOBILE-BANKING-APPLICATION-SENSITIVE-DATA" name="An attacker can gain unauthorized access to the user's device and sensitive data" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="financial-services-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unauthorized access to a user's device and sensitive data involves an attacker leveraging vulnerabilities within the device or the mobile banking application to gain control over the device or retrieve sensitive information. This may include exploiting weak access controls, bypassing authentication mechanisms, or using malware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat agents:&lt;/strong&gt; Cybercriminals, hackers, malware authors, and malicious insiders.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack vectors:&lt;/strong&gt;
  &lt;ul&gt;
   &lt;li&gt;Exploiting weak device security settings (e.g., lack of device encryption, weak passwords).&lt;/li&gt;
   &lt;li&gt;Utilizing malware or spyware to capture sensitive data.&lt;/li&gt;
   &lt;li&gt;Bypassing application security mechanisms to access data stored on the device.&lt;/li&gt;
   &lt;li&gt;Leveraging phishing attacks to trick users into revealing credentials or installing malicious apps.&lt;/li&gt;
   &lt;li&gt;Exploiting outdated software or unpatched vulnerabilities.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Compromise of sensitive personal and financial information.&lt;/li&gt;
 &lt;li&gt;Unauthorized transactions and financial loss.&lt;/li&gt;
 &lt;li&gt;Potential identity theft and privacy breaches.&lt;/li&gt;
 &lt;li&gt;Loss of trust in the financial institution and its mobile banking app.&lt;/li&gt;
 &lt;li&gt;Legal and regulatory repercussions for failing to protect user data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 1: Malware Infection&lt;/strong&gt; An attacker distributes a malicious application disguised as a legitimate tool. When a user installs the app, it gains access to the device's storage and retrieves sensitive data, including saved passwords and financial information. The attacker uses this data to perform unauthorized transactions and steal funds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 2: Phishing Attack&lt;/strong&gt; An attacker sends a phishing email to users, prompting them to click on a link that leads to a fake login page resembling the mobile banking app. Users enter their credentials, which are captured by the attacker. Using these credentials, the attacker gains access to the user’s account and sensitive data, leading to financial fraud.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 3: Exploiting Unpatched Vulnerabilities&lt;/strong&gt; An attacker exploits a known vulnerability in an outdated version of the mobile banking app. By bypassing the app's security mechanisms, the attacker gains access to the device's file system, retrieving stored credentials and sensitive information.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-RESTRICT-FEATURES" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-RESTRICT-FEATURES" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1562 - Impair Defenses"/>
                <customField ref="SF-T-STRIDE-LM" value="Information Disclosure"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-TAMPERING" name="Tampering" desc="Tampering refers to unauthorized modification of data or systems. Attackers may alter data in transit or modify software components to introduce vulnerabilities or compromise the integrity of the system." library="financial-services-components">
          <threats>
            <threat ref="T-MOBILE-BANKING-APPLICATION-REV-ENGINEERING" name="An attacker can perform reverse engineering" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="financial-services-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Reverse engineering involves an attacker analyzing the mobile banking application to understand its inner workings. This includes decompiling the code to uncover application logic, extracting sensitive information, identifying security vulnerabilities, and creating exploits. Attackers can use reverse engineering to modify the app, bypass security measures, or develop malicious versions of the app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat agents:&lt;/strong&gt; Cybercriminals, hackers, malware developers, and competitors.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack vectors:&lt;/strong&gt;
  &lt;ul&gt;
   &lt;li&gt;Decompiling the mobile app to access source code.&lt;/li&gt;
   &lt;li&gt;Analyzing binary code to understand application logic and algorithms.&lt;/li&gt;
   &lt;li&gt;Extracting embedded sensitive information such as API keys and cryptographic keys.&lt;/li&gt;
   &lt;li&gt;Identifying vulnerabilities or weaknesses in the app’s code.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Exposure of proprietary algorithms and intellectual property.&lt;/li&gt;
 &lt;li&gt;Increased risk of security vulnerabilities being exploited.&lt;/li&gt;
 &lt;li&gt;Unauthorized access to backend systems and user data.&lt;/li&gt;
 &lt;li&gt;Creation of malicious versions of the app that can be distributed to users.&lt;/li&gt;
 &lt;li&gt;Loss of customer trust and reputational damage.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 1: Code Decompilation&lt;/strong&gt; An attacker decompiles the mobile banking app using tools like ApkTool or JADX. By analyzing the decompiled code, the attacker identifies hardcoded API keys and sensitive business logic. The attacker uses this information to exploit backend services and gain unauthorized access.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 2: Vulnerability Identification&lt;/strong&gt; An attacker performs a detailed analysis of the app’s binary code to identify vulnerabilities. The attacker discovers a buffer overflow vulnerability in the authentication module. By crafting a specific input, the attacker exploits this vulnerability to gain access to user accounts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 3: Creation of Malicious Apps&lt;/strong&gt; An attacker reverse engineers the mobile banking app to understand its communication protocols and security mechanisms. The attacker creates a modified version of the app with embedded malware and distributes it through unofficial app stores. Unsuspecting users install the malicious app, leading to data theft and unauthorized transactions.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-656">
                  <countermeasures>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-OBFUSCATE-CODE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-OBFUSCATE-CODE" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1059 - Command and Scripting Interpreter"/>
                <customField ref="SF-T-STRIDE-LM" value="Tampering"/>
              </customFields>
            </threat>
            <threat ref="T-MOBILE-BANKING-APPLICATION-MANIPULATE-DATA" name="An attacker can perform unauthorized transactions or manipulate financial data" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="financial-services-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unauthorized transactions and financial data manipulation occur when an attacker gains access to a user’s banking account or the banking system itself and performs transactions without the user’s consent. The attacker may also alter financial data to benefit themselves or disrupt the financial system. This can be achieved through various means, including credential theft, exploiting application vulnerabilities, or intercepting communication between the app and backend servers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat agents:&lt;/strong&gt; Cybercriminals, hackers, malicious insiders, and competitors.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack vectors:&lt;/strong&gt;
  &lt;ul&gt;
   &lt;li&gt;Credential theft through phishing, keylogging, or malware.&lt;/li&gt;
   &lt;li&gt;Exploiting application vulnerabilities such as insecure APIs, improper session management, or insufficient input validation.&lt;/li&gt;
   &lt;li&gt;Intercepting and altering data in transit using Man-in-the-Middle (MitM) attacks.&lt;/li&gt;
   &lt;li&gt;Gaining unauthorized access to backend systems through weak authentication or access control mechanisms.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Financial loss for users and financial institutions due to unauthorized transactions.&lt;/li&gt;
 &lt;li&gt;Compromise of user trust and reputational damage to the financial institution.&lt;/li&gt;
 &lt;li&gt;Regulatory and legal consequences for failing to protect user data and transactions.&lt;/li&gt;
 &lt;li&gt;Potential disruption of financial services and economic impact.&lt;/li&gt;
 &lt;li&gt;Privacy breaches and potential identity theft.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 1: Credential Theft&lt;/strong&gt; An attacker sends a phishing email that directs users to a fake mobile banking login page. Users enter their credentials, which are captured by the attacker. The attacker then uses these credentials to log in to the users’ accounts and initiate unauthorized transactions, transferring funds to their own accounts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 2: Exploiting Application Vulnerabilities&lt;/strong&gt; An attacker discovers a vulnerability in the mobile banking app’s API that allows for the bypassing of transaction authorization checks. The attacker exploits this vulnerability to initiate transactions without user consent, manipulating financial data to transfer money to their accounts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scenario 3: Man-in-the-Middle Attack&lt;/strong&gt; An attacker sets up a rogue Wi-Fi access point in a public area. When users connect to this network and use their mobile banking app, the attacker intercepts and alters the transaction data in real-time. The attacker changes the transaction details to redirect funds to their own accounts without the user’s knowledge.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-693">
                  <countermeasures>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-MONITORING" mitigation="50"/>
                    <countermeasure ref="C-MOBILE-BANKING-APPLICATION-USER-FRIENDLY" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-MONITORING" mitigation="50"/>
                <countermeasure ref="C-MOBILE-BANKING-APPLICATION-USER-FRIENDLY" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1222 - File and Directory Permissions Modification"/>
                <customField ref="SF-T-STRIDE-LM" value="Tampering"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="4ea0b696-009f-48dc-8138-bf4eb9d539e6" diagramComponentId="651276e3-e70c-4f2a-b9bb-6a601977b8f6" ref="14de3ca2-c357-46da-85ba-780676f7999f" name="Mobile Wallet Interface" desc="" library="" parentComponentRef="b55017fd-ce3a-49a2-b00c-cd76e41d68d8" componentDefinitionRef="">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="application-trust-zone-(high-trust)"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="2cdfabe3-a047-4697-a702-a14624fd9ee9" diagramComponentId="a83e6bd6-b15a-44a7-b7b1-21e07fcb6923" ref="6253e204-d1b4-4b3f-997f-9a611f7c564c" name="Multi-signature Orchestration Service" desc="" library="" parentComponentRef="" componentDefinitionRef="">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="static-content"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="secure-multi-signature-implementation" name="Secure Multi-signature Implementation" issueId="" issueLink="" platform="" cost="2" risk="61" state="Required" owner="cdalrymple@iriusrisk.com" library="" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Configure Signature Requirements:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement dynamic signature thresholds:&lt;ul&gt;&lt;li&gt;Standard transactions: 2-of-3 signatures&lt;/li&gt;&lt;li&gt;High-value transactions: 3-of-5 signatures&lt;/li&gt;&lt;li&gt;Critical operations: 4-of-7 signatures&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set up geographic distribution requirement:&lt;ul&gt;&lt;li&gt;Minimum 2 different continents&lt;/li&gt;&lt;li&gt;Maximum 2 signatures per region&lt;/li&gt;&lt;li&gt;Minimum 2 different organizations&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Implement Time-Based Controls:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Configure mandatory delays:&lt;ul&gt;&lt;li&gt;1 hour for standard transactions&lt;/li&gt;&lt;li&gt;12 hours for high-value transactions&lt;/li&gt;&lt;li&gt;24 hours for whitelist changes&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set up time-window requirements:&lt;ul&gt;&lt;li&gt;Maximum 4-hour signing window&lt;/li&gt;&lt;li&gt;Minimum 30-minute gap between signatures&lt;/li&gt;&lt;li&gt;Automatic expiration of pending requests&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Enable Quorum Monitoring:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Track signer availability:&lt;ul&gt;&lt;li&gt;Monitor signer health status&lt;/li&gt;&lt;li&gt;Track response times&lt;/li&gt;&lt;li&gt;Alert on signer unavailability&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Implement backup procedures:&lt;ul&gt;&lt;li&gt;Configure backup signer sets&lt;/li&gt;&lt;li&gt;Enable emergency override procedures&lt;/li&gt;&lt;li&gt;Set up disaster recovery process&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.866">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="multi-signature-orchestration-service-use-case" name="Multi-signature Orchestration Service Use Case" desc="" library="">
          <threats>
            <threat ref="signature-coordination-attack" name="Signature Coordination Attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;: Attackers manipulate the multi-signature coordination process to bypass required approvals. The Ronin Bridge hack ($624M loss) occurred due to compromised validator nodes.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;: Nation-state actors, sophisticated attackers targeting validator infrastructure.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;: Bypass of multi-signature requirements, unauthorized transactions, complete security control failure.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;: The March 2024 incident where attackers manipulated timestamp validation in a multi-sig wallet to process transactions without all required signatures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="secure-multi-signature-implementation" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value="Tampering||Repudiation"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="9d2c889a-becd-437d-9494-bfc8cb0245df" diagramComponentId="87a03b11-b4a8-4512-943d-e21c3cabd772" ref="e38829d8-0c2a-4f4c-911f-b9d174453f44" name="Notification Service" desc="" library="" parentComponentRef="" componentDefinitionRef="">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="static-content"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="secure-notification-implementation" name="Secure Notification Implementation" issueId="" issueLink="" platform="" cost="2" risk="61" state="Recommended" owner="cdalrymple@iriusrisk.com" library="" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Configure Multi-Channel Notifications:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Implement primary channels:&lt;ul&gt;&lt;li&gt;Push notifications (app-based)&lt;/li&gt;&lt;li&gt;Email notifications (encrypted)&lt;/li&gt;&lt;li&gt;SMS alerts (for critical events)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Set up backup channels:&lt;ul&gt;&lt;li&gt;Secondary email contacts&lt;/li&gt;&lt;li&gt;Hardware security keys&lt;/li&gt;&lt;li&gt;Authorized representative contact&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Enable Notification Security:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Configure security measures:&lt;ul&gt;&lt;li&gt;End-to-end encryption for all notifications&lt;/li&gt;&lt;li&gt;Unique device signatures&lt;/li&gt;&lt;li&gt;Anti-tampering mechanisms&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Implement verification:&lt;ul&gt;&lt;li&gt;Receipt confirmation tracking&lt;/li&gt;&lt;li&gt;Delivery status monitoring&lt;/li&gt;&lt;li&gt;Channel health checking&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Set up Notification Rules:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Configure event triggers:&lt;ul&gt;&lt;li&gt;Login attempts (successful/failed)&lt;/li&gt;&lt;li&gt;Withdrawal initiation/completion&lt;/li&gt;&lt;li&gt;Security setting changes&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Implement escalation:&lt;ul&gt;&lt;li&gt;Automatic channel failover&lt;/li&gt;&lt;li&gt;Manual verification requirements&lt;/li&gt;&lt;li&gt;Emergency contact procedures&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references/>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:21.748">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="notification-manipulation-attack-use-case" name="Notification Manipulation Attack Use Case" desc="" library="">
          <threats>
            <threat ref="notification-manipulation-attack" name="Notification Manipulation Attack" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General threat description&lt;/strong&gt;: Attackers intercept or manipulate transaction notifications to mask unauthorized activities. The 2023 Coinbase SMS hijacking campaign showed how notification compromise enables fraud.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Threat agents/Attack vectors&lt;/strong&gt;: SIM swapping attackers, notification service compromisers.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;: Delayed fraud detection, unauthorized transaction concealment, user trust erosion.&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;: Attackers suppress withdrawal notifications while conducting unauthorized transactions.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="secure-notification-implementation" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value="Information Disclosure||Spoofing"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="526230e9-b944-41c8-aade-e3d44eb8fdd6" diagramComponentId="4b97ef4d-759c-4bd1-9dd1-29d327df9c72" ref="c54b8d91-14d4-4a5c-8381-39c88d1fbbe2" name="Smart Contract" desc="" library="" parentComponentRef="" componentDefinitionRef="CD-SMART-CONTRACT">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="static-content"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-937" name="Components, libraries, modules, frameworks, platform, and operating systems contain known security weaknesses" state="0" impact="100" issueId="" issueLink="">
          <desc>In theory, it ought to be easy to figure out if you are currently using any vulnerable
                        components or libraries. Unfortunately, vulnerability reports for commercial or open source
                        software do not always specify exactly which versions of a component are vulnerable in a
                        standard, searchable way. Further, not all libraries use an understandable version numbering
                        system. Worst of all, not all vulnerabilities are reported to a central clearing house that is
                        easy to search, although sites like CVE and NVD are becoming easier to search.

                        Determining if you are vulnerable requires searching these databases, as well as keeping abreast
                        of project mailing lists and announcements for anything that might be a vulnerability. If one of
                        your components does have a vulnerability, you should carefully evaluate whether you are
                        actually vulnerable by checking to see if your code uses the part of the component with the
                        vulnerability and whether the flaw could result in an impact you care about.

                        Component vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial
                        to sophisticated malware designed to target a specific organization. Components almost always
                        run with the full privilege of the application, so flaws in any component can be serious.
                    </desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.265">
              <output/>
            </source>
            <references>
              <reference name="CWE-937: Components, libraries, modules, frameworks, platform, and operating systems contain known security weaknesses" url="https://cwe.mitre.org/data/definitions/937.html"/>
            </references>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-SMART-CONT-INPUT-VALIDATION" name="Insufficient smart contract input validation" state="0" impact="100" issueId="" issueLink="">
          <desc>Insufficient input validation occurs where a smart contract fails to adequately validate user inputs or control access to its functions. Without proper validation using require(), assert(), and revert() statements, the contract is vulnerable to unauthorized actions, potentially resulting in incorrect state changes or exploitation of vulnerabilities in the contract's logic.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-CODE-SIMPLICITY" name="Lack of Code Simplicity Measures" state="0" impact="100" issueId="" issueLink="">
          <desc>Lack of code simplicity measures occurs when a smart contract's code is not intentionally simplified. Failing to reduce code complexity may result in a higher probability of introducing errors or vulnerabilities. This weakness emphasizes the importance of strategies to simplify the codebase, such as leveraging established libraries and breaking down functionality into small, focused functions.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-GOVERNANCE-SYSTEM-MEASURES" name="Lack of Governance System Security Measures" state="0" impact="100" issueId="" issueLink="">
          <desc>Lack of governance system security measures occurs when the smart contract's governance mechanisms are not designed with security in mind. Inadequate measures could expose the system to vulnerabilities, such as rapid accumulation of voting power or manipulation of governance decisions, jeopardizing the decentralized control and alignment of interests between developers and users.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-272" name="Least Privilege Violation" state="0" impact="100" issueId="" issueLink="">
          <desc>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="W-LACK-OF-BACKUPS" name="There is not a recover or backup mechanism" state="0" impact="100" issueId="" issueLink="">
          <desc>There are not any processes or mechanisms to regularly save the data to another place in order to have an older version of the data to restore in case of loss. Consequently the data cannot be easily recovered or they cannot be recovered at all.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.265">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-SMART-CONTRACT1" name="Design proper access controls for Smart Contract" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Design proper access controls for Smart Contract&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;To bolster the security of smart contracts, it's crucial to establish robust access controls. In the absence of adequate access controls, unauthorized entities can carry out sensitive operations, potentially exposing significant vulnerabilities. This approach provides an overview of several access control strategies, such as the Ownable pattern, role-based access control, and multi-signature wallets, to deter unauthorized utilization of smart contract functionalities.&lt;/p&gt;&lt;p&gt;Remediation:&lt;br&gt;1. Ownable Pattern&lt;/p&gt;&lt;p&gt;- During contract creation, designate an address as the "owner" of the contract.&lt;br&gt;- For protected functions, apply the "OnlyOwner" modifier. This modifier ensures that the contract authenticates the calling address's identity before executing the function.&lt;br&gt;- When calls to protected functions originate from addresses other than the contract owner, they should revert, denying unauthorized access.&lt;/p&gt;&lt;p&gt;2. Role-Based Access Control&lt;/p&gt;&lt;p&gt;- Distribute access to sensitive functions among a set of trusted participants, each assigned specific administrative roles. For example, one account may be responsible for minting tokens, while another handles contract upgrades or pausing.&lt;br&gt;- Implement modifiers or conditional checks within functions to ensure that only authorized roles can execute them.&lt;br&gt;- Role-based access control mitigates centralization risks associated with a single owner. Even if one account's keys are compromised, it doesn't jeopardize the entire contract.&lt;/p&gt;&lt;p&gt;3. Using Multi-Signature Wallets&lt;/p&gt;&lt;p&gt;- Utilize a multi-signature account, which requires signatures from multiple entities to execute transactions, typically a minimum number of accounts out of a predefined group.&lt;br&gt;- Configure the multi-signature wallet to require consensus from a specified number of account holders before executing actions on the target contract.&lt;br&gt;- Multi-signature wallets add an additional layer of security. This approach is particularly useful when implementing the Ownable pattern, as it complicates unauthorized manipulation of contract functions.&lt;/p&gt;&lt;p&gt;Impact:&lt;br&gt;- Multi-signature wallets and role-based access control may involve additional deployment costs.&lt;br&gt;- Designing and implementing access control mechanisms can add complexity to the contract code.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Smart contract security" url="https://ethereum.org/en/developers/docs/smart-contracts/security/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Verify that protected functions can only be executed by authorized addresses or roles.&lt;br /&gt;
2. Test scenarios where unauthorized addresses or roles attempt to access sensitive functions, ensuring that they are appropriately denied.&lt;br /&gt;
3. Test multi-signature wallets to confirm that actions require the consensus of the required number of signatories.&lt;br /&gt;
4. Conduct a security audit to identify any potential vulnerabilities or misconfigurations in the access control mechanisms.&lt;br /&gt;
5. Monitor and maintain access controls as the contract evolves, ensuring continued security against new threats or changes in requirements.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.210">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SMART-CONTRACT5" name="Design secure governance systems for Smart Contract" issueId="" issueLink="" platform="" cost="1" risk="44" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Design secure governance systems for Smart Contract&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Establishing secure governance systems within smart contracts is vital to guarantee decentralized control and align the interests of developers and users. Nevertheless, crafting these governance mechanisms requires meticulous design to minimize the vulnerabilities associated with potential attacks, particularly those stemming from concentrated voting power. This approach offers recommendations to bolster the security of on-chain governance systems, encompassing the utilization of timelocks and techniques to mitigate the risk of rapid voting power accumulation.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
1. Implement Timelocks:&lt;br /&gt;
- Introduce timelocks in the governance system to prevent immediate execution of critical actions, such as contract upgrades or parameter changes.&lt;br /&gt;
- Specify a waiting period, during which proposed actions are held in a pending state, allowing the community time to review and potentially veto them.&lt;br /&gt;
- The duration of the timelock should be carefully chosen, balancing the need for security with the necessity of timely governance decisions.&lt;/p&gt;

	&lt;p&gt;2. Apply Voting Weight Based on Lockup Duration:&lt;br /&gt;
- Assign voting weight to tokens based on the duration for which they have been locked up.&lt;br /&gt;
- Tokens that have been locked up for longer periods can have proportionally greater voting power.&lt;br /&gt;
- This approach incentivizes long-term commitment and reduces the influence of short-term token holders.&lt;/p&gt;

	&lt;p&gt;3. Use Historical Voting Power Measurements:&lt;br /&gt;
- Measure the voting power of an address based on a historical period (e.g., the voting power from 2-3 blocks in the past) rather than the current block.&lt;br /&gt;
- This method makes it harder for attackers to quickly accumulate tokens and influence on-chain votes since they would need to hold tokens consistently over time.&lt;/p&gt;

	&lt;p&gt;Impact:&lt;br /&gt;
Timelocks may introduce delays in executing critical actions, which could affect the agility of the system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Smart contract security" url="https://ethereum.org/en/developers/docs/smart-contracts/security/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Implement Timelocks. Develop and test timelock mechanisms in the governance system to ensure that proposed actions are appropriately delayed. Verify that timelock durations align with the governance needs of the system.&lt;br /&gt;
2. Apply Voting Weight Based on Lockup Duration. Create and test algorithms that assign voting weight to tokens based on their lockup duration. Verify that the voting power of tokens accurately reflects the commitment of token holders.&lt;br /&gt;
3. Use Historical Voting Power Measurements. Implement and test the historical voting power measurement method in the governance system. Ensure that historical measurements effectively mitigate the risk of rapid token accumulation for malicious purposes.&lt;br /&gt;
4. Conduct simulations or scenarios to test the governance system&amp;#8217;s responsiveness to proposed actions and the impact of timelocks on critical decisions.&lt;br /&gt;
5. Perform extensive testing, including unit tests, integration tests, and simulations, to validate the effectiveness and security of the governance mechanisms.&lt;br /&gt;
6. Consider engaging external auditors or the community for code review and governance process assessment to gain additional confidence in the security of the governance system.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.211">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SMART-CONTRACT4" name="Implement robust disaster recovery plans for Smart Contract" issueId="" issueLink="" platform="" cost="1" risk="37" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement robust disaster recovery plans for Smart Contract&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Smart contract security is paramount, but the possibility of malicious exploits cannot be entirely ruled out. Therefore, having a comprehensive disaster recovery plan is essential to respond effectively to potential attacks, vulnerabilities, or critical flaws. A well-structured recovery plan may involve contract upgrades, emergency stop mechanisms, and event monitoring to mitigate risks and protect users' assets.&lt;/p&gt;&lt;p&gt;Remediation:&lt;br&gt;1. Contract Upgrades:&lt;/p&gt;&lt;p&gt;- Employ upgrade patterns, such as the proxy pattern, to achieve mutability in smart contracts when critical flaws render the old contract unusable.&lt;br&gt;- Split the application's state and logic between a proxy contract and a logic contract.&lt;br&gt;- Use delegatecall() for function dispatch, allowing seamless logic upgrades by deploying new logic contracts and updating the proxy contract's address.&lt;br&gt;- Ensure that logic contract upgrades do not affect users' balances and maintain the integrity of msg.sender and msg.value.&lt;/p&gt;&lt;p&gt;2. Emergency Stops:&lt;/p&gt;&lt;p&gt;- Implement an 'emergency stop' function to block vulnerable functions in the contract in case of critical vulnerabilities.&lt;br&gt;- Include a global Boolean variable indicating the contract's stopped state; set it to false during contract setup and revert to true when the contract is stopped.&lt;br&gt;- Restrict access to the emergency stop function to a trusted address or a decentralized mechanism (e.g., on-chain voting or multisig wallet approval).&lt;br&gt;- Only allow functions that are essential for mitigating vulnerabilities to execute during the emergency state (e.g., emergencyWithdraw()).&lt;/p&gt;&lt;p&gt;3. Event Monitoring:&lt;/p&gt;&lt;p&gt;- Utilize events in your smart contract to track critical actions, such as fund withdrawals or state variable changes.&lt;br&gt;- Emit events whenever safety-critical actions are performed.&lt;br&gt;- Implement off-chain event monitoring to gain insights into contract operations and detect malicious actions promptly.&lt;br&gt;- Consider using off-the-shelf monitoring tools that provide custom alerts based on various triggers, such as transaction volume or specific function calls.&lt;/p&gt;&lt;p&gt;Impact:&lt;br&gt;Disaster recovery mechanisms may require additional resources, both in terms of development effort and gas costs for contract upgrades.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Smart contract security" url="https://ethereum.org/en/developers/docs/smart-contracts/security/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Develop and thoroughly test contract upgrade mechanisms, ensuring that logic contracts can be seamlessly replaced while maintaining data integrity.&lt;br /&gt;
2. Implement and test the emergency stop function, ensuring that it effectively blocks vulnerable functions and can be triggered by authorized entities.&lt;br /&gt;
3. Use events in your contract and test their emission during critical actions.&lt;br /&gt;
4. Set up off-chain event monitoring tools or services and verify that they correctly capture and report contract events.&lt;br /&gt;
5. Consider conducting simulated recovery exercises to test the effectiveness of your disaster recovery plan in real-world scenarios.&lt;br /&gt;
6. Continuously review and update the disaster recovery plan to adapt to changing contract requirements and potential vulnerabilities.&lt;br /&gt;
7. Engage with third-party auditors to validate the effectiveness and reliability of your disaster recovery mechanisms.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.211">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SMART-CONTRACT6" name="Reduce code complexity in Smart Contract" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Reduce code complexity in Smart Contract&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Complexity is a significant source of vulnerabilities in smart contracts. Simplifying the codebase helps reduce the risk of introducing errors and vulnerabilities, making the contract more secure and easier to audit. Reusing established libraries and keeping functions small and modular are effective strategies for achieving code simplicity.&lt;/p&gt;&lt;p&gt;Remediation:&lt;br&gt;- Whenever possible, leverage well-established libraries like OpenZeppelin Contracts for common functionality, such as token standards. These libraries have undergone extensive testing and auditing, reducing the likelihood of introducing vulnerabilities when implementing standard features.&lt;br&gt;- Break down the contract's functionality into small, focused functions. Keep functions simple and focused on performing a single task to enhance readability and maintainability. Avoid creating monolithic contracts that combine numerous unrelated functions. Modular contracts make it easier to reason about code correctness and facilitate easier auditing.&lt;/p&gt;&lt;p&gt;Impact:&lt;br&gt;Smaller, more modular functions might result in increased gas costs due to additional function calls.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Smart contract security" url="https://ethereum.org/en/developers/docs/smart-contracts/security/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1. Review the smart contract's codebase and identify areas where complexity can be reduced.&lt;br&gt;2. Replace custom implementations of standard functionality with trusted, audited libraries (e.g., OpenZeppelin Contracts).&lt;br&gt;3. Refactor complex functions into smaller, more modular components, ensuring that each function has a clear and well-defined purpose.&lt;br&gt;4. Ensure that function interactions and state changes remain consistent after refactoring.&lt;br&gt;5. Conduct thorough unit tests and integration tests to verify that the simplified code functions as expected.&lt;br&gt;6. Pay attention to gas costs and optimize gas usage where possible to minimize any negative impact on contract execution costs.&lt;br&gt;7. Engage with third-party auditors to assess the security implications of code simplification and gather insights on potential vulnerabilities introduced during the process.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.211">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SMART-CONTRACT3" name="Test and verify Smart Contracts for code correctness" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>	&lt;p&gt;Test and verify Smart Contracts for code correctness&lt;/p&gt;

	&lt;p&gt;Rationale:&lt;br /&gt;
Ensuring the security and correctness of smart contracts is paramount due to their immutability once deployed. Rigorous testing and verification processes are essential to identify and rectify vulnerabilities, protecting users and assets from potential risks. Combining various testing techniques, including unit testing, property-based testing, static analysis, dynamic analysis (such as fuzzing), and formal verification, enhances the overall security of smart contracts.&lt;/p&gt;

	&lt;p&gt;Remediation:&lt;br /&gt;
1. Unit Testing&lt;/p&gt;

	&lt;p&gt;- Write small unit tests using mock data that simulates user interactions and contract inputs.&lt;br /&gt;
- Use unit tests to verify the functionality of specific functions within the smart contract.&lt;br /&gt;
- Ensure unit tests cover a wide range of scenarios, including edge cases.&lt;/p&gt;

	&lt;p&gt;2. Property-Based Testing&lt;/p&gt;

	&lt;p&gt;- Combine unit testing with property-based testing techniques for comprehensive security assessment.&lt;br /&gt;
- Use static analysis to analyze control flow graphs and abstract syntax trees to identify potential vulnerabilities.&lt;br /&gt;
- Apply dynamic analysis techniques like fuzzing to execute contract code with random input values and detect security violations.&lt;/p&gt;

	&lt;p&gt;3. Formal Verification:&lt;/p&gt;

	&lt;p&gt;- Implement formal verification to conclusively prove the absence of errors in the smart contract.&lt;br /&gt;
- Create a formal specification that captures desired security properties.&lt;br /&gt;
- Prove that the formal model of the contract adheres to the specification.&lt;/p&gt;

	&lt;p&gt;Impact:&lt;br /&gt;
Rigorous testing and verification methods can be resource-intensive, leading to longer development cycles.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Smart contract security" url="https://ethereum.org/en/developers/docs/smart-contracts/security/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Develop unit tests that cover the functionality of individual smart contract functions.&lt;br /&gt;
2. Test the smart contract with a variety of mock data to ensure it behaves as expected.&lt;br /&gt;
3. Apply property-based testing techniques to analyze control flow graphs, abstract syntax trees, and execution paths.&lt;br /&gt;
4. Perform dynamic analysis, such as fuzzing, to detect vulnerabilities related to unexpected inputs or operations.&lt;br /&gt;
5. If feasible, engage in formal verification to prove the absence of errors and adherence to security properties.&lt;br /&gt;
6. Continuously review and update testing and verification processes as needed to adapt to changing requirements and potential vulnerabilities.&lt;br /&gt;
7. Seek third-party security audits to validate the correctness and security of the smart contract.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.211">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SMART-CONTRACT2" name="Use require(), assert(), and revert() statements for contract safety in Smart Contract" issueId="" issueLink="" platform="" cost="1" risk="54" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use require(), assert(), and revert() statements for contract safety in Smart Contract&lt;/p&gt;&lt;p&gt;Rationale:&lt;br&gt;Anyone can call public functions in your smart contract once it is deployed on the blockchain. Since you cannot know in advance how external accounts will interact with a contract, it is ideal to implement internal safeguards against problematic operations before deploying. You can enforce correct behavior in smart contracts by using the require(), assert(), and revert() statements to trigger exceptions and revert state changes if execution fails to satisfy certain requirements.&lt;/p&gt;&lt;p&gt;Remediation:&lt;br&gt;- require()&lt;/p&gt;&lt;p&gt;require are defined at the start of functions and ensures predefined conditions are met before the called function is executed. A require statement can be used to validate user inputs, check state variables, or authenticate the identity of the calling account before progressing with a function.&lt;/p&gt;&lt;p&gt;- assert()&lt;/p&gt;&lt;p&gt;assert() is used to detect internal errors and check for violations of "invariants" in your code. An invariant is a logical assertion about a contract's state that should hold true for all function executions. An example invariant is the maximum total supply or balance of a token contract. Using assert() ensures that your contract never reaches a vulnerable state, and if it does, all changes to state variables are rolled back.&lt;/p&gt;&lt;p&gt;- revert()&lt;/p&gt;&lt;p&gt;revert() can be used in an if-else statement that triggers an exception if the required condition is not satisfied. The sample contract below uses revert() to guard the execution of functions:&lt;/p&gt;&lt;p&gt;pragma solidity ^0.8.4;&lt;/p&gt;&lt;p&gt;contract VendingMachine {&lt;/p&gt;&lt;p&gt;address owner; error Unauthorized(); function buy(uint amount) public payable { if (amount &amp;gt; msg.value / 2 ether) revert("Not enough Ether provided."); // Perform the purchase. } function withdraw() public { if (msg.sender != owner) revert Unauthorized(); payable(msg.sender).transfer(address(this).balance); }&lt;/p&gt;&lt;p&gt;}&lt;/p&gt;&lt;p&gt;Impact:&lt;br&gt;Excessive use of these statements can increase gas costs, which may impact the cost-effectiveness of contract execution.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Smart contract security" url="https://ethereum.org/en/developers/docs/smart-contracts/security/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>	&lt;p&gt;1. Verify that require() statements correctly validate input conditions, state variables, or identity authentication.&lt;br /&gt;
2. Test scenarios where require() statements trigger exceptions, ensuring that state changes are reverted as expected.&lt;br /&gt;
3. Use assert() statements to check for violations of contract invariants and confirm that state changes are rolled back if an invariant is not met.&lt;br /&gt;
4. Test the if-else statements containing revert() to validate that exceptions are triggered when required conditions are not satisfied.&lt;br /&gt;
5. Conduct thorough unit testing, integration testing, and security auditing to ensure that these statements are correctly implemented and do not introduce vulnerabilities.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:22.211">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Blockchain-Components">
          <threats>
            <threat ref="T-MANIPULATION-GOVERNANCE-SYSTEM" name="Manipulation of Governance Systems" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;Attackers attempt to exploit vulnerabilities in the design of the smart contract's governance mechanisms. Without secure governance, attackers could concentrate voting power, potentially leading to unauthorized control over critical decisions within the decentralized system.&lt;/p&gt;</desc>
              <riskRating confidentiality="25" integrity="75" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-GOVERNANCE-SYSTEM-MEASURES">
                  <countermeasures>
                    <countermeasure ref="C-SMART-CONTRACT5" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SMART-CONTRACT5" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="common-vuln-exploitation" name="Attackers gain access by stealing user information through common vulnerabilities" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>An adversary exploits common weaknesses like phishing, spoofing, etc. to escalate privileges</desc>
              <riskRating confidentiality="100" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-937">
                  <countermeasures>
                    <countermeasure ref="C-SMART-CONTRACT3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SMART-CONTRACT3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-UNAUTHORIZED-EXECUTION" name="Unauthorized Execution" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;Unauthorized execution is an attack where external accounts or entities attempt to call public functions in a smart contract without proper authentication or meeting predefined conditions. Without safeguards, these unauthorized actions could lead to unintended state changes or compromise the security of the smart contract.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="100" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="W-SMART-CONT-INPUT-VALIDATION">
                  <countermeasures>
                    <countermeasure ref="C-SMART-CONTRACT2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SMART-CONTRACT2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-DATA-DELETED-EASY" name="Data is intentionally or accidentally deleted" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>	&lt;p&gt;Data can be deleted intentionally or accidentally and cannot be recovered. Attackers could rely on the lack of backup and recovery mechanisms.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-BACKUPS">
                  <countermeasures>
                    <countermeasure ref="C-SMART-CONTRACT4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SMART-CONTRACT4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-122" name="Privilege Abuse" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources. If access control mechanisms are absent or misconfigured, a user may be able to access resources that are intended only for higher level users. An adversary may be able to exploit this to utilize a less trusted account to gain information and perform activities reserved for more trusted accounts.&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;This attack differs from privilege escalation and other privilege stealing attacks in that the adversary never actually escalates their privileges but instead is able to use a lesser degree of privilege to access resources that should be (but are not) reserved for higher privilege accounts. Likewise, the adversary does not exploit trust or subvert systems - all control functionality is working as configured but the configuration does not adequately protect sensitive resources at an appropriate level.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="100" easeOfExploitation="25"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1548.001" url="https://attack.mitre.org/techniques/T1548/001"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.002" url="https://attack.mitre.org/techniques/T1548/002"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.003" url="https://attack.mitre.org/techniques/T1548/003"/>
                <reference name="Mitre ATT&amp;CK Technique T1548.004" url="https://attack.mitre.org/techniques/T1548/004"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-272">
                  <countermeasures>
                    <countermeasure ref="C-SMART-CONTRACT1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SMART-CONTRACT1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="T-CODE-COMPLEXITY" name="Exploitation of code vulnerabilities due to complexity" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Blockchain-Components" editable="true">
              <desc>&lt;p&gt;Attackers exploit vulnerabilities that arise from the complexity of the code. The intricacies in the code provide opportunities for malicious actors to identify and capitalize on errors or security flaws, compromising the security and integrity of the smart contract.&lt;/p&gt;</desc>
              <riskRating confidentiality="50" integrity="100" availability="50" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="W-LACK-OF-CODE-SIMPLICITY">
                  <countermeasures>
                    <countermeasure ref="C-SMART-CONTRACT6" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SMART-CONTRACT6" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="2df90a36-1adc-4c30-b373-bbc655b04ed9" diagramComponentId="fbfb0d99-a405-44fd-9e60-6c7858fa9bc1" ref="5a8258f8-0bec-4b60-abf2-a380ca421361" name="User" desc="" library="" parentComponentRef="" componentDefinitionRef="CD-USER-PROFILE">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="client-trust-zone-(low-trust)"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures>
        <countermeasure ref="CWE-285" name="Apply authorization checks to segregate and control access to user data" issueId="" issueLink="" platform="" cost="0" risk="78" state="Required" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Applications protecting sensitive or otherwise restricted resources must ensure that only appropriate and authorized users can access the application data. It is important that an application prevent unauthorized users gaining inappropriate access to each other's data. Although user A and user B may both be trusted to access data within the application, they may be only authorized to access different subsets of the protected resources.&amp;nbsp; E.g. user A should not be able to access user B's personal data by manipulating a request (typical examples are the manipulation of an ID value or other object reference sent in the URL or body of an HTTP request).&lt;/p&gt;&lt;p&gt;It is not sufficient to rely on obscurity, for example obfuscated or secret URLs or filenames. The application must validate each request for protected data against the proven identity of the user. Before providing access to restricted resources the application must:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Ensure the user has undergone appropriate authentication (identification and verification, or ID&amp;amp;V). E.g. they must have provided their identity and confirmed this with a password, token, or other verification. Typically this is done by checking the validity of the session token issued after login.&lt;/li&gt;&lt;li&gt;Confirm the user is authorized to access the data or resource they are requesting. E.g. their confirmed identify is checked against a server-side access control matrix to determine whether they may access the requested resource.&lt;/li&gt;&lt;li&gt;Access controls should be granular and make it possible to issue to individual resources to individual users or roles.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;URL and asset based access control is provided by most web-frameworks, and it is preferable to use an established and proven framework.&lt;/p&gt;&lt;p&gt;Object-level authorization checks should be considered in every function that accesses a data source using input from the user.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Favor not using an ID that has been sent from the client, but instead use an ID that is stored in the session object when accessing a database record by the record ID.&lt;/li&gt;&lt;li&gt;Use an authorization mechanism to check if the logged-in user has access to perform the requested action on the record in every function that uses an input from the client to access a record in the database.&lt;/li&gt;&lt;li&gt;Use random and unpredictable values as GUIDs for records' IDs.&lt;/li&gt;&lt;li&gt;Write tests to evaluate the authorization mechanism. Do not deploy vulnerable changes that break these tests.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-01 Access Control Policies and Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/23-08_02_AC-01"/>
            <reference name="OSA AC-05 Separation Of Duties" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/27-08_02_AC-05"/>
            <reference name="OSA AC-06 Least Privilege" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/28-08_02_AC-06"/>
            <reference name="OSA CM-07 Least Functionality" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/158-08_02_CM-07"/>
            <reference name="OSA SI-04 Information System Monitoring Tools And Techniques" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/42-08_02_SI-04"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.1" supportedStandardRef="swift-cscf"/>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="1.4" supportedStandardRef="swift-cscf"/>
            <standard ref="1.5" supportedStandardRef="swift-cscf"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="13.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.2" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.12.3" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.8.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="5.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="5.18" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.2" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.3" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.1.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.2.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="9.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AC-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AC-5" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-5" supportedStandardRef="NIST 800-53"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="Art.32" supportedStandardRef="EU-GDPR"/>
            <standard ref="DE.AE-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-3" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-3" supportedStandardRef="nist-csf"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Using two different browsers configured with an intercepting proxy:&lt;/li&gt;&lt;li&gt;Login as user A in browser A.&lt;/li&gt;&lt;li&gt;Login as user B in browser B.&lt;/li&gt;&lt;li&gt;For every operation that displays sensitive data belonging to user A:&lt;ol&gt;&lt;li&gt;Perform the operation as user A and view their sensitive data.&lt;/li&gt;&lt;li&gt;Obtain the session ID of user B.&lt;/li&gt;&lt;li&gt;Configure the proxy to intercept.&lt;/li&gt;&lt;li&gt;Perform the operation as user A again, but this time intercept all the requests and replace user A's session ID with that of user B.&lt;/li&gt;&lt;li&gt;Ensure that user A's sensitive data is &lt;strong&gt;not &lt;/strong&gt;visible.&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To ensure object-level authorization checks are in place:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Map out all locations in the application in which user input is used to reference objects directly. For example, locations where user input is used to access a database row, a file, application page, etc.&lt;/li&gt;&lt;li&gt;Modify the value of the parameter used to reference objects to see if the application raises an authorization error.&lt;/li&gt;&lt;li&gt;Assess whether it is possible to retrieve objects belonging to other users or otherwise bypass authorization.&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.605">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="deny-default-enf" name="Assure that the principle of deny by default exists for new users/roles" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Deny by default is the principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny by default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Proactive Controls [C7]: Enforce Access Controls" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c7-enforce-access-controls.html"/>
          </references>
          <standards>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.605">
              <output/>
            </source>
            <references>
              <reference name="Testing for Bypassing Authorization Schema (OTG-AUTHZ-002)" url="https://www.owasp.org/index.php/Testing_for_Bypassing_Authorization_Schema_(OTG-AUTHZ-002)"/>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-USER-INTERACTION-BASED-PROTECTION" name="Consider implementing user interaction based protection for highly sensitive operations" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implementing user interaction based protection is one of the principles that should be followed to defend against Cross-Site Request Forgery (CSRF). CSRF is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated.&lt;/p&gt;&lt;p&gt;While other techniques do not require any user interaction, sometimes it's easier or more appropriate to involve the user in the transaction to prevent unauthorized operations. The following are some examples of techniques that can act as strong CSRF defense when implemented correctly.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Authorization mechanism&lt;/li&gt;&lt;li&gt;One-time Token&lt;/li&gt;&lt;li&gt;CAPTCHA&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Check if the post requests are using CSRF token or captcha.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.004">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="WEB-CSP" name="Define a restrictive 'least privilege' Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;The Content-Security-Policy instructs compliant browsers on how they may interact with external sites while in the current context. This enables the server to control interactive code and content from third parties, mitigating some client-side code injection attacks. The policy allows the server to specify what connections are permitted for each type of resource.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;For example, the following policy tells the browser to allow connections (including websockets) to the same domain to which the page was served: *.iriusrisk.com.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' wss://*.iriusrisk.com; img-src 'self' data:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Define and set a Content-Security-Policy with least-privileges to allow only those interactions which are explicitly required.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA CM-02 Baseline Configuration" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/153-08_02_CM-02"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OWASP Secure Headers Project" url="https://www.owasp.org/index.php/OWASP_Secure_Headers_Project"/>
          </references>
          <standards>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="14.4.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Review the HTTP Server responses to determine if a&amp;nbsp;&lt;i&gt;Content-Security-Policy&amp;nbsp;&lt;/i&gt;header is returned, and if so, that it follows the security practice of least-privilege.&lt;/li&gt;&lt;li&gt;Using a browser:&lt;/li&gt;&lt;li&gt;Open the Web Developer Console.&lt;ul&gt;&lt;li&gt;Make requests to the different component end-points.&lt;/li&gt;&lt;li&gt;Verify the header is always returned as part of these responses&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Using an intercepting proxy (e.g. OWASP Zap, BurpSuite):&lt;ul&gt;&lt;li&gt;Browse the site through the proxy.&lt;/li&gt;&lt;li&gt;Review server responses and/or use automated scanning to analyze headers.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;For more information on &lt;i&gt;Content-Security-Policy&lt;/i&gt; policy setup, see:&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.927">
              <output/>
            </source>
            <references>
              <reference name="Mozilla Developer Documentation - CSP" url="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" name="Do not use GET requests for state changing operations" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Use GET requests to retrieve resource representation/information only - and not modify it in any way. As GET requests do not change the resource's state, these are said to be safe methods.&lt;/p&gt;&lt;p&gt;Additionally, GET APIs should be idempotent. Making multiple identical requests must produce the same result every time until another API (POST or PUT) has changed the state of the resource on the server.&lt;/p&gt;&lt;p&gt;If the Request-URI refers to a data-producing process, it is the produced data that shall be returned as the entity in the response and not the source text of the process, unless that text happens to be the output of the process.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="HTTP Methods" url="https://restfulapi.net/http-methods/"/>
          </references>
          <standards/>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Validate all GET controller methods and ensure that they don't modify the state of the server.&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.004">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="LEAST-PRIV-ENF" name="Ensure enforcement of the principle of least privilege" issueId="" issueLink="" platform="" cost="0" risk="78" state="Required" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure enforcement of the principle of least privilege in functions, data files, URLs, controllers, services, and other resources. This implies protection against spoofing and elevation of privilege.&lt;/p&gt;&lt;p&gt;One of the ways to enforce this is by following the deny-by-default principle whereby if a request is not specifically allowed, it is denied. There are many ways this rule will manifest in application code. Some examples of this are:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure the principle of deny-by-default exists whereby new users/roles start with minimal or no permissions and users/roles do not receive access to new features until access is explicitly assigned.&lt;/li&gt;&lt;li&gt;Application code may throw an error or exception while processing access control requests. In these cases access control should always be denied.&lt;/li&gt;&lt;li&gt;When an administrator creates a new user or a user registers for a new account, that account should have minimal or no access by default until that access is configured.&lt;/li&gt;&lt;li&gt;When a new feature is added to an application all users should be denied use of that feature until it's properly configured.&lt;/li&gt;&lt;/ol&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.2" supportedStandardRef="swift-cscf"/>
            <standard ref="2.11A" supportedStandardRef="swift-cscf"/>
            <standard ref="2.9" supportedStandardRef="swift-cscf"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1" supportedStandardRef="swift-cscf"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AC-6" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-6" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="PR.AC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-5" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;&lt;strong&gt;Testing for role/privilege manipulation&lt;/strong&gt;&amp;nbsp;&lt;br&gt;In every portion of the application in which a user can create information inside the database (e.g., making a payment, adding a contact, or sending a message), or can receive information (statement of account, order details, etc.), or delete information (drop users, messages, etc.), it is necessary to record that functionality.&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Try to access such functions as another user in order to verify if it is possible to access a function that should not be permitted by the user's role/privilege (but might be permitted as another user).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.605">
              <output/>
            </source>
            <references>
              <reference name="Testing for Privilege escalation (OTG-AUTHZ-003)" url="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OTG-AUTHZ-003)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" name="Ensure that access control mechanisms are centralized" issueId="" issueLink="" platform="" cost="0" risk="78" state="Required" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Access control, authentication and authorization procedures should be centralized, and all roles, permissions, groups and users shall be controlled - or gain access - through this mechanism.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;To ensure roles, groups and permissions are assigned properly to users, we need to have centralized access control, to grant or deny access easily and securely.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="1.4.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="10" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="3" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="API1:2023-Broken Object Level Authorization" supportedStandardRef="owasp-api-security-top-10"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>Check that access control mechanisms are centralized.</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.604">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FEAT-ACC-CTRL" name="Ensure that attribute or feature-based access control is used" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that attribute or feature-based access control is used whereby the code checks the user's authorization for a feature/data item rather than just their role. Permissions should still be allocated using roles.
&lt;br /&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.4.5" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.605">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="SER-UNTRUST" name="Ensure that serialization is not used when communicating with untrusted clients" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>Ensure that serialization is not used when communicating with untrusted clients. If this is not possible, ensure that adequate integrity controls (and possibly encryption if sensitive data is sent) are enforced to prevent deserialization attacks including object injection.</desc>
          <implementations/>
          <references>
            <reference name="Deserialization of untrusted data" url="https://www.owasp.org/index.php/Deserialization_of_untrusted_data"/>
            <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
            <reference name="SER03-J. Do not serialize unencrypted sensitive data" url="https://wiki.sei.cmu.edu/confluence/display/java/SER03-J.+Do+not+serialize+unencrypted+sensitive+data"/>
          </references>
          <standards>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify Serialization processes that involve client-server communication. They may be used in applications for:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;Remote- and inter-process communication (RPC/IPC)&lt;/li&gt;
 &lt;li&gt;Wire protocols, web services, message brokers&lt;/li&gt;
 &lt;li&gt;Caching/Persistence&lt;/li&gt;
 &lt;li&gt;Databases, cache servers, file systems&lt;/li&gt;
 &lt;li&gt;HTTP cookies, HTML form parameters, API authentication tokens&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.233">
              <output/>
            </source>
            <references>
              <reference name="OWASP Deserialization CheatSheet" url="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Deserialization_Cheat_Sheet.md"/>
              <reference name="Top 10-2017 A8-Insecure Deserialization" url="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="ASVS-8.8" name="Escape meta-characters from untrusted data in logs" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;If untrusted data, including any data received from the client side of a connection, is directly written to a log file, then this data could contain newline or other meta-characters that may allow an attacker to forge log entries.&lt;/p&gt;&lt;p&gt;Such meta-characters should first be escaped or removed before the data is written to the logging system.&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.3.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;
                            &lt;li&gt;Identify the logging system in use.&lt;/li&gt;
                            &lt;li&gt;Check whether the logging system automatically escapes meta-characters such as a
                            newline and/or carriage return.&lt;/li&gt;
                            &lt;li&gt;If not, then check that there is a central function that escapes these
                            meta-characters before writing them to the log file.&lt;/li&gt;
                            &lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.232">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="security-logging" name="Implement Security Logging and Monitoring" issueId="" issueLink="" platform="" cost="0" risk="70" state="Required" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Logging is often neglected by developers when thinking of security considerations. However, proper logging practices can provide the crucial forensics needed to investigate after a breach, and perhaps more importantly, to detect security issues as they happen. Most developers are already familiar with logging for debugging and diagnostic purposes, so it should be easy for them to apply the concept of security logging.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Actions to do:&lt;ul&gt;&lt;li&gt;Log all failed authentication attempts, denied access, and input validation errors.&lt;/li&gt;&lt;li&gt;Terminate the offending user session to inhibit further attack.&lt;/li&gt;&lt;li&gt;Ensure errors returned to the client-side are generic to prevent an attacker enumerating the defenses in place or gaining knowledge about the back-end.&lt;/li&gt;&lt;li&gt;Configure a monitoring system to continuously monitor the infrastructure, network, and the API functioning.&lt;/li&gt;&lt;li&gt;Use a Security Information and Event Management (SIEM) system to aggregate and manage logs across all components and hosts.&lt;/li&gt;&lt;li&gt;Configure custom dashboards and alerts, making it possible to detect and respond to suspicious activity as early as possible.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Log considerations:&lt;ul&gt;&lt;li&gt;Ensure logged data is appropriately sanitized and encoded to prevent attacks against the logs and subsequent access to them.&lt;/li&gt;&lt;li&gt;Logs should be written using a format suited to be consumed by a log management solution, and include enough details to identify the malicious actor.&lt;/li&gt;&lt;li&gt;Logs need to be handled as sensitive data, and their integrity should be guaranteed at rest and transit.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OWASP Logging Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html"/>
            <reference name="OWASP Proactive Controls C9: Implement Security Logging and Monitoring" url="https://owasp-top-10-proactive-controls-2018.readthedocs.io/en/latest/c9-implement-security-logging-monitoring.html"/>
            <reference name="OWASP Security Logging Project" url="https://www.owasp.org/index.php/OWASP_Security_Logging_Project"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.7" supportedStandardRef="swift-cscf"/>
            <standard ref="2.8A" supportedStandardRef="swift-cscf"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.3A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.4A" supportedStandardRef="swift-cscf"/>
            <standard ref="CA-7" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.AE-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-6" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-2" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-4" supportedStandardRef="nist-csf"/>
            <standard ref="DE.DP-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-1" supportedStandardRef="nist-csf"/>
            <standard ref="ID.RA-5" supportedStandardRef="nist-csf"/>
            <standard ref="ID.SC-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8" supportedStandardRef="nist-csf"/>
            <standard ref="RS.AN-1" supportedStandardRef="nist-csf"/>
            <standard ref="RS.MI-3" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Organizations should perform testing and validation activities periodically to confirm that the organization's logging policies, processes, and procedures are being followed properly both at the infrastructure level and the system level throughout the organization.&amp;nbsp; Log management audits can identify deficiencies in policies, procedures, technology, and training that can then be addressed.&lt;/p&gt;&lt;p&gt;The most common techniques for testing and validating logging are as follows:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Auditors or others performing testing and validation can review the logging configuration and settings, as well as the system logs, infrastructure logs, and archived logs, for a representative sampling of systems and infrastructure servers to ensure that they comply with policies and procedures.&lt;/li&gt;&lt;li&gt;Auditors (or security administrators under the direction of auditors) or others performing testing and validation can create security events on a representative sampling of systems through vulnerability scanning, penetration testing, or routine actions (e.g., logging onto a system remotely), and then ensure that the log data those activities should generate exist and are handled according to the organization's policies and procedures.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Confirm all security events (and suspicious activity that may indicate a security event) are appropriately identified in the application.&lt;/li&gt;&lt;li&gt;Confirm security errors are logged with appropriate priority.&lt;/li&gt;&lt;li&gt;Any data logged relating to the event must be carefully sanitized and encoded; by definition the data could be an attack payload and could execute when the logs are viewed outside of the system.&lt;/li&gt;&lt;li&gt;Verify actual logged data.&lt;br&gt;&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.005">
              <output/>
            </source>
            <references>
              <reference name="Guide to Computer Security Log Management" url="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CDS-USER-TRACK" name="Log details of user actions within the system" issueId="" issueLink="" platform="" cost="0" risk="78" state="Required" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To maintain proper accountability, logs should be maintained with sufficient
                        information to track user actions within the system. These logs should be forensically sound,
                        non-repudiable, and contain comprehensive details about activity. While the exact data for an
                        event may vary, the following should be captured at a minimum:&lt;/p&gt;
                        &lt;ul&gt;
                        &lt;li&gt;Timestamps against a proven external source (e.g. an NTP server).&lt;/li&gt;
                        &lt;li&gt;Origin (with this field we mark if the logs are provided by a trusted or untrusted
                        source).&lt;/li&gt;
                        &lt;li&gt;Event, status, and/or&amp;nbsp;error codes (with sensitive data masked as appropriate
                        or not introduced in logs).&lt;/li&gt;
                        &lt;li&gt;Service, command, application or function name and details.&lt;/li&gt;
                        &lt;li&gt;User or system account associated with an event.&lt;/li&gt;
                        &lt;li&gt;Devices used (e.g. source and destination IPs, terminal session ID, web browser, etc.).&lt;/li&gt;
                        &lt;/ul&gt;
                        &lt;div&gt;
                        Source:&amp;nbsp;&amp;nbsp;
                        &lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt;https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;
                        &lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            <reference name="OSA AC-03 Access Enforcement" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/25-08_02_AC-03"/>
            <reference name="OSA AC-07 Unsuccessful Login Attempts" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/29-08_02_AC-07"/>
            <reference name="OSA AU-02 Auditable Events" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/37-08_02_AU-02"/>
            <reference name="OSA AU-03 Content Of Audit Records" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/172-08_02_AU-03"/>
            <reference name="OSA AU-10 Non-Repudiation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/179-08_02_AU-10"/>
            <reference name="OSA CA-07 Continuous Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/166-08_02_CA-07"/>
            <reference name="OSA IR-05 Incident Monitoring" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/139-08_02_IR-05"/>
            <reference name="OSA SI-05 Security Alerts And Advisories" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/43-08_02_SI-05"/>
            <reference name="OSA SI-12 Information Output Handling And Retention" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/50-08_02_SI-12"/>
            <reference name="OWASP Juice Shop: Broken Access Control" url="https://pwning.owasp-juice.shop/part2/broken-access-control.html"/>
            <reference name="OWASP Juice Shop: Security Misconfiguration" url="https://pwning.owasp-juice.shop/part2/security-misconfiguration.html"/>
            <reference name="[C3] OWASP Proactive Controls" url="https://www.owasp.org/index.php/OWASP_Proactive_Controls"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.7.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.1.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.4.2" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="164.312(a)(1)(A)" supportedStandardRef="hipaa-required"/>
            <standard ref="164.312(b)" supportedStandardRef="hipaa-required"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="29" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="30" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.17" supportedStandardRef="iso-27002-2022"/>
            <standard ref="6.4" supportedStandardRef="swift-cscf"/>
            <standard ref="6.5A" supportedStandardRef="swift-cscf"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="7.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="7.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.15" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.24" supportedStandardRef="iso-27002-2022"/>
            <standard ref="8.32" supportedStandardRef="iso-27002-2022"/>
            <standard ref="9.4.3" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="A01:2021-Broken Access Control" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A09:2021-Security Logging and Monitoring Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2017-Insufficient Logging-Monitoring" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A5:2017-Broken Access Control" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="AU-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-10" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-12" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-12" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-14" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-2" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-2" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-3" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-3" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-4" supportedStandardRef="NIST 800-53"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-4" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-low-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-moderate-baseline"/>
            <standard ref="AU-8" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="AU-8" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.CM-1" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-3" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-7" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-1" supportedStandardRef="nist-csf"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Perform several different actions on the service.&lt;/li&gt;&lt;li&gt;Inspect the log files to see if the format and content complies with the company policy.&lt;/li&gt;&lt;li&gt;If there is no company policy, check that at least the following data is included: timestamp event, status, error codes, service/command/application username or system account associated with an eventDevice used (e.g. source and destination IPs, terminal session ID, web browser, etc).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Source:&amp;nbsp;&lt;a href="https://security.berkeley.edu/security-audit-logging-guideline"&gt; https://security.berkeley.edu/security-audit-logging-guideline&lt;/a&gt;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.605">
              <output/>
            </source>
            <references>
              <reference name="Berkeley security: audit logs" url="https://security.berkeley.edu/security-audit-logging-guideline"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="cwe-352-csrf" name="Protect cookies from CSRF" issueId="" issueLink="" platform="" cost="0" risk="70" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user's web browser to perform an unwanted action on a trusted site when the user is authenticated. A CSRF attack works because browser requests automatically include any credentials associated with the site, such as the user's session cookie, IP address, etc. Therefore, if the user is authenticated to the site, the site cannot distinguish between the forged or legitimate request sent by the victim. A token/identifier that is not accessible to the attacker is needed to mitigate this and would not be sent along (like cookies) with forged requests that the attacker initiates.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Remediation:&amp;nbsp;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requiring re-authentication of sensitive functions is an effective way to protect your application against a CSRF, but intrusive to the user experience.&lt;/p&gt;&lt;p&gt;You can also protect cookies from CSRF using at least one or more of the following recommendations:&amp;nbsp;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;CSRF nonces&lt;/strong&gt;. Use nonces to prevent unauthorized access by providing a secret 'key' (which is valid only once) that must be validated in any sensitive form submission. For maximum security, the nonce is also time sensitive and expires.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Triple or double submit cookie pattern&lt;/strong&gt;. If maintaining the state for the CSRF token on the server-side is problematic, an alternative defense is to use the double-submit cookie technique. This technique is easy to implement and is stateless. In this technique, a random value is sent in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match. When a user visits (even before authenticating to prevent login CSRF), the site should generate a (cryptographically strong) pseudo random value and set it as a cookie on the user's machine separate from the session identifier. The site then requires that every transaction request include this pseudo-random value as a hidden form value (or other request parameter/header). If both of them match on the server-side, the server accepts it as a legitimate request and if they don't, then rejects the request.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ORIGIN request header checks&lt;/strong&gt;.There are two steps to this mitigation, both of which rely on examining an HTTP request header value. Firstly, determining the origin the request is coming from (source origin). This can be achieved via Origin and/or referer headers. Secondly, determining the origin the request is going to (target origin). On the server-side verify if both of these match. If they do, we accept the request as legitimate (meaning it's the same origin request) and if they don't, discard the request (meaning that the request originated from a cross-domain). Reliability of these headers comes from the fact they cannot be altered programmatically (using JavaScript in an XSS) as they fall under the forbidden headers list (i.e., only browsers can set them).&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references>
            <reference name="Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html"/>
            <reference name="OSA CM-06 Configuration Settings" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/157-08_02_CM-06"/>
            <reference name="OSA SC-03 Security Function Isolation" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/63-08_02_SC-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="4.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;1.- Identify all application components performing sensitive operations.&amp;nbsp;&lt;/p&gt;&lt;p&gt;2.- Using an intercepting proxy, the Web Developer Console, or other tool; intercept the browser request and server response, and verify a unique strong token is being sent and verified with each request.&lt;/p&gt;&lt;p&gt;3.- Confirm the tokens are passed in a programmatic way resistant to CSRF attack; e.g. in a custom POST field and separate HTTP header.&lt;/p&gt;&lt;p&gt;4.- Attempt to subvert the CSRF controls to ensure they are robust:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Change or remove the tokens and confirm the application rejects the request.&lt;/li&gt;&lt;li&gt;Attempt to replay the tokens in a subsequent request.&lt;/li&gt;&lt;li&gt;Mismatch the tokens in a request.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To modify headers and otherwise modify browser requests, use an intercepting proxy (e.g. OWASP Zap, Burp or Fiddler), or browser extensions such as Cookie Manager or Tamper Data.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.004">
              <output/>
            </source>
            <references>
              <reference name="Testing for CSRF (OTG-SESS-005)" url="https://www.owasp.org/index.php/Testing_for_CSRF_(OTG-SESS-005)"/>
            </references>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="excessive-permissions" name="Request only the minimum required permissions" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;div&gt;
  Security best practices dictate that the practice of least-privilege be followed, thereby reducing the attack surface and risk of compromise. By limiting the access an application has to the system, developers may reduce the impact a compromise may have.&amp;nbsp;
&lt;/div&gt;
&lt;div&gt;
  Request only the minimum required permissions. For example, if there is no requirement to use the camera then the application should not request this permission.
&lt;/div&gt;
&lt;div&gt;
  Review features and functionalities present in the application, in particular legacy features, to determine if they are relevant and required, and if not remove them along with associated OS permissions.
&lt;/div&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="10.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;div&gt;
  Verify that the application only requests the necessary permissions to work correctly.
&lt;/div&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.605">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.232">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="DATA-VAL" name="Validate all data received" issueId="" issueLink="" platform="" cost="1" risk="78" state="Required" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;All data received should be considered tainted and a potential risk, regardless of the source or transport method. For example, while hidden form fields, cookies or other headers may be obfuscated from a user, along with parameters passed in ViewStates or other encapsulated forms. These can be modified by the user on the client-side in memory, or in transit on the network. Similarly, data passed from binary or compiled components can be modified in situ or in transit. &lt;i&gt;&lt;/i&gt; &lt;i&gt;Furthermore, encryption only secures the data in transit between the two ends of the encrypted tunnel (one of which is typically controlled by the client); data passing through the link may still be malicious.&lt;/i&gt; &lt;/p&gt; As such, all data from the client side must be subjected to strict validation, sanitization, and encoding against expected syntactic and semantic criteria. 
&lt;div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Define a specification of the data that is expected at each input; both the syntax (e.g. alphanumeric only) and semantics (e.g. a word of between 1 and 25 characters, or a specific list). As an example of business rule logic, &amp;quot;boat&amp;quot; may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as &amp;quot;red&amp;quot; or &amp;quot;blue.&amp;quot;&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Implement a 'known good' or white-list approach, where only inputs that meet the strict criteria for each input are accepted, and reject, transform, or encapsulate any non-compliant data.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;While useful for identifying malicious content, do not rely on looking for specific malformed or attack payloads (blacklists). It is almost impossible to maintain a comprehensive and accurate blacklist due to the complexity and evolving nature of attacks, opportunities to obfuscate payloads, and changes to the code's execution environment. As noted, blacklists can be useful for detecting and logging potential attacks, or determining which inputs are so malformed that they should be rejected outright.&amp;nbsp;&lt;/li&gt; 
  &lt;li&gt;Validate all data received from the client, including values such as &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers and cookie values if these are used as input on the server side, X- headers, and other platform specific data objects passed between the client and server.&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SC-13 Use Of Cryptography" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/73-08_02_SC-13"/>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-03 Malicious Code Protection" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/41-08_02_SI-03"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: Injection" url="https://pwning.owasp-juice.shop/part2/injection.html"/>
            <reference name="OWASP Juice Shop: Insecure Deserialization" url="https://pwning.owasp-juice.shop/part2/insecure-deserialization.html"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="1.5.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="11.1.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.10" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.10.12" supportedStandardRef="iotsf-class-0"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-2"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-1"/>
            <standard ref="2.4.11.9" supportedStandardRef="iotsf-class-0"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.1.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.3" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.6" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.2.7" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.10" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="5.3.8" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="6.2" supportedStandardRef="swift-cscf"/>
            <standard ref="6.3" supportedStandardRef="swift-cscf"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A03:2021-Injection" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A08:2021-Software and Data Integrity Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A10:2021-Server-Side Request Forgery (SSRF)" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A1:2017-Injection" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="A8:2017-Insecure Deserialization" supportedStandardRef="owasp-top-10-2017"/>
            <standard ref="API7:2023-Server Side Request Forgery" supportedStandardRef="owasp-api-security-top-10"/>
            <standard ref="PR.DS-6" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10" supportedStandardRef="NIST 800-53"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;Identify data input points for the application, for example:&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Forms with user input (including hidden fields)&lt;/li&gt;&lt;li&gt;API calls&lt;/li&gt;&lt;li&gt;HTTP Headers&lt;/li&gt;&lt;li&gt;Application states such as ASP Viewstates&lt;/li&gt;&lt;li&gt;Serialized Java objects&lt;/li&gt;&lt;li&gt;Any data structure received from the client-side&lt;/li&gt;&lt;li&gt;For every input, define accepted input (both syntactic and semantic criteria)&lt;/li&gt;&lt;li&gt;Where possible, define a white-list of accepted input or characters&lt;/li&gt;&lt;li&gt;For each of the inputs, ensure that the data is validated against the defined whitelists (for example with a regular expression) before being processed.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;To test data validation:&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.).&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A number of tools can be used to aid in testing:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Directly from your browser with the Developer Tools.&lt;/li&gt;&lt;li&gt;Using a browser extension which allows you to modify the request and responses on the fly (i.e. Tamper Data).&lt;/li&gt;&lt;li&gt;Using a proxy which allows you to modify the request and response on the fly (i.e. OWASP ZAP, Burp, Fiddler, etc.).&lt;/li&gt;&lt;/ul&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.233">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="FILE-DATA-CHECK" name="Validate the file format before processing" issueId="" issueLink="" platform="" cost="1" risk="78" state="Recommended" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Attackers may attempt to bypass controls on uploaded content by renaming, embedding, or otherwise manipulating benign files with malicious content. As with client-side data, the application should screen uploaded content before processing it.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;File contents and file-system path data must be checked for safety.&lt;/li&gt;&lt;li&gt;Consider directory traversal, local file inclusion, and OS injection attacks when validating filenames.&lt;/li&gt;&lt;li&gt;Verify the MIME type is correct and appropriate, and matches content.&lt;/li&gt;&lt;li&gt;Files with an structured format should be checked against the expected format/definition (e.g. XML against a XSD or DTD).&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations/>
          <references>
            <reference name="OSA SI-11 Error Handling" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/49-08_02_SI-11"/>
            <reference name="OWASP Juice Shop: XXE" url="https://pwning.owasp-juice.shop/part2/xxe.html"/>
          </references>
          <standards>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.2.1" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="12.3.5" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="12.6.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="13.2.2" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="8.8" supportedStandardRef="iso-27002-2022"/>
            <standard ref="A05:2021-Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="A4:2017-XML External Entities (XXE)" supportedStandardRef="owasp-top-10-2017"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;ol&gt;&lt;li&gt;Identify structured data being processed by your component which is coming from untrusted sources.&lt;/li&gt;&lt;li&gt;Check there is a validation method for the format and the structure.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Examples of this is to check JSON against a JSON schema, XML against an XSD or a DTD, or checking that a received file which is purported to be an image is actually an image.&amp;nbsp;&lt;/p&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2025-01-07T16:30:23.233">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="GENERAL" name="General" desc="" library="IR-Functional-Components">
          <threats>
            <threat ref="CAPEC-103-CLICKJACKING" name="An attacker uses multiple transparent or opaque layers to trick a user into clicking on a button or link on another page when they were intending to click on the top level page" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;For example, imagine an attacker who builds a web site that has a button on it that says "click here for a free iPod". However, on top of that web page, the attacker has loaded an iframe with your mail account, and lined up exactly the "delete all messages" button directly on top of the "free iPod" button. The victim tries to click on the "free iPod" button but instead actually clicked on the invisible "delete all messages" button. In essence, the attacker has "hijacked" the user's click, hence the name "Clickjacking".&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="25" availability="50" easeOfExploitation="100"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="WEB-CSP" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-50-MALICIOUS-PROFILE-UPDATE" name="An attacker can force users to update their profile without noticing it" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Cross-Site Request Forgery (CSRF) is an attack that forces an end user to execute unwanted actions on a web application in which they're currently authenticated. With a little help of social engineering (such as sending a link via email or chat), an attacker may trick the users of a web application into executing actions of the attacker's choosing. This attack could allow an attacker to change one's account information (for example the "Name " or "Adress" attributes) without having to login to victim account or without having to login but only by using CSRF technique.&amp;nbsp;&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="75" easeOfExploitation="75"/>
              <references/>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="C-AVOID-GET-SENSITIVE-OPERATIONS" mitigation="25"/>
                <countermeasure ref="C-USER-INTERACTION-BASED-PROTECTION" mitigation="25"/>
                <countermeasure ref="cwe-352-csrf" mitigation="25"/>
                <countermeasure ref="security-logging" mitigation="25"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-137-INJECTION" name="Attackers gain unauthorized access to data and/or systems through Injection attacks" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;Some of the most common types of injection attacks are SQL injections, cross-site scripting (XSS), code injection, OS command injection, host header injection, and more. A large part of vulnerabilities that exist in web applications can be classified as injection vulnerabilities.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;String query = "SELECT * FROM accounts WHERE custID='' request.getParameter("id") + '';&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;Scenario #2: Similarly, an application's blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL)):&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;Query HQLQuery = session.createQuery("FROM accounts WHERE custID=' '+ request.getParameter("id") + "'");&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;In both cases, the attacker modifies the 'id' parameter value in their browser to send: ' or '1'='1. For example:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;http://example.com/app/accountView?id=''or '1'='1&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="50" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1190" url="https://attack.mitre.org/techniques/T1190"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ASVS-8.8" mitigation="20"/>
                <countermeasure ref="CWE-89-PREPARED" mitigation="20"/>
                <countermeasure ref="DATA-VAL" mitigation="20"/>
                <countermeasure ref="FILE-DATA-CHECK" mitigation="20"/>
                <countermeasure ref="SER-UNTRUST" mitigation="20"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
            <threat ref="CAPEC-180-BROKEN-ACCESS-CONTROL" name="An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the application" state="Expose" source="RULES" edited="false" owner="cdalrymple@iriusrisk.com" library="IR-Functional-Components" editable="true">
              <desc>&lt;p&gt;An Access Control functionality often spans many areas of software depending on the complexity of the access control system. For example, managing access control metadata or building caching for scalability purposes are often additional components in an access control system that need to be built or managed. Vulnerabilities appear when a user is able to successfully request access to something they usually shouldn't have access to. Oftentimes this is found when the authorization is not implemented properly. A typical example would be a certain endpoint on a website that throws a 403 forbidden error which is then bypassed by adding an X-Forwarded-For: "127.0.0.1" header.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="50" availability="100" easeOfExploitation="100"/>
              <references>
                <reference name="Mitre ATT&amp;CK Technique T1574.010" url="https://attack.mitre.org/techniques/T1574/010"/>
              </references>
              <weaknesses/>
              <countermeasures>
                <countermeasure ref="ACCESS-CONTROL-CENTRALIZED" mitigation="14"/>
                <countermeasure ref="CDS-USER-TRACK" mitigation="14"/>
                <countermeasure ref="CWE-285" mitigation="16"/>
                <countermeasure ref="FEAT-ACC-CTRL" mitigation="14"/>
                <countermeasure ref="LEAST-PRIV-ENF" mitigation="14"/>
                <countermeasure ref="deny-default-enf" mitigation="14"/>
                <countermeasure ref="excessive-permissions" mitigation="14"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>

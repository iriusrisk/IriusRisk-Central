<?xml version="1.0" encoding="UTF-8"?>
<template ref="iriusrisk-three-tier-web-application-template" name="IriusRisk - Three-tier Web Application Template" tags="" modelUpdated="2024-12-30 10:29:10">
  <desc>A common architecture that separates presentation, application logic, and data storage, prevalent in enterprise systems.</desc>
  <diagram draft="false">
    <schema></schema>
  </diagram>
  <trustZones>
    <trustZone ref="private-secured" uuid="2ab4effa-40b7-4cd2-ba81-8247d29a6f2d" name="Private Secured" desc="A secured zone within a trusted private zone" trustRating="100"/>
    <trustZone ref="internet" uuid="f0ba7722-39b6-4c81-8290-a30a248bb8d9" name="Internet" desc="Untrusted Internet public zone" trustRating="1"/>
  </trustZones>
  <questions/>
  <assets>
    <asset type="" name="Customer Data" desc="Data that uniquely identifies customers." identifier="">
      <classification name="Personally Identifiable Information" desc="&#10;                Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity.&#10;                " confidentiality="80" integrity="80" availability="20"/>
    </asset>
    <asset type="" name="Personally Identifiable Information" desc="Any information relating to an identified or identifiable natural person &#13;&#10;('Data Subject') an identifiable person is one who can be identified, &#13;&#10;directly or indirectly, in particular by reference to an identification &#13;&#10;number or to one or more factors specific to his physical, physiological, &#13;&#10;mental, economic, cultural or social identity." identifier="">
      <classification name="Personally Identifiable Information" desc="&#10;                Any information relating to an identified or identifiable natural person ('Data Subject');&#10;                an identifiable person is one who can be identified, directly or indirectly,&#10;                in particular by reference to an identification number or to one or more factors specific to his&#10;                physical, physiological, mental, economic, cultural or social identity.&#10;                " confidentiality="80" integrity="80" availability="20"/>
    </asset>
  </assets>
  <settings/>
  <dataflows>
    <dataflow name="Web UI -&gt; Web Service" ref="035d5761-2597-4243-96f5-5caf632f4ebf" source="9cc61eb1-0ef9-4cb8-be94-68322712dd7d" target="2499d7b8-5411-4e8a-9418-cc503ba8a56f">
      <assets>
        <asset name="Customer Data"/>
      </assets>
      <tags>
        <tag tag="https"/>
      </tags>
    </dataflow>
    <dataflow name="Web Service -&gt; Cache" ref="0e271c2d-1c36-4597-8e2b-f2178a323d38" source="2499d7b8-5411-4e8a-9418-cc503ba8a56f" target="fef0fdb0-d726-4938-b58c-c7e4da4c5efe">
      <assets/>
      <tags>
        <tag tag="tls"/>
      </tags>
    </dataflow>
    <dataflow name="Web Service -&gt; Database" ref="f7835402-c2f5-4004-8c7a-d943c315995e" source="2499d7b8-5411-4e8a-9418-cc503ba8a56f" target="0e0aa2cb-9fe9-4bd1-adef-06f4ba5b561c">
      <assets>
        <asset name="Customer Data"/>
      </assets>
      <tags>
        <tag tag="tls"/>
      </tags>
    </dataflow>
  </dataflows>
  <customFields>
    <customField ref="pc--project-marker" value=""/>
  </customFields>
  <components>
    <component uuid="3971f5c3-2ddf-4ded-9ca9-53d2892abe67" diagramComponentId="1c5ecbbc-37bd-4f6d-ab64-5636693c775e" ref="fef0fdb0-d726-4938-b58c-c7e4da4c5efe" name="Cache" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="redis-server">
      <tags/>
      <questions>
        <question ref="encryptedTransport" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets/>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="3859e97b-9d3f-43aa-b168-846e2af94cfe" diagramComponentId="5cf7bebe-0cbc-4971-8e83-635eab4c2840" ref="0e0aa2cb-9fe9-4bd1-adef-06f4ba5b561c" name="Database" desc="" library="CS-Default" parentComponentRef="" componentDefinitionRef="postgresql">
      <tags/>
      <questions>
        <question ref="channelEncryption" answer="true" manuallyModified="false"/>
        <question ref="encryptedTransport" answer="true" manuallyModified="false"/>
        <question ref="fipsCryptolibraries" answer="true" manuallyModified="false"/>
        <question ref="userPassAuth" answer="true" manuallyModified="false"/>
      </questions>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets>
        <asset name="Customer Data" accessType="10"/>
        <asset name="Customer Data" accessType="50"/>
      </assets>
      <settings/>
      <weaknesses/>
      <countermeasures/>
      <usecases/>
    </component>
    <component uuid="fb4114ed-f330-49ff-a44e-e2098501f9be" diagramComponentId="a5ff3f72-352a-44fd-b5e8-17b1e6be5704" ref="2499d7b8-5411-4e8a-9418-cc503ba8a56f" name="Web Service" desc="" library="IR-Dataflows" parentComponentRef="" componentDefinitionRef="CD-V2-WEB-SERVICE">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="private-secured"/>
      </trustZones>
      <assets>
        <asset name="Customer Data" accessType="40"/>
        <asset name="Customer Data" accessType="50"/>
      </assets>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-284" name="CWE-284" state="0" impact="100" issueId="" issueLink="">
          <desc>CWE:
CWE-284: Improper Access Control
The product does not restrict or incorrectly restricts access to a resource from an unauthorized actor.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-502" name="CWE-502" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-502: Deserialization of Untrusted Data
The product deserializes untrusted data without sufficiently verifying that the resulting data will be valid.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-668" name="CWE-668" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-668: Exposure of Resource to Wrong Sphere
The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-74" name="CWE-74" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')
The product constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component.
Software or other automated logic has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features that classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-755" name="CWE-755" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-755: Improper Handling of Exceptional Conditions
The product does not handle or incorrectly handles an exceptional condition.
</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-770" name="CWE-770" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-770: Allocation of Resources Without Limits or Throttling
The product allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-923" name="CWE-923" state="0" impact="100" issueId="" issueLink="">
          <desc>CWE:
CWE-923: Improper Restriction of Communication Channel to Intended Endpoints
The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.930">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-89" name="Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" state="0" impact="100" issueId="" issueLink="">
          <desc>&lt;p&gt;The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component.&amp;nbsp;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&lt;br&gt;Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted and executed as SQL instead of ordinary user data. This can be leveraged to alter query logic in order to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is relatively easily detected, and often easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted automated attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes.&lt;/p&gt;</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.084">
              <output/>
            </source>
            <references>
              <reference name="CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" url="https://cwe.mitre.org/data/definitions/89.html"/>
              <reference name="OWASP Testing Guide" url="https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)#Standard_SQL_Injection_Testing"/>
            </references>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-VALIDATION-SERVICE" name="Implement proper parsing and input validation" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Ensure the security of your server-side web service, including REST APIs and gRPC services, by implementing effective parsing and input validation. Proper execution of these practices prevents security vulnerabilities such as injection attacks, buffer overflows, and other forms of malicious input manipulation. The following steps, designed for developers with no previous security experience, provide a guideline to implement these measures:&lt;/p&gt;
&lt;strong&gt;Steps for Robust Parsing and Input Validation:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Enforce strict input validation checks. Verify that all user-provided data matches the expected format, length, and data type. Employ regular expressions for the validation of complex input patterns, ensuring that data conforms to predefined formats.&lt;/li&gt; &lt;li&gt;Adopt a whitelisting approach for input validation. Explicitly define and accept only known, safe input patterns, rather than attempting to identify and block potentially harmful inputs.&lt;/li&gt; &lt;li&gt;Handle special characters with care, especially in contexts where they might be interpreted as executable or control characters. This step is crucial for preventing injection attacks.&lt;/li&gt; &lt;li&gt;Utilize input sanitization techniques. Employ encoding or proper filtering strategies to neutralize or strip out potentially dangerous characters or patterns from user inputs.&lt;/li&gt; &lt;li&gt;Employ established libraries and tools for their robust input validation and parsing features. This approach minimizes the risk of errors that could lead to vulnerabilities.&lt;/li&gt; &lt;li&gt;Implement both client-side and server-side validation to improve user experience by providing immediate feedback through client-side validation, while relying on server-side validation as the ultimate enforcement point to ensure security.&lt;/li&gt; &lt;li&gt;Develop secure error-handling practices. Ensure that error messages do not disclose sensitive information that could be exploited by attackers.&lt;/li&gt; &lt;li&gt;Incorporate automated tools for scanning and testing your application regularly. This helps in early detection and fixing of potential issues related to input validation and parsing.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;By following these actionable steps and adhering to good security practices, you can significantly reduce the risk of security breaches and vulnerabilities in your web service. Regularly update your knowledge on security best practices and tools from reliable sources such as the Open Web Application Security Project (OWASP) to stay ahead of potential threats.&lt;/p&gt; </desc>
          <implementations/>
          <references>
            <reference name="Input Validation Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="11.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="503-455" supportedStandardRef="OpenCRE"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-6: Integrity checking mechanisms are used to verify software, firmware, and information integrity" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10 INFORMATION INPUT VALIDATION" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1016 - Vulnerability Scanning||ATT&amp;CK Enterprise - M1017 - User Training||ATT&amp;CK ICS - M0818 - Validate Program Inputs"/>
            <customField ref="SF-C-SCOPE" value="Application Security||Data Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SI-10 INFORMATION INPUT VALIDATION"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.800">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SERVICE-RESTRICTIONS" name="Implement service restrictions" issueId="" issueLink="" platform="" cost="0" risk="44" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implement service restrictions effectively to safeguard your server-side web service, including REST APIs and gRPC services, against unauthorized use and potential security threats. Follow these actionable steps, designed even for developers with no prior security background, to mitigate risks such as brute force attacks, denial-of-service (DoS) attempts, and unwarranted resource consumption.&lt;/p&gt;
&lt;strong&gt;Implementing Rate Limiting and Service Restrictions:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Introduce rate-limiting mechanisms. Use a library or module specific to your development framework to limit the number of requests a user or client can make within a given timeframe. This measure is crucial for preventing overuse and abuse of the service.&lt;/li&gt; &lt;li&gt;Establish granular rate limits for various actions or API endpoints. Analyze the functionality and sensitivity of different parts of your service to apply more stringent limits where necessary. For instance, login attempts may require stricter limits compared to general data retrieval operations.&lt;/li&gt; &lt;li&gt;Set time windows for rate limiting that reflect the expected traffic patterns. Shorter windows can prevent burst traffic from causing harm, while longer windows prevent sustained high usage. Adjust these windows based on real-world usage data and analytics.&lt;/li&gt; &lt;li&gt;Consider implementing graceful degradation strategies. During peak loads or detected attacks, dynamically adjust rate limits or temporarily degrade service for non-critical functionalities to ensure availability of core features.&lt;/li&gt; &lt;li&gt;Use whitelisting and blacklisting to control access. Allow trusted clients or users unfettered access by whitelisting their IPs or accounts, and blacklist entities that exhibit malicious behavior or violate usage policies.&lt;/li&gt; &lt;li&gt;Deploy comprehensive monitoring and logging. Utilize tools and practices that enable you to observe traffic in real-time, recognize patterns indicative of abuse, and maintain records for investigating security incidents.&lt;/li&gt; &lt;li&gt;Incorporate additional security layers. Integrate solutions like Web Application Firewalls (WAFs) and Intrusion Detection Systems (IDS) to defend against a broader spectrum of threats, including sophisticated DoS and DDoS attacks.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;Refer to reputable security frameworks and guidelines, such as those provided by OWASP (Open Web Application Security Project), to further enhance your service's security posture. Staying informed about the latest security best practices and vulnerabilities in web services is crucial for maintaining a robust defense against evolving threats.&lt;/p&gt; </desc>
          <implementations/>
          <references>
            <reference name="What is Rate Limiting? How it works and implementation techniques" url="https://www.vaadata.com/blog/what-is-rate-limiting-how-it-works-and-implementation-techniques/"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.6.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.10" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="278-646" supportedStandardRef="OpenCRE"/>
            <standard ref="4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="623-550" supportedStandardRef="OpenCRE"/>
            <standard ref="8.1.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.5.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="862-452" supportedStandardRef="OpenCRE"/>
            <standard ref="AC-17 Remote Access" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-18 Wireless Access" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-3 Information Exchange" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-9 Internal System Connections" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1: A baseline of network operations and expected data flows for users and systems is established and managed" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="DE.CM-1: The network is monitored to detect potential cybersecurity events" supportedStandardRef="nist-csf"/>
            <standard ref="Documented operating procedures" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Executable Denylisting" supportedStandardRef="D3FEND"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="ID.AM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-3: Organizational communication and data flows are mapped" supportedStandardRef="nist-csf"/>
            <standard ref="Information security for use of cloud services" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Infrastructure and Virtualization Security Policy and Procedures" supportedStandardRef="cloud-control-matrix"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Opt-Out Preference Signals (c)(1)" supportedStandardRef="ccpa"/>
            <standard ref="Opt-Out Preference Signals (c)(2)" supportedStandardRef="ccpa"/>
            <standard ref="Opt-Out Preference Signals (g)" supportedStandardRef="ccpa"/>
            <standard ref="PR.AA-05" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AC-3: Remote access is managed" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-2: Data-in-transit is protected" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-4: Adequate capacity to ensure availability is maintained" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IR-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.IR-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PT-4: Communications and control networks are protected" supportedStandardRef="nist-csf"/>
            <standard ref="Requests to Limit Use and Disclosure of Sensitive Personal Information (m)(7)" supportedStandardRef="ccpa"/>
            <standard ref="SC-11 Trusted Path" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-16 Transmission of Security and Privacy Attributes" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-26 Decoys" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-30 Concealment and Misdirection" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-35 External Malicious Code Identification" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-36 Distributed Processing and Storage" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-37 Out-of-band Channels" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-38 Operations Security" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-42 Sensor Capability and Data" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-43 Usage Restrictions" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-46 Cross Domain Policy Enforcement" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-47 Alternate Communications Paths" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-48 Sensor Relocation" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-5 DENIAL-OF-SERVICE PROTECTION" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-50 Software-enforced Separation and Policy Enforcement" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8 TRANSMISSION CONFIDENTIALITY AND INTEGRITY" supportedStandardRef="NIST 800-53"/>
            <standard ref="Separation of development, test and production environments" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Verification for Password-Protected Accounts (a)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Password-Protected Accounts (b)" supportedStandardRef="ccpa"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1022 - Restrict File and Directory Permissions||ATT&amp;CK Enterprise - M1031 - Network Intrusion Prevention||ATT&amp;CK Enterprise - M1035 - Limit Access to Resource Over Network"/>
            <customField ref="SF-C-SCOPE" value="Network Security||Operational Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SC-5 DENIAL-OF-SERVICE PROTECTION||SC-43 Usage Restrictions||AC-17 Remote Access"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-HARDENED-CONFIGURATION" name="Limit information leakage, e.g., via hardened configuration" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Limiting information leakage in your server-side web service, such as a REST API or a gRPC service, is crucial to protect sensitive information from being exposed through various channels like error messages, system logs, or misconfigurations. Follow these actionable steps to harden your service's configuration against unintended data exposure, suitable for developers without previous security experience:&lt;/p&gt;
&lt;strong&gt;Key Strategies to Limit Information Leakage:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Display minimalistic error messages that do not reveal internal details about the service's structure or state. Error messages should be generic enough to inform the user of the problem without disclosing sensitive information.&lt;/li&gt; &lt;li&gt;Alter default configurations immediately after service setup to ensure that security settings are optimized and not left at their less secure, default state.&lt;/li&gt; &lt;li&gt;Restrict access to the service and its logs strictly to authorized personnel. Ensure that administrative interfaces and log files are not accessible to unauthorized users.&lt;/li&gt; &lt;li&gt;Apply data masking techniques for outputs that may display sensitive information. This is especially important for personal or financial data to prevent direct exposure to unauthorized viewers.&lt;/li&gt; &lt;li&gt;Configure network settings and firewalls diligently to close off unnecessary open ports and correct misconfigured services that might inadvertently expose sensitive data.&lt;/li&gt; &lt;li&gt;Implement Content Security Policies (CSP) to restrict what resources can be loaded and executed by the service, reducing the risk of data leakage via XSS attacks or other vector exploits.&lt;/li&gt; &lt;li&gt;Manage file and directory permissions meticulously to prevent unauthorized access to files containing sensitive information. Only essential access rights should be granted, based on the principle of least privilege.&lt;/li&gt; &lt;li&gt;Encrypt sensitive data in transit and at rest. Utilizing strong encryption methods ensures that, even if data is somehow accessed, it remains unintelligible without the decryption keys.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;Adhering to these steps not only enhances your web service's security posture but also aligns with good security practices recommended by leading security organizations, such as OWASP (Open Web Application Security Project). Regularly review and update your service's configurations to adapt to evolving security threats and protect against information leakage.&lt;/p&gt; </desc>
          <implementations/>
          <references>
            <reference name="A05:2021 â€“ Security Misconfiguration" url="https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"/>
          </references>
          <standards>
            <standard ref="1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.2.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.2.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.2.8" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="1.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="10.6.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="10.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="11.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.10" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.5" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="247-250" supportedStandardRef="OpenCRE"/>
            <standard ref="3.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="4.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="486-813" supportedStandardRef="OpenCRE"/>
            <standard ref="5.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.4.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.4.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.5.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.5.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="6.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="626-250" supportedStandardRef="OpenCRE"/>
            <standard ref="7.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.2.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="7.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.1.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.5.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.10" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="AC-1 POLICY AND PROCEDURES" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-20 Use of External Systems" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-21 Information Sharing" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-22 Publicly Accessible Content" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-23 Data Mining Protection" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-4 Information Flow Enforcement" supportedStandardRef="NIST 800-53"/>
            <standard ref="Access control" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Access rights" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Achitecture mitigation" supportedStandardRef="SAMM"/>
            <standard ref="Achitecture validation" supportedStandardRef="SAMM"/>
            <standard ref="Application Configuration Hardening" supportedStandardRef="D3FEND"/>
            <standard ref="Authorized Agents (d)" supportedStandardRef="ccpa"/>
            <standard ref="CM-2 BASELINE CONFIGURATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="CM-6 Configuration Settings" supportedStandardRef="NIST 800-53"/>
            <standard ref="DE.AE-1: A baseline of network operations and expected data flows for users and systems is established and managed" supportedStandardRef="nist-csf"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Domain Trust Policy" supportedStandardRef="D3FEND"/>
            <standard ref="File Content Rules" supportedStandardRef="D3FEND"/>
            <standard ref="GV.OC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OV-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.SC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="General Rules Regarding Verification (c)(1)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(2)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(3)" supportedStandardRef="ccpa"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="ID.AM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-04" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-3: Organizational communication and data flows are mapped" supportedStandardRef="nist-csf"/>
            <standard ref="ID.AM-4: External information systems are catalogued" supportedStandardRef="nist-csf"/>
            <standard ref="ID.GV-4: Governance and risk management processes address cybersecurity risks" supportedStandardRef="nist-csf"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.RA-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Identity &amp; Access Management" supportedStandardRef="cloud-control-matrix"/>
            <standard ref="Identity management" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Inbound Traffic Filtering" supportedStandardRef="D3FEND"/>
            <standard ref="Information access restriction" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Job Function Access Pattern Analysis" supportedStandardRef="D3FEND"/>
            <standard ref="Local Account Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Methods for Submitting Requests to Delete Requests to Correct and Requests to Know (c)" supportedStandardRef="ccpa"/>
            <standard ref="Methods for Submitting Requests to Delete Requests to Correct and Requests to Know (d)" supportedStandardRef="ccpa"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Notice at Collection of Personal Information (a)(b)(c)" supportedStandardRef="ccpa"/>
            <standard ref="Notice at Collection of Personal Information (g)(1)" supportedStandardRef="ccpa"/>
            <standard ref="Notice at Collection of Personal Information (g)(2)" supportedStandardRef="ccpa"/>
            <standard ref="Opt-Out Preference Signals (c)(6)" supportedStandardRef="ccpa"/>
            <standard ref="Opt-Out Preference Signals (d)" supportedStandardRef="ccpa"/>
            <standard ref="Outbound Traffic Filtering" supportedStandardRef="D3FEND"/>
            <standard ref="PM-10 Authorization Process" supportedStandardRef="NIST 800-53"/>
            <standard ref="PR.AA-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-05" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AC-3: Remote access is managed" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4: Access permissions and authorizations are managed, incorporating the principles of least privilege and separation of duties" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-5: Network integrity is protected (e.g., network segregation, network segmentation)" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-5: Protections against data leaks are implemented" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-6: Integrity checking mechanisms are used to verify software, firmware, and information integrity" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-7: The development and testing environment(s) are separate from the production environment" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-1: A baseline configuration of information technology/industrial control systems is created and maintained incorporating security principles (e.g. concept of least functionality)" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IP-8: Effectiveness of protection technologies is shared" supportedStandardRef="nist-csf"/>
            <standard ref="PR.IR-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PW.2.1" supportedStandardRef="nist-ssdf"/>
            <standard ref="Personal Information Security Breaches (a)(1)(2)" supportedStandardRef="ccpa"/>
            <standard ref="Privacy Policy (e)(1)(I)" supportedStandardRef="ccpa"/>
            <standard ref="Privacy Policy (e)(2)" supportedStandardRef="ccpa"/>
            <standard ref="Privacy Policy (e)(3)(E)" supportedStandardRef="ccpa"/>
            <standard ref="Privacy Policy (e)(3)(G)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Correct (k)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Delete (b)(3)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Limit Use and Disclosure of Sensitive Personal Information (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (d)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (f)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (g)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (h)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (j)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Opt-Out of Sale/Sharing (k)" supportedStandardRef="ccpa"/>
            <standard ref="Resource Access Pattern Analysis" supportedStandardRef="D3FEND"/>
            <standard ref="Restrictions on the Collection and Use of Personal Information (b)(5)" supportedStandardRef="ccpa"/>
            <standard ref="Restrictions on the Collection and Use of Personal Information (c)(3)" supportedStandardRef="ccpa"/>
            <standard ref="SI-6 Security and Privacy Function Verification" supportedStandardRef="NIST 800-53"/>
            <standard ref="SI-7 Software, Firmware, and Information Integrity" supportedStandardRef="NIST 800-53"/>
            <standard ref="Security Misconfiguration" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="Segregation of duties" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Service Providers and Contractors (a)(5)" supportedStandardRef="ccpa"/>
            <standard ref="User Data Transfer Analysis" supportedStandardRef="D3FEND"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1041 - Encrypt Sensitive Information||ATT&amp;CK Enterprise - M1054 - Software Configuration"/>
            <customField ref="SF-C-SCOPE" value="Application Security||Data Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SI-7 Software, Firmware, and Information Integrity||SI-6 Security and Privacy Function Verification||AC-4 Information Flow Enforcement||CM-6 Configuration Settings"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-TLS-SERVICE" name="Secure communication channels, e.g., use TLS" issueId="" issueLink="" platform="" cost="0" risk="53" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Securing communication channels is critical for any server-side web service, such as REST APIs and gRPC services, to protect data from eavesdropping, tampering, and unauthorized access. Implementing Transport Layer Security (TLS) is a foundational step towards achieving this goal. Here are actionable steps to ensure secure communication through TLS, suitable for developers without previous security experience:&lt;/p&gt;
&lt;strong&gt;Steps for Implementing TLS:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Adopt the latest version of TLS (e.g., TLS 1.2 or higher) to leverage advanced security features and address vulnerabilities found in older versions.&lt;/li&gt; &lt;li&gt;Ensure digital certificates used for TLS are properly managed. Certificates should be signed by a trusted Certificate Authority (CA), kept up-to-date, and renewed regularly.&lt;/li&gt; &lt;li&gt;Select strong and secure cipher suites for the service configuration, which are essential for providing effective encryption, key exchange, and authentication.&lt;/li&gt; &lt;li&gt;Enable Perfect Forward Secrecy (PFS) to guarantee that each session's encryption keys are unique and cannot be compromised even if the long-term keys are.&lt;/li&gt; &lt;li&gt;Implement HTTP Strict Transport Security (HSTS) to force web browsers to establish connections only over HTTPS, minimizing the risk of downgrade attacks.&lt;/li&gt; &lt;li&gt;Create a protocol for continuous monitoring and auditing of your TLS settings to quickly identify and fix any vulnerabilities or configuration errors.&lt;/li&gt; &lt;li&gt;For services requiring authentication, configure TLS to request and validate client certificates during the handshake, enhancing mutual authentication.&lt;/li&gt; &lt;li&gt;Practice secure key management to protect the confidentiality and integrity of cryptographic keys involved in the TLS process.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;By following these guidelines and incorporating security best practices into your development and deployment processes, you can significantly strengthen the security of your web service. Regular updates and audits of your TLS configuration, in line with recommendations from security experts and organizations such as the Open Web Application Security Project (OWASP), are crucial for maintaining a high level of protection against emerging threats.&lt;/p&gt; </desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="1.1.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.10" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="12.3.8" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.9" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="170-772" supportedStandardRef="OpenCRE"/>
            <standard ref="2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.2.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="278-646" supportedStandardRef="OpenCRE"/>
            <standard ref="3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.1.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.5.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.6.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="A3.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="AC-17 Remote Access" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-18 Wireless Access" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-3 Information Exchange" supportedStandardRef="NIST 800-53"/>
            <standard ref="CA-9 Internal System Connections" supportedStandardRef="NIST 800-53"/>
            <standard ref="Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="Cryptography, Encryption &amp; Key Management" supportedStandardRef="cloud-control-matrix"/>
            <standard ref="DE.AE-1: A baseline of network operations and expected data flows for users and systems is established and managed" supportedStandardRef="nist-csf"/>
            <standard ref="Executable Denylisting" supportedStandardRef="D3FEND"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="ID.AM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.AM-3: Organizational communication and data flows are mapped" supportedStandardRef="nist-csf"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Opt-Out Preference Signals (c)(2)" supportedStandardRef="ccpa"/>
            <standard ref="Opt-Out Preference Signals (g)" supportedStandardRef="ccpa"/>
            <standard ref="PR.AA-05" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AC-3: Remote access is managed" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-2: Data-in-transit is protected" supportedStandardRef="nist-csf"/>
            <standard ref="PR.PT-4: Communications and control networks are protected" supportedStandardRef="nist-csf"/>
            <standard ref="SC-11 Trusted Path" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-12 CRYPTOGRAPHIC KEY ESTABLISHMENT AND MANAGEMENT" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-13 Cryptographic Protection" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-16 Transmission of Security and Privacy Attributes" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17 Public Key Infrastructure Certificates" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-8 TRANSMISSION CONFIDENTIALITY AND INTEGRITY" supportedStandardRef="NIST 800-53"/>
            <standard ref="Use of cryptography" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Verification for Password-Protected Accounts (a)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Password-Protected Accounts (b)" supportedStandardRef="ccpa"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1041 - Encrypt Sensitive Information||ATT&amp;CK Enterprise - M1047 - Audit||ATT&amp;CK Enterprise - M1056 - Pre-compromise"/>
            <customField ref="SF-C-SCOPE" value="Data Security||Network Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SC-13 Cryptographic Protection||SC-12 CRYPTOGRAPHIC KEY ESTABLISHMENT AND MANAGEMENT||SC-17 Public Key Infrastructure Certificates||SC-8 TRANSMISSION CONFIDENTIALITY AND INTEGRITY"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="CWE-89-PREPARED" name="Use prepared statements for all database queries" issueId="" issueLink="" platform="" cost="0" risk="31" state="Recommended" owner="ddoughty@iriusrisk.com" library="IR-Dataflows" source="DATAFLOW_RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Database injection attacks, such as SQLi (SQL Injection) rely on sending tainted client-side data which is used in dynamic SQL queries on the server-side in an unsafe manner. Creating queries by concatenating strings using untrusted data may result in&amp;nbsp;vulnerable code;&amp;nbsp;for example, an attacker appending an 'OR' statement to the customerName parameter in order to bypass checks and retrieve additional data from the database:&lt;/p&gt;&lt;p&gt;
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;String query = "SELECT user FROM users WHERE name = '"&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&amp;nbsp;+ request.getParameter("customerName")+"'";&lt;/p&gt;&lt;p&gt;The use of prepared statements with carefully controlled and validated input conditions mitigates SQLi and related attacks.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Database queries should always be executed using prepared statements or parameterized queries.&lt;/li&gt;&lt;li&gt;Queries through an Object-Relational mapper should also be treated as tainted input, and again executed using prepared statements to mitigate the threat.&lt;/li&gt;&lt;/ul&gt;</desc>
          <implementations>
            <implementation platform="C#">
              <desc>ClN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgYWNjb3VudF9iYWxhbmNlIEZST00gdXNlcl9kYXRhIFdIRVJFIHVzZXJfbmFtZSA9ID8iOwp0cnkgewogCU9sZURiQ29tbWFuZCBjb21tYW5kID0gbmV3IE9sZURiQ29tbWFuZChxdWVyeSwgY29ubmVjdGlvbik7CiAJY29tbWFuZC5QYXJhbWV0ZXJzLkFkZChuZXcgT2xlRGJQYXJhbWV0ZXIoImN1c3RvbWVyTmFtZSIsIEN1c3RvbWVyTmFtZSBOYW1lLlRleHQpKTsKIAlPbGVEYkRhdGFSZWFkZXIgcmVhZGVyID0gY29tbWFuZC5FeGVjdXRlUmVhZGVyKCk7IAkKIH0gY2F0Y2ggKE9sZURiRXhjZXB0aW9uIHNlKSB7CiAJLy8gZXJyb3IgaGFuZGxpbmcKIH0g</desc>
            </implementation>
          </implementations>
          <references>
            <reference name="OSA SI-01 System And Information Integrity Policy And Procedures" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/39-08_02_SI-01"/>
            <reference name="OSA SI-10 Information Accuracy, Completeness, Validity, And Authenticity" url="https://www.opensecurityarchitecture.org/cms/library/08_02_control-catalogue/48-08_02_SI-10"/>
          </references>
          <standards>
            <standard ref="1" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="12.2.1" supportedStandardRef="ISO/IEC 27002:2013"/>
            <standard ref="14" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="15" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="16" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="17" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="18" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="19" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="24" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="31" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-1"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-2"/>
            <standard ref="5.3.4" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="6" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="8" supportedStandardRef="csa-api-security-guidelines"/>
            <standard ref="cwe-top-25" supportedStandardRef="cwe-top-25-dangerous-weaknesses"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value=""/>
            <customField ref="SF-C-SCOPE" value=""/>
            <customField ref="SF-C-STANDARD-BASELINE" value=""/>
            <customField ref="SF-C-STANDARD-SECTION" value=""/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps>&lt;p&gt;For inputs receiving data that is subsequently added to - or used - in an SQL query:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Ensure SQL meta-characters are identified and properly escaped or encoded.&lt;/li&gt;&lt;li&gt;Data should be used in the form of parameterized SQL queries, rather than dynamically generated queries.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;To test data validation:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Review the code processing potentially tainted user input to SQL queries and confirm the data is executed only in pre-prepared parameterized SQL queries.&lt;/li&gt;&lt;li&gt;Review the acceptable input criteria, and build test cases that deviate from it (invalid characters, lengths, ranges etc.)&lt;/li&gt;&lt;li&gt;Pass invalid input to the application and review error trapping and handling.&lt;/li&gt;&lt;li&gt;Where unexpected exceptions occur, the application may be vulnerable to attack.&lt;/li&gt;&lt;/ol&gt;</steps>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.049">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-SECRETS" name="Use secure methods to handle secrets and other sensitive information" issueId="" issueLink="" platform="" cost="1" risk="47" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Protecting secrets and other sensitive information is paramount for any server-side web service, including REST APIs and gRPC services, to prevent unauthorized access and data breaches. Follow these actionable steps to securely manage such critical data, suitable even for developers without prior security experience:&lt;/p&gt;
&lt;strong&gt;Secure Handling of Secrets and Sensitive Information:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Securely store sensitive data by avoiding plaintext storage of passwords and employing strong encryption mechanisms for all sensitive information.&lt;/li&gt; &lt;li&gt;Utilize secure credential vaults or management systems for centralizing the protection of sensitive data. These tools offer encryption, stringent access controls, and auditing capabilities to safeguard secrets.&lt;/li&gt; &lt;li&gt;Ensure the secure generation, storage, and transmission of API keys or tokens. Communicate over secure protocols like HTTPS to protect the integrity and confidentiality of these credentials.&lt;/li&gt; &lt;li&gt;Adopt a regular rotation policy for all secrets, such as passwords, API keys, and tokens, to mitigate the risk of old credentials being exploited.&lt;/li&gt; &lt;li&gt;Encrypt all secrets during transit between different components of your service, ensuring they are not exposed to eavesdropping or interception.&lt;/li&gt; &lt;li&gt;For password transmission, always use HTTPS and avoid including passwords in URL parameters. Implement secure password hashing and salting techniques to protect stored passwords.&lt;/li&gt; &lt;li&gt;Apply strict access control measures to limit access to sensitive information, adhering to the principle of least privilege. Ensure users and services have only the access necessary for their function.&lt;/li&gt; &lt;li&gt;Maintain sensitive configuration files securely and separately from the codebase to prevent accidental exposure. Avoid hardcoding secrets in source code.&lt;/li&gt; &lt;li&gt;Set up auditing and monitoring to quickly detect unauthorized attempts to access sensitive information and to ensure compliance with security policies.&lt;/li&gt; &lt;li&gt;When deploying services, carefully handle the transfer of secrets to production environments to prevent leakage or exposure during the deployment phase.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;By adhering to these guidelines and incorporating security best practices from authoritative sources like OWASP (Open Web Application Security Project), you can significantly enhance the security posture of your web service, protecting it and its users from potential threats.&lt;/p&gt; </desc>
          <implementations/>
          <references>
            <reference name="7 Best Methods for Protecting Sensitive Data" url="https://www.upguard.com/blog/protecting-sensitive-data"/>
          </references>
          <standards>
            <standard ref="12.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="12.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="170-772" supportedStandardRef="OpenCRE"/>
            <standard ref="2.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.2.7" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="2.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.3.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="3.5.1.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="633-428" supportedStandardRef="OpenCRE"/>
            <standard ref="7.1.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3.8" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.4.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.6.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="A3.2.6" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="A3.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="AC-7 UNSUCCESSFUL LOGON ATTEMPTS" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-8 SYSTEM USE NOTIFICATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-9 PREVIOUS LOGON NOTIFICATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="Account Locking" supportedStandardRef="D3FEND"/>
            <standard ref="Authentication information" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Authorized Agents (a)" supportedStandardRef="ccpa"/>
            <standard ref="Authorized Agents (d)" supportedStandardRef="ccpa"/>
            <standard ref="Consumers Less Than Under 13 Years of Age (c)" supportedStandardRef="ccpa"/>
            <standard ref="Cryptographic Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="Cryptography, Encryption &amp; Key Management" supportedStandardRef="cloud-control-matrix"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OV-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.SC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="General Rules Regarding Verification (a)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(1)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(2)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (h)" supportedStandardRef="ccpa"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1 Policy and Procedures" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10 Adaptive Authentication" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-12 Identity Proofing" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-2 Identification and Authentication (organizational Users)" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-3 Device Identification and Authentication" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-4 Identifier Management" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-5 AUTHENTICATOR MANAGEMENT" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-8 Identification and Authentication (non-organizational Users)" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="Local Account Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Multi-factor Authentication" supportedStandardRef="D3FEND"/>
            <standard ref="PR.AA-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AC-1: Identities and credentials are issued, managed, verified, revoked, and audited for authorized devices, users and processes" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6: Identities are proofed and bound to credentials and asserted in interactions" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7: Users, devices, and other assets are authenticated (e.g., single-factor, multi-factor) commensurate with the risk of the transaction (e.g., individuals' security and privacy risks and other organizational risks)" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Requests to Correct (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Know (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Know (b)" supportedStandardRef="ccpa"/>
            <standard ref="SC-12 CRYPTOGRAPHIC KEY ESTABLISHMENT AND MANAGEMENT" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-13 Cryptographic Protection" supportedStandardRef="NIST 800-53"/>
            <standard ref="SC-17 Public Key Infrastructure Certificates" supportedStandardRef="NIST 800-53"/>
            <standard ref="Secure authentication" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Use of cryptography" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Verification for Non-Accountholders (b)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Non-Accountholders (c)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Password-Protected Accounts (a)" supportedStandardRef="ccpa"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1041 - Encrypt Sensitive Information||ATT&amp;CK Enterprise - M1043 - Credential Access Protection||ATT&amp;CK ICS - M0809 - Operational Information Confidentiality"/>
            <customField ref="SF-C-SCOPE" value="Data Security||Operational Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SC-13 Cryptographic Protection||IA-1 Policy and Procedures||IA-3 Device Identification and Authentication"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-STRONG-AUTHENTICATION" name="Use strong authentication mechanisms" issueId="" issueLink="" platform="" cost="0" risk="51" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Secure your server-side web service, be it a REST API or a gRPC service, by implementing robust authentication mechanisms. This will ensure that only authorized users or systems can access and interact with your service. Here are actionable steps that developers, even those without prior security knowledge, can follow to strengthen authentication:&lt;/p&gt;
&lt;strong&gt;Key Steps to Enhance Authentication:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Adopt multi-factor authentication (MFA). For APIs, combine traditional methods like API keys or client credentials with dynamic security tokens that change periodically, adding an extra layer of security.&lt;/li&gt; &lt;li&gt;Utilize industry-standard authentication and authorization protocols such as OAuth and OpenID Connect. These protocols provide a secure and standardized way for clients to request and use access tokens effectively safeguarding access to your services.&lt;/li&gt; &lt;li&gt;Implement strong password policies. Enforce rules on password complexity, such as minimum length, inclusion of uppercase and lowercase letters, numbers, and symbols, and mandate regular password updates.&lt;/li&gt; &lt;li&gt;Follow secure session management practices. Use secure, randomly generated session identifiers, enforce session expiration after a period of inactivity, and protect against session hijacking attacks.&lt;/li&gt; &lt;li&gt;Consider adaptive authentication methods that gauge the authentication requirements based on context, like the user's location, device, or the sensitivity of the operation being requested.&lt;/li&gt; &lt;li&gt;For machine-to-machine interactions or when strong client authentication is necessary, use client certificate authentication. This ensures that only clients with a valid certificate can establish connections.&lt;/li&gt; &lt;li&gt;Deploy account lockout mechanisms to lock or suspend user accounts after several unsuccessful login attempts, protecting against brute-force attacks.&lt;/li&gt; &lt;li&gt;Ensure secure transmission of credentials using encrypted channels, preferably HTTPS, to protect data in transit.&lt;/li&gt; &lt;li&gt;Maintain secure user account management. Regularly review user access privileges, promptly deactivate inactive accounts, and immediately revoke access for users who leave the organization or whose accounts are compromised.&lt;/li&gt; &lt;li&gt;Enable detailed logging and monitoring of authentication attempts to identify and investigate suspicious activities promptly.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;Following these steps and adhering to established security practices, such as those recommended by the Open Web Application Security Project (OWASP), can significantly mitigate unauthorized access and potential security threats to your web service.&lt;/p&gt; </desc>
          <implementations/>
          <references>
            <reference name="Authentication Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="12.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="128-128" supportedStandardRef="OpenCRE"/>
            <standard ref="2.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="6.4.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="633-428" supportedStandardRef="OpenCRE"/>
            <standard ref="7.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.1.4" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="7.3.2" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.1" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.2.2" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.3.8" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.4.3" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="8.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.6" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="8.7" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="9.3" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="A3.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="AC-3 ACCESS ENFORCEMENT" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-7 UNSUCCESSFUL LOGON ATTEMPTS" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-8 SYSTEM USE NOTIFICATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="AC-9 PREVIOUS LOGON NOTIFICATION" supportedStandardRef="NIST 800-53"/>
            <standard ref="Account Locking" supportedStandardRef="D3FEND"/>
            <standard ref="Authentication information" supportedStandardRef="iso-27002-2022"/>
            <standard ref="Authorized Agents (a)" supportedStandardRef="ccpa"/>
            <standard ref="Authorized Agents (d)" supportedStandardRef="ccpa"/>
            <standard ref="Consumers Less Than Under 13 Years of Age (c)" supportedStandardRef="ccpa"/>
            <standard ref="DE.CM-09" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Executable Allowlisting" supportedStandardRef="D3FEND"/>
            <standard ref="Executable Denylisting" supportedStandardRef="D3FEND"/>
            <standard ref="GV.OC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.OV-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.PO-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="GV.SC-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="General Rules Regarding Verification (a)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(1)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (c)(2)" supportedStandardRef="ccpa"/>
            <standard ref="General Rules Regarding Verification (h)" supportedStandardRef="ccpa"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="IA-1 Policy and Procedures" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-10 Adaptive Authentication" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-12 Identity Proofing" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-2 Identification and Authentication (organizational Users)" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-3 Device Identification and Authentication" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-4 Identifier Management" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-5 AUTHENTICATOR MANAGEMENT" supportedStandardRef="NIST 800-53"/>
            <standard ref="IA-8 Identification and Authentication (non-organizational Users)" supportedStandardRef="NIST 800-53"/>
            <standard ref="ID.IM-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="ID.IM-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="Identification and Authentication Failures" supportedStandardRef="owasp-top-10-2021"/>
            <standard ref="Local Account Monitoring" supportedStandardRef="D3FEND"/>
            <standard ref="Low" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Mandatory Access Control" supportedStandardRef="D3FEND"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Multi-factor Authentication" supportedStandardRef="D3FEND"/>
            <standard ref="PR.AA-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-02" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-03" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AA-05" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.AC-1: Identities and credentials are issued, managed, verified, revoked, and audited for authorized devices, users and processes" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-4: Access permissions and authorizations are managed, incorporating the principles of least privilege and separation of duties" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-6: Identities are proofed and bound to credentials and asserted in interactions" supportedStandardRef="nist-csf"/>
            <standard ref="PR.AC-7: Users, devices, and other assets are authenticated (e.g., single-factor, multi-factor) commensurate with the risk of the transaction (e.g., individuals' security and privacy risks and other organizational risks)" supportedStandardRef="nist-csf"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.IR-01" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.PT-3: The principle of least functionality is incorporated by configuring systems to provide only essential capabilities" supportedStandardRef="nist-csf"/>
            <standard ref="Personal Information Security Breaches (a)(1)(2)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Correct (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Know (a)" supportedStandardRef="ccpa"/>
            <standard ref="Requests to Know (b)" supportedStandardRef="ccpa"/>
            <standard ref="Secure authentication" supportedStandardRef="iso-27002-2022"/>
            <standard ref="System Call Filtering" supportedStandardRef="D3FEND"/>
            <standard ref="Verification for Non-Accountholders (b)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Non-Accountholders (c)" supportedStandardRef="ccpa"/>
            <standard ref="Verification for Password-Protected Accounts (a)" supportedStandardRef="ccpa"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1018 - User Account Management||ATT&amp;CK Enterprise - M1027 - Password Policies||ATT&amp;CK Enterprise - M1032 - Multi-factor Authentication"/>
            <customField ref="SF-C-SCOPE" value="Application Security||Operational Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="AC-3 ACCESS ENFORCEMENT||IA-2 Identification and Authentication (organizational Users)||IA-8 Identification and Authentication (non-organizational Users)"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-VALIDATE-SERIALIZED" name="Validate and sanitize serialized data" issueId="" issueLink="" platform="" cost="0" risk="46" state="Recommended" owner="ddoughty@iriusrisk.com" library="service-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Validating and sanitizing serialized data is essential for maintaining the integrity and security of data within your server-side web service, including REST APIs and gRPC services. These measures are crucial to prevent injection attacks, data tampering, and other vulnerabilities associated with serialization and deserialization processes. Follow these actionable steps to secure your data serialization practices:&lt;/p&gt;
&lt;strong&gt;Guidelines for Secure Serialization and Deserialization:&lt;/strong&gt;
&lt;ul&gt; &lt;li&gt;Conduct rigorous input validation on all serialized data. Ensure that it matches the expected structure, format, and content. Reject any data that fails to meet these predefined standards.&lt;/li&gt; &lt;li&gt;Implement schema validation for serialized data. Utilize tools that can check incoming data against a defined schema to confirm its validity and structure.&lt;/li&gt; &lt;li&gt;Create a whitelist of permissible values for each field within your serialized data. Disallow any data containing values not included in this list, mitigating the risk of harmful content injections.&lt;/li&gt; &lt;li&gt;Impose restrictions on the size and length of serialized data. This limits potential attack vectors by reducing the amount of data an attacker can manipulate.&lt;/li&gt; &lt;li&gt;Apply sanitization techniques to serialized data. Remove or alter characters or sequences that could be exploited for malicious purposes.&lt;/li&gt; &lt;li&gt;Select secure and regularly updated libraries for data serialization and deserialization. Libraries like Jackson for Java offer built-in security features and are actively maintained to address new vulnerabilities.&lt;/li&gt; &lt;li&gt;Incorporate digital signatures with serialized data. This step verifies the authenticity and integrity of the data, ensuring it has not been altered in transit.&lt;/li&gt; &lt;li&gt;Establish a robust logging and monitoring system. Keep detailed records of deserialization events and anomalies to detect and respond to potential security incidents swiftly.&lt;/li&gt; &lt;/ul&gt;
&lt;p&gt;By adhering to these steps and integrating security best practices into your development process, you can significantly enhance the safety of your web service. Continuously update your knowledge and tools based on the latest security research and recommendations from authoritative sources, such as OWASP (Open Web Application Security Project), to protect against evolving threats.&lt;/p&gt; </desc>
          <implementations/>
          <references>
            <reference name="Deserialization Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html"/>
          </references>
          <standards>
            <standard ref="11.5" supportedStandardRef="PCI-DSS-v3.2.1"/>
            <standard ref="503-455" supportedStandardRef="OpenCRE"/>
            <standard ref="High" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="Moderate" supportedStandardRef="fedramp-high-baseline"/>
            <standard ref="PR.DS-10" supportedStandardRef="NIST CSF v2.0"/>
            <standard ref="PR.DS-6: Integrity checking mechanisms are used to verify software, firmware, and information integrity" supportedStandardRef="nist-csf"/>
            <standard ref="SI-10 INFORMATION INPUT VALIDATION" supportedStandardRef="NIST 800-53"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1038 - Execution Prevention||ATT&amp;CK ICS - M0818 - Validate Program Inputs"/>
            <customField ref="SF-C-SCOPE" value="Application Security||Data Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="NIST 800-53 v5"/>
            <customField ref="SF-C-STANDARD-SECTION" value="SI-10 INFORMATION INPUT VALIDATION"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:00.799">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="UC-STRIDE-DENIAL-OF-SERVICE" name="Denial of Service" desc="Denial of Service attacks aim to disrupt the availability of services or resources to legitimate users. Attackers overwhelm systems with excessive traffic or requests, causing them to become unresponsive or unavailable to users." library="service-side-components">
          <threats>
            <threat ref="T-SERVICE-ABUSE" name="Attackers abuse the service, e.g., lack of rate limiting" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="service-side-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General Threat Description&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;When a server-side web service, such as a REST API or a gRPC service, lacks adequate rate limiting, it becomes vulnerable to various forms of abuse. Rate limiting is crucial for controlling the frequency of client requests to prevent overuse and ensure fair resource allocation among users. Without proper rate-limiting controls, attackers can inundate the service with a high volume of requests, potentially leading to denial of service, resource exhaustion, and performance degradation. This vulnerability can also be exploited to facilitate other attack types, such as brute force attacks aimed at guessing user credentials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The primary threat agents in this scenario are malicious actors or bots designed to exploit weaknesses in web services. Attack vectors include automated scripts or botnets that send a large number of requests in a short period, overwhelming the service. These actors may seek to disrupt the service availability, gain unauthorized access, or exploit the service for other malicious purposes. The lack of rate limiting makes it easier for such actors to carry out their attacks without being detected or throttled by the system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The impacts of failing to implement adequate rate limiting can be severe. It can lead to service degradation, where legitimate users experience slow response times or are unable to access the service altogether. In extreme cases, it can result in a complete denial of service, making the web service unavailable. Furthermore, it can compromise the security of the service by facilitating brute force and other exploitation techniques, potentially leading to unauthorized access and data breaches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An attacker deploys a botnet to send thousands of login requests per minute to a web service that lacks proper rate limiting. The service becomes overwhelmed with the volume of requests, leading to resource exhaustion and significant performance degradation. Legitimate users are unable to access the service, and the attacker may eventually bypass authentication controls through brute force attacks, gaining unauthorized access to sensitive information.&lt;/p&gt; </desc>
              <riskRating confidentiality="1" integrity="50" availability="50" easeOfExploitation="75"/>
              <references>
                <reference name="CWE-400: Uncontrolled Resource Consumption" url="https://cwe.mitre.org/data/definitions/400.html"/>
                <reference name="OWASP API Security Top 10 - Lack of Resources &amp; Rate Limiting" url="https://owasp.org/API-Security/editions/2019/en/0xa4-lack-of-resources-and-rate-limiting/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-770">
                  <countermeasures>
                    <countermeasure ref="C-SERVICE-RESTRICTIONS" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-SERVICE-RESTRICTIONS" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1110 - Brute Force||ATT&amp;CK Enterprise - T1498 - Network Denial of Service||ATT&amp;CK Enterprise - T1499 - Endpoint Denial of Service||ATT&amp;CK Enterprise - TA0040 - Impact"/>
                <customField ref="SF-T-STRIDE-LM" value="Denial of Service"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-ELEVATION-OF-PRIVILEGE" name="Elevation of Privilege" desc="Elevation of privilege involves an attacker gaining higher levels of access or permissions than intended. By exploiting vulnerabilities, attackers can escalate their privileges within a system to perform unauthorized actions or access sensitive data." library="service-side-components">
          <threats>
            <threat ref="T-AUTHENTICATION-BYPASS" name="Attackers bypass authentication and gain unauthorized access" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="service-side-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General Threat Description&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Attackers exploiting weaknesses in the authentication mechanisms of a server-side web service, such as a REST API or a gRPC service, pose a significant security threat. Authentication bypass occurs when attackers find ways to circumvent authentication processes, allowing them to impersonate legitimate users or access the service without authorization. This threat can arise from various vulnerabilities, including inadequate access controls, the use of weak or default credentials, insecure session management, and other software flaws that may be exploited through injection attacks or other techniques.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The threat agents in this scenario include cybercriminals, malicious insiders, or automated bots that specifically target authentication mechanisms to gain unauthorized access. These agents might use various attack vectors, such as phishing to steal credentials, exploiting known vulnerabilities in authentication mechanisms, session hijacking, or even using previously leaked credentials obtained from other breaches (credential stuffing).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An authentication bypass can lead to severe impacts, including unauthorized access to sensitive data, data manipulation or theft, and potentially gaining elevated privileges within the system. Such incidents can result in financial loss, reputational damage, and legal consequences for the affected organization. Moreover, they compromise the confidentiality, integrity, and availability of the service, affecting both the service provider and its users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An attacker discovers a vulnerability in the session management of a web service, allowing them to hijack an active session of a legitimate user. By exploiting this weakness, the attacker gains unauthorized access to the user's account without needing to bypass the login credentials. In another scenario, an attacker uses a SQL injection flaw in the login form to bypass authentication checks, granting them access to restricted areas of the web service that contain sensitive user data.&lt;/p&gt; </desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references>
                <reference name="Broken Access Control: Attack Examples and 4 Defensive Measures" url="https://brightsec.com/blog/broken-access-control-attack-examples-and-4-defensive-measures/"/>
                <reference name="OWASP Top 10:2021 - Identification and Authentication Failures" url="https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-284">
                  <countermeasures>
                    <countermeasure ref="C-STRONG-AUTHENTICATION" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-STRONG-AUTHENTICATION" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1556 - Modify Authentication Process||ATT&amp;CK Enterprise - TA0001 - Initial Access||ATT&amp;CK Enterprise - TA0005 - Defense Evasion||ATT&amp;CK Enterprise - TA0006 - Credential Access||ATT&amp;CK Enterprise - TA0008 - Lateral Movement"/>
                <customField ref="SF-T-STRIDE-LM" value="Elevation of Privilege||Lateral Movement"/>
              </customFields>
            </threat>
            <threat ref="T-INJECTION-SERVICE" name="Attackers craft and inject malicious content, e.g., SQLi" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="service-side-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General Threat Description&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Injection attacks occur when an attacker crafts and injects malicious content into a server-side web service, such as a REST API or a gRPC service, targeting its data interpreters. SQL Injection (SQLi) is a prevalent form of this threat, but the risk also extends to Command Injection, XML Injection, LDAP Injection, Cross-Site Scripting (XSS), and malicious file executions. These attacks exploit vulnerabilities in the application's input validation mechanisms, allowing the attacker to execute arbitrary commands, manipulate queries, or access unauthorized data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The primary threat agents include cybercriminals, hacking groups, and malicious insiders with knowledge of software vulnerabilities. Attack vectors involve the submission of crafted input data into web forms, URLs, or even in the headers of HTTP requests, aiming to manipulate the backend data processing systems. By exploiting vulnerabilities in how user input is processed and validated, attackers can execute unauthorized commands or queries within the application's underlying databases or operating systems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The impacts of injection attacks can be devastating, leading to data breaches, loss of data integrity, unauthorized access to sensitive information, and complete system compromise. These attacks can result in regulatory penalties, financial losses, and severe damage to an organization's reputation. Moreover, they can undermine user trust in the affected web service, with long-term consequences for user retention and business viability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In an SQL Injection attack, an attacker manipulates input fields or URL parameters to include malicious SQL code, which is then executed by the database server, leading to unauthorized data access. For example, by entering a specially crafted SQL query into a search box, the attacker could dump the database contents, including user credentials. In a Cross-Site Scripting attack, an attacker injects malicious scripts into web pages viewed by other users, stealing cookies or session tokens, thereby hijacking user sessions.&lt;/p&gt; </desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="75"/>
              <references>
                <reference name="Top 5 most dangerous injection attacks" url="https://www.invicti.com/blog/web-security/top-dangerous-injection-attacks/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-74">
                  <countermeasures>
                    <countermeasure ref="C-VALIDATION-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-VALIDATION-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1055 - Process Injection||ATT&amp;CK Enterprise - T1059 - Command and Scripting Interpreter||ATT&amp;CK Enterprise - T1190 - Exploit Public-Facing Application||ATT&amp;CK Enterprise - T1202 - Indirect Command Execution||ATT&amp;CK Enterprise - T1220 - XSL Script Processing||ATT&amp;CK Enterprise - T1221 - Template Injection||ATT&amp;CK Enterprise - TA0004 - Privilege Escalation||ATT&amp;CK Enterprise - TA0005 - Defense Evasion||ATT&amp;CK Mobile - T1516 - Input Injection"/>
                <customField ref="SF-T-STRIDE-LM" value="Elevation of Privilege"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-INFORMATION-DISCLOSURE" name="Information Disclosure" desc="Information disclosure occurs when sensitive data is exposed to unauthorized parties. This can include unauthorized access to confidential information, such as personal data, financial records, or intellectual property." library="service-side-components">
          <threats>
            <threat ref="T-LEAKAGE" name="Attackers access information, including secrets, through misconfiguration, errors, or logging" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="service-side-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General Threat Description&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Improper configurations, coding errors, and insecure logging practices in a server-side web service can lead to the unintentional exposure of sensitive information, including secrets like passwords, API keys, and both system and user data. Such vulnerabilities occur when the web service is not correctly secured, potentially due to oversight, lack of awareness, or misinterpretation of configuration settings. These vulnerabilities can allow attackers to access confidential information that should otherwise be protected, compromising the security and integrity of the web service and its users.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Threat agents in these scenarios can range from opportunistic hackers to sophisticated cybercriminals actively scanning for exposed information due to misconfigurations or errors. Attack vectors include exploiting publicly accessible directories, unprotected files, verbose error messages, and logs that contain sensitive information. Attackers may also use automated tools to scan for common misconfigurations or coding errors that lead to information exposure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The exposure of sensitive information through misconfiguration, coding errors, or insecure logging can have severe consequences, including data breaches, identity theft, and unauthorized access to protected resources. It can also lead to loss of customer trust, reputational damage, and potential legal and regulatory implications for the organization. The compromised information can further be used in more sophisticated attacks, amplifying the overall risk to the organization and its stakeholders.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An attacker discovers that a web service's error messages are verbose and include detailed stack traces, revealing database connection strings and API keys. Utilizing this information, the attacker gains unauthorized access to the database and third-party services. In another scenario, an attacker finds a misconfigured server that logs all HTTP requests, including URLs containing unencrypted passwords and tokens. By accessing these logs, the attacker harvests credentials and tokens to impersonate legitimate users or escalate privileges.&lt;/p&gt; </desc>
              <riskRating confidentiality="100" integrity="75" availability="25" easeOfExploitation="75"/>
              <references>
                <reference name="Information disclosure vulnerabilities and attacks in web applications" url="https://www.invicti.com/blog/web-security/information-disclosure-issues-attacks/"/>
                <reference name="Web Service Security Cheat Sheet" url="https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-668">
                  <countermeasures>
                    <countermeasure ref="C-SECRETS" mitigation="50"/>
                  </countermeasures>
                </weakness>
                <weakness ref="CWE-755">
                  <countermeasures>
                    <countermeasure ref="C-HARDENED-CONFIGURATION" mitigation="50"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-HARDENED-CONFIGURATION" mitigation="50"/>
                <countermeasure ref="C-SECRETS" mitigation="50"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1190 - Exploit Public-Facing Application||ATT&amp;CK Enterprise - T1213 - Data from Information Repositories||ATT&amp;CK Enterprise - T1552 - Unsecured Credentials||ATT&amp;CK Enterprise - T1567 - Exfiltration Over Web Service||ATT&amp;CK Enterprise - TA0001 - Initial Access||ATT&amp;CK Enterprise - TA0009 - Collection"/>
                <customField ref="SF-T-STRIDE-LM" value="Elevation of Privilege||Information Disclosure"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-TAMPERING" name="Tampering" desc="Tampering refers to unauthorized modification of data or systems. Attackers may alter data in transit or modify software components to introduce vulnerabilities or compromise the integrity of the system." library="service-side-components">
          <threats>
            <threat ref="T-DESERIALIZATION" name="Attackers leverage deserialization flaws to execute malicious code" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="service-side-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General Threat Description&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Deserialization flaws arise when a server-side web service deserializes untrusted or maliciously crafted data, leading to the execution of unintended code. This vulnerability is often rooted in design faults within the application or service-level serialization logic. Attackers exploit these flaws by sending crafted data that, once deserialized, executes malicious code within the service's environment. Such vulnerabilities are especially critical in web services that rely heavily on serialization to process complex data structures received from clients, making them susceptible to attacks aiming to disrupt or gain unauthorized control over the service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The primary threat agents exploiting deserialization flaws include external attackers and, in some cases, malicious insiders. These individuals craft and submit data that, when deserialized by the vulnerable service, leads to the execution of malicious code. Attack vectors can involve submitting crafted objects via web forms, API calls, or any other input mechanisms accepted by the web service. Exploits can be designed to target specific vulnerabilities in the service's deserialization logic, leveraging the application's own functionality to trigger malicious outcomes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The impacts of exploiting deserialization flaws can be severe and varied, ranging from unauthorized access and data exfiltration to denial-of-service attacks and the complete compromise of the underlying server. Such attacks can lead to the theft of sensitive information, execution of arbitrary code with server privileges, disruption of service availability, and potential escalation to further attacks on the network or other connected systems. The compromise of server functionality poses a significant risk to the integrity, confidentiality, and availability of the application and its data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An attacker crafts a malicious object that, when deserialized by the web service, executes a shell command on the server. This could enable the attacker to gain unauthorized access to the server, modify data, or create new administrative accounts for further exploitation. In another scenario, an attacker sends serialized data that triggers a denial-of-service attack when deserialized, exploiting a flaw in the application's error handling logic to exhaust system resources, leading to service downtime.&lt;/p&gt; </desc>
              <riskRating confidentiality="50" integrity="75" availability="50" easeOfExploitation="75"/>
              <references>
                <reference name="Insecure deserialization" url="https://portswigger.net/web-security/deserialization"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-502">
                  <countermeasures>
                    <countermeasure ref="C-VALIDATE-SERIALIZED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-VALIDATE-SERIALIZED" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1190 - Exploit Public-Facing Application||ATT&amp;CK Enterprise - T1203 - Exploitation for Client Execution||ATT&amp;CK Enterprise - T1210 - Exploitation of Remote Services||ATT&amp;CK Enterprise - TA0001 - Initial Access||ATT&amp;CK Enterprise - TA0002 - Execution"/>
                <customField ref="SF-T-STRIDE-LM" value="Elevation of Privilege||Tampering"/>
              </customFields>
            </threat>
            <threat ref="T-MITM" name="Attackers use Man-in-the-Middle (MitM) to intercept communications" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="service-side-components" editable="true">
              <desc>&lt;p&gt;&lt;strong&gt;General Threat Description&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Man-in-the-Middle (MitM) attacks pose a substantial threat to server-side web services, such as REST APIs or gRPC services. In this type of attack, an unauthorized actor intercepts, and potentially alters, the communications between two parties who believe they are directly communicating with each other. The attacker's ability to secretly listen in on or manipulate the data being exchanged makes MitM attacks particularly insidious. These attacks can occur at any stage of the data transmission process, exploiting vulnerabilities in the network or the encryption protocols used to secure the communication.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Threat agents carrying out MitM attacks can range from individual hackers to organized cybercriminal groups. These attackers exploit weaknesses in network security, deploy malicious software, or utilize compromised network devices to intercept communications. Techniques include network eavesdropping, DNS hijacking, ARP spoofing, and exploiting weak encryption protocols. In cases where communications are encrypted, attackers may employ SSL stripping to force a connection to revert to an unencrypted state, or use forged certificates to decrypt and access the data without raising suspicion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The impacts of MitM attacks can be severe, ranging from the breach of sensitive information, such as personal data and login credentials, to the manipulation of data in transit. This can lead to financial fraud, identity theft, unauthorized transactions, and the spread of malware. Additionally, the compromise of communication integrity and confidentiality can erode trust in the web service, resulting in reputational damage and potential legal implications for the service provider.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;An attacker conducts a DNS hijacking attack to intercept communications between users and a financial service's REST API. The attacker redirects users to a fraudulent version of the service, where login credentials are harvested. In another scenario, through ARP spoofing, an attacker intercepts and modifies the transaction details sent from a client to a web service, altering the payee information and redirecting funds to an account under the attacker's control.&lt;/p&gt; </desc>
              <riskRating confidentiality="100" integrity="100" availability="75" easeOfExploitation="75"/>
              <references>
                <reference name="Man in the Middle (MITM) Attacks" url="https://www.rapid7.com/fundamentals/man-in-the-middle-attacks/"/>
              </references>
              <weaknesses>
                <weakness ref="CWE-923">
                  <countermeasures>
                    <countermeasure ref="C-TLS-SERVICE" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-TLS-SERVICE" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1040 - Network Sniffing||ATT&amp;CK Enterprise - T1557 - Adversary-in-the-Middle||ATT&amp;CK Enterprise - T1584 - Compromise Infrastructure||ATT&amp;CK Enterprise - TA0006 - Credential Access||ATT&amp;CK Enterprise - TA0007 - Discovery||ATT&amp;CK Enterprise - TA0009 - Collection"/>
                <customField ref="SF-T-STRIDE-LM" value="Information Disclosure||Tampering"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="READ OR POST DATA" name="Read or Post data" desc="" library="IR-Dataflows">
          <threats>
            <threat ref="CAPEC-66" name="Attackers gain unauthorised access to data and/or systems through SQL Injection attacks" state="Expose" source="DATAFLOW_RULES" edited="false" owner="ddoughty@iriusrisk.com" library="IR-Dataflows" editable="true">
              <desc>&lt;p&gt;Successful SQL Injection attacks could lead to full compromise of the database or to a partial compromise of only the data visible to the application.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&amp;nbsp;&lt;/p&gt;&lt;p&gt;Typically, these types of attacks result in unauthorized disclosure of sensitive data, but can also be used to inject spurious data into the database or to drop tables and deny services to legitimate users.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="25"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-89">
                  <countermeasures>
                    <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="CWE-89-PREPARED" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value=""/>
                <customField ref="SF-T-STRIDE-LM" value=""/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
    <component uuid="9991e2ae-ea38-45a1-86fe-d5d4394075f3" diagramComponentId="6c1c59a2-9ff1-490c-a9b5-c8effaa3ca6e" ref="9cc61eb1-0ef9-4cb8-be94-68322712dd7d" name="Web UI" desc="" library="client-side-components" parentComponentRef="" componentDefinitionRef="CD-V2-WEB-UI">
      <tags/>
      <questions/>
      <trustZones>
        <trustZone ref="internet"/>
      </trustZones>
      <assets>
        <asset name="Customer Data" accessType="40"/>
      </assets>
      <settings/>
      <weaknesses>
        <weakness ref="CWE-1021" name="CWE-1021" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-1021: Improper Restriction of Rendered UI Layers or Frames
The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.
A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-1395" name="CWE-1395" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-1395: Dependency on Vulnerable Third-Party Component
The product has a dependency on a third-party component that contains one or more known vulnerabilities.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-287" name="CWE-287" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-287: Improper Authentication
When an actor claims to have a given identity, the product does not prove or insufficiently proves that the claim is correct.
</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
        <weakness ref="CWE-79" name="CWE-79" state="0" impact="75" issueId="" issueLink="">
          <desc>CWE:
CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')
The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users.

				</desc>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.175">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </weakness>
      </weaknesses>
      <countermeasures>
        <countermeasure ref="C-WEB-UI-C2" name="Employ frame-busting scripts, set X-Frame-Options header, and enforce Content Security Policy" issueId="" issueLink="" platform="" cost="1" risk="64" state="Recommended" owner="ddoughty@iriusrisk.com" library="client-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To protect your web application from clickjacking and other iframe-based attacks, follow these steps to implement frame-busting scripts, set the X-Frame-Options HTTP header, and enforce Content Security Policy (CSP). These measures will prevent your web pages from being embedded within iframes on unauthorized websites, mitigating potential attacks.&lt;/p&gt;
&lt;p&gt;Step 1: Employ Frame-Busting Scripts&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Add Frame-Busting JavaScript:&lt;/strong&gt; Within the &lt;strong&gt;&amp;lt;head&amp;gt;&lt;/strong&gt; section of your HTML pages, include a JavaScript snippet that prevents your website from being framed. A simple script like this can be used:&lt;/p&gt;
&lt;p&gt;This script checks if your page is being framed and, if so, redirects the top-level window to the current page, effectively "busting" out of the frame.&lt;/p&gt;
&lt;p&gt;Step 2: Set X-Frame-Options Header&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configure Web Server:&lt;/strong&gt; Depending on your web server, add a configuration to include the &lt;strong&gt;X-Frame-Options&lt;/strong&gt; HTTP header in all responses. This header tells browsers not to embed your pages within frames or iframes. There are three options you can set:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;DENY&lt;/strong&gt; - No framing is allowed.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;SAMEORIGIN&lt;/strong&gt; - Only framing within the same domain is allowed.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;ALLOW-FROM uri&lt;/strong&gt; - Framing is allowed only by the specified &lt;strong&gt;uri&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step 3: Enforce Content Security Policy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implement CSP Header:&lt;/strong&gt; Content Security Policy (CSP) is a powerful tool that helps prevent XSS attacks and other injection vulnerabilities. To prevent your pages from being framed, include the CSP &lt;strong&gt;frame-ancestors&lt;/strong&gt; directive in your responses.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configure Web Server to Include CSP:&lt;/strong&gt; Add a CSP header with a &lt;strong&gt;frame-ancestors&lt;/strong&gt; directive to define which origins can embed your content.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example for Apache:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example for Nginx:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This CSP directive prevents all framing of your content, except on the same origin. Adjust the directive according to your specific needs, replacing &lt;strong&gt;'self'&lt;/strong&gt; with the allowed origins if necessary.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Good Security Practices&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Regularly Update Your Security Measures:&lt;/strong&gt; Security threats evolve, so regularly review and update your security configurations.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Educate Your Team:&lt;/strong&gt; Ensure that your development team is aware of the importance of web security and understands how to implement these measures.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Use Automated Tools:&lt;/strong&gt; Employ automated tools for security headers to ensure they are correctly set across your application.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Monitor for Security Flaws:&lt;/strong&gt; Regularly test your application for security vulnerabilities and address any issues promptly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementing these steps will significantly increase the security of your web application against iframe-based attacks and contribute to a more robust overall security posture.&lt;/p&gt;
&lt;p&gt;nginxCopy code&lt;/p&gt;
&lt;p&gt;add_header Content-Security-Policy "frame-ancestors 'self'";&lt;/p&gt;
&lt;p&gt;apacheCopy code&lt;/p&gt;
&lt;p&gt;Header set Content-Security-Policy "frame-ancestors 'self'"&lt;/p&gt;
&lt;p&gt;javascriptCopy code&lt;/p&gt;
&lt;p&gt;if (window.top !== window.self) { &amp;nbsp;window.top.location = window.location; } &lt;br&gt;&amp;nbsp;&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="1.4.1" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="273-600" supportedStandardRef="OpenCRE"/>
            <standard ref="923" supportedStandardRef="cwe-standard"/>
            <standard ref="Network Architecture Documentation" supportedStandardRef="cloud-control-matrix"/>
            <standard ref="V1.14.1" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1037 - Filter Network Traffic||ATT&amp;CK Enterprise - M1050 - Exploit Protection||ATT&amp;CK Enterprise - M1021 - Restrict Web-Based Content||ATT&amp;CK Enterprise - M1017 - User Training||ATT&amp;CK Enterprise - M1048 - Application Isolation and Sandboxing"/>
            <customField ref="SF-C-SCOPE" value="Application Security||Data Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V1.14.1"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.143">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-WEB-UI-C4" name="Implement input validation, output encoding, and enforce Content Security Policy (CSP)" issueId="" issueLink="" platform="" cost="1" risk="71" state="Recommended" owner="ddoughty@iriusrisk.com" library="client-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implementing input validation, output encoding, and enforcing Content Security Policy (CSP) are crucial steps to securing your web UI against a variety of common attacks, such as Cross-Site Scripting (XSS), SQL Injection, and others. Here's how to approach each countermeasure effectively:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implement Input Validation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Input validation ensures that only properly formatted data is entered into your system. Follow these steps:&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;Define Acceptable Input:&lt;/strong&gt; Clearly specify what constitutes valid input for each field (e.g., types, lengths, formats, and ranges) in your application. Use regular expressions for pattern matching where applicable.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Validate All Inputs:&lt;/strong&gt; Apply validation to all received data, whether from users, files, or other systems. This includes data from forms, query parameters, cookies, and any external sources.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Use Existing Libraries:&lt;/strong&gt; Leverage existing, well-tested validation libraries and frameworks for your programming language or platform, rather than writing your own validation code from scratch.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Reject Invalid Input:&lt;/strong&gt; If input validation fails, reject the input, log the event for monitoring potential attacks, and provide user feedback that guides them toward correct input without revealing too much about the underlying validation logic or application architecture.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Implement Output Encoding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Output encoding transforms special characters into a safe format that prevents the browser from executing them as code. This is especially important to mitigate XSS attacks.&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;Encode Data:&lt;/strong&gt; Encode all dynamic data displayed to users, especially data that comes from user input, external systems, or databases. Use HTML entity encoding for content displayed in HTML.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Use Context-Specific Encoding:&lt;/strong&gt; The encoding method should match the context where the data is displayed (e.g., HTML, JavaScript, CSS, URL). Libraries like OWASP's ESAPI provide context-specific encoding functions.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Adopt Secure Frameworks:&lt;/strong&gt; Modern web frameworks often provide automatic output encoding. Familiarize yourself with and enable these features in your framework.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Enforce Content Security Policy (CSP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CSP is a browser feature that helps detect and mitigate certain types of attacks, including XSS and data injection attacks, by allowing web developers to declare which dynamic resources are allowed to load.&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;Define a CSP Policy:&lt;/strong&gt; Create a CSP policy that specifies which sources your web application is allowed to load resources from. Start with a strict policy that only allows resources from your domain, and then incrementally allow additional sources as needed.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Use CSP Directives:&lt;/strong&gt; Utilize directives like &lt;strong&gt;default-src&lt;/strong&gt;, &lt;strong&gt;script-src&lt;/strong&gt;, &lt;strong&gt;img-src&lt;/strong&gt;, &lt;strong&gt;style-src&lt;/strong&gt;, and others to control specific resources. Use the &lt;strong&gt;nonce&lt;/strong&gt; attribute for inline scripts and styles if they are necessary.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Test Your Policy:&lt;/strong&gt; Before deploying, test your CSP policy to ensure it doesn't break your web application's functionality. Tools like Google Chrome's Developer Tools can help identify and debug CSP violations.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Implement Reporting:&lt;/strong&gt; CSP can be configured to send reports of policy violations to a server endpoint. This is invaluable for detecting and responding to attacks in real-time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;References and Good Practices&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;OWASP (Open Web Application Security Project):&lt;/strong&gt; Refer to OWASP's guides and cheat sheets for detailed best practices on input validation, output encoding, and implementing CSP.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Web Framework Security Features:&lt;/strong&gt; Use security features built into your web development framework. Frameworks like Django, Ruby on Rails, and ASP.NET have built-in protections against many common web vulnerabilities.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Continuous Education:&lt;/strong&gt; Stay updated on the latest security practices and vulnerabilities affecting web applications. Regularly update your skills and your application's libraries and frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following these guidelines, developers can significantly enhance the security of their web UI components against a range of common web vulnerabilities.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="235" supportedStandardRef="cwe-standard"/>
            <standard ref="743-237" supportedStandardRef="OpenCRE"/>
            <standard ref="Input Validation Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="Mass Assignment Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="V5.1.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="WSTG-INPV-04" supportedStandardRef="owasp-wstg"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1021 - Restrict Web-Based Content||ATT&amp;CK Enterprise - M1050 - Exploit Protection||ATT&amp;CK Enterprise - M1048 - Application Isolation and Sandboxing||ATT&amp;CK ICS - M0818 - Validate Program Inputs"/>
            <customField ref="SF-C-SCOPE" value="Application Security||Data Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V5.1.1"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.143">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-WEB-UI-C1" name="Implement strong authentication mechanisms and follow the least privilege principle" issueId="" issueLink="" platform="" cost="1" risk="64" state="Recommended" owner="ddoughty@iriusrisk.com" library="client-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;To enhance the security of your web UI, implementing strong authentication mechanisms is crucial. Follow these steps to ensure that access to your system is securely controlled.&lt;/p&gt;
&lt;p&gt;Step 1: Use Multi-Factor Authentication (MFA)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enable MFA:&lt;/strong&gt; Ensure your authentication system supports Multi-Factor Authentication. MFA requires users to provide two or more verification factors to gain access, significantly increasing security.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Integrate with Trusted Providers:&lt;/strong&gt; Use well-established MFA providers or frameworks that support various verification methods, such as SMS codes, email verification, authenticator apps, or hardware tokens.&lt;/p&gt;
&lt;p&gt;Step 2: Enforce Strong Password Policies&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Set Complexity Requirements:&lt;/strong&gt; Define password policies that require a mix of upper and lower case letters, numbers, and special characters. Ensure passwords are of a minimum length (e.g., 12 characters).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Implement Account Lockout Mechanisms:&lt;/strong&gt; To prevent brute force attacks, temporarily lock accounts after several unsuccessful login attempts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use Password Alternatives:&lt;/strong&gt; Where possible, encourage or enforce the use of passphrase alternatives, biometrics, or other more secure authentication methods.&lt;/p&gt;
&lt;p&gt;Step 3: Regularly Update Authentication Systems&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Patch and Update:&lt;/strong&gt; Keep your authentication systems up-to-date with the latest security patches and updates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audit and Review:&lt;/strong&gt; Regularly audit authentication mechanisms for vulnerabilities. Use security scanning tools and consider external security audits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Follow the Least Privilege Principle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The principle of least privilege ensures that users and systems have only the minimum levels of access—or permissions—needed to perform their tasks. This reduces the potential impact of a compromise.&lt;/p&gt;
&lt;p&gt;Step 1: Define Access Levels&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Identify Roles:&lt;/strong&gt; Define clear roles within your application (e.g., user, admin, moderator) and specify the access level for each.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Assign Permissions:&lt;/strong&gt; Assign permissions based on roles. Ensure that each role has the least amount of privilege necessary to perform its functions.&lt;/p&gt;
&lt;p&gt;Step 2: Implement Role-Based Access Control (RBAC)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use RBAC Systems:&lt;/strong&gt; Implement or utilize an existing RBAC system that allows for easy management of roles and permissions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regularly Review Access:&lt;/strong&gt; Periodically review roles and permissions to ensure they are still appropriate for each user’s needs.&lt;/p&gt;
&lt;p&gt;Step 3: Monitor and Audit Access&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logging:&lt;/strong&gt; Ensure that access and activities are logged. Keep an audit trail that can be reviewed in the event of a security incident.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Alerts:&lt;/strong&gt; Set up alerts for unusual access patterns or administrative actions, which can help in early detection of security breaches.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional Good Security Practices&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Security Training:&lt;/strong&gt; Regularly train developers and users on the importance of strong authentication practices and the principle of least privilege.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Use Secure Communication:&lt;/strong&gt; Ensure that authentication data, such as passwords and tokens, are always transmitted over secure channels (e.g., HTTPS).&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Periodic Security Assessments:&lt;/strong&gt; Conduct periodic security assessments and penetration testing to identify and mitigate potential vulnerabilities in your authentication mechanism and access control policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementing these measures will significantly strengthen the security of your web UI by ensuring that only authorized users can access sensitive information and functionality, and that they can only perform actions necessary for their role.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="270-634" supportedStandardRef="OpenCRE"/>
            <standard ref="5.1.1.2" supportedStandardRef="nist-800-63"/>
            <standard ref="640" supportedStandardRef="cwe-standard"/>
            <standard ref="C6" supportedStandardRef="owasp-proactive-controls"/>
            <standard ref="Choosing and Using Security Questions Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="Forgot Password Cheat Sheet" supportedStandardRef="owasp-cheat-sheets"/>
            <standard ref="V2.5.1" supportedStandardRef="owasp-asvs4-level-3"/>
            <standard ref="WSTG-ATHN-01" supportedStandardRef="owasp-wstg"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1026 - Privileged Account Management||ATT&amp;CK Enterprise - M1032 - Multi-factor Authentication||ATT&amp;CK Enterprise - M1047 - Audit||ATT&amp;CK Enterprise - M1018 - User Account Management||ATT&amp;CK Enterprise - M1030 - Network Segmentation"/>
            <customField ref="SF-C-SCOPE" value="Data Security||Operational Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V2.5.1"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.142">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
        <countermeasure ref="C-WEB-UI-C3" name="Regularly update dependencies, use dependency scanning tools, and follow best practices for secure coding" issueId="" issueLink="" platform="" cost="1" risk="64" state="Recommended" owner="ddoughty@iriusrisk.com" library="client-side-components" source="RULES" edited="false" stateChangeSource="" priority="">
          <desc>&lt;p&gt;Implementing a process to regularly update dependencies, utilize dependency scanning tools, and follow best practices for secure coding is essential in maintaining the security and integrity of your software. This proactive approach helps mitigate vulnerabilities, reduce the attack surface, and ensure the application remains robust against emerging threats. Here's how to approach each aspect effectively:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regularly Update Dependencies&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dependencies, such as libraries and frameworks, are often updated to patch security vulnerabilities, fix bugs, and add new features. Keeping these dependencies up to date is crucial.&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;Automate Updates:&lt;/strong&gt; Use tools like Dependabot (GitHub), Renovate, or npm audit (for Node.js projects) to automate the detection of outdated dependencies. These tools can be configured to automatically create pull requests for updates.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Subscribe to Vulnerability Alerts:&lt;/strong&gt; Many platforms offer vulnerability alerts for project dependencies. Enable these alerts to be notified when a dependency needs to be updated due to a security issue.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Regular Review:&lt;/strong&gt; Schedule regular intervals (e.g., monthly or quarterly) to review and update dependencies, even if automated tools are in place. This ensures that updates don't introduce breaking changes or new vulnerabilities.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Use Dependency Scanning Tools&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dependency scanning tools analyze your project's dependencies for known vulnerabilities, licensing issues, and sometimes even code quality.&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;Integrate Scanning into CI/CD Pipeline:&lt;/strong&gt; Tools like Snyk, OWASP Dependency-Check, and SonarQube can be integrated into your Continuous Integration/Continuous Deployment (CI/CD) pipeline. This allows for automatic scanning of dependencies whenever code is committed or before deployment.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Act on Findings:&lt;/strong&gt; Prioritize and address the vulnerabilities found by scanning tools based on their severity. Some tools provide recommendations or even automated fixes for vulnerabilities.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Audit Dependencies:&lt;/strong&gt; Regularly audit your project's dependency tree to identify and remove unused or unnecessary dependencies, reducing potential attack vectors.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Follow Best Practices for Secure Coding&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Adhering to secure coding practices is fundamental in developing resilient software that is resistant to attacks.&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;&lt;strong&gt;Adopt a Security Coding Standard:&lt;/strong&gt; Follow a coding standard focused on security, such as the OWASP Secure Coding Practices, to minimize the introduction of new vulnerabilities.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Perform Code Reviews:&lt;/strong&gt; Implement a peer review process where code is examined by one or more developers other than the author. This helps catch security flaws, bugs, and ensures adherence to coding standards.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Educate Your Team:&lt;/strong&gt; Regularly train developers on secure coding practices, emerging vulnerabilities, and defensive programming techniques. Consider conducting security awareness sessions and workshops.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Use Static Analysis Security Testing (SAST):&lt;/strong&gt; Integrate SAST tools into your development process to automatically analyze source code for potential security issues.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Dynamic Analysis Security Testing (DAST):&lt;/strong&gt; Use DAST tools to test your applications in runtime, simulating attacks on live applications to identify vulnerabilities that static analysis might miss.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;References and Good Practices&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;OWASP:&lt;/strong&gt; Utilize resources from the Open Web Application Security Project (OWASP) for the latest in web application security, including the OWASP Top Ten, which outlines the most critical web application security risks.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Keep Documentation:&lt;/strong&gt; Document your security practices, dependency management policies, and update procedures. This helps maintain consistency and ensures new team members can follow established protocols.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Regular Security Assessments:&lt;/strong&gt; Beyond just dependency management and secure coding, conduct regular security assessments, including penetration testing, to identify and mitigate risks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By systematically updating dependencies, using dependency scanning tools, and adhering to secure coding practices, you can significantly enhance the security posture of your software projects, protecting both your data and your users.&lt;/p&gt;</desc>
          <implementations/>
          <references/>
          <standards>
            <standard ref="053-751" supportedStandardRef="OpenCRE"/>
            <standard ref="1104" supportedStandardRef="cwe-standard"/>
            <standard ref="7.2.4" supportedStandardRef="PCI-DSS-v4.0"/>
            <standard ref="V1.14.3" supportedStandardRef="owasp-asvs4-level-3"/>
          </standards>
          <customFields>
            <customField ref="SF-C-MITRE" value="ATT&amp;CK Enterprise - M1054 - Software Configuration||ATT&amp;CK Enterprise - M1051 - Update Software||ATT&amp;CK Enterprise - M1050 - Exploit Protection||ATT&amp;CK Enterprise - M1038 - Execution Prevention||ATT&amp;CK Enterprise - M1016 - Vulnerability Scanning||ATT&amp;CK Enterprise - M1048 - Application Isolation and Sandboxing"/>
            <customField ref="SF-C-SCOPE" value="Application Security"/>
            <customField ref="SF-C-STANDARD-BASELINE" value="ASVS"/>
            <customField ref="SF-C-STANDARD-SECTION" value="V1.14.3"/>
          </customFields>
          <test expiryDate="" expiryPeriod="0">
            <steps/>
            <notes/>
            <source filename="" args="" type="Manual" result="Not Tested" enabled="true" timestamp="2024-12-30T10:29:01.143">
              <output/>
            </source>
            <references/>
            <customFields/>
          </test>
        </countermeasure>
      </countermeasures>
      <usecases>
        <usecase ref="UC-STRIDE-ELEVATION-OF-PRIVILEGE" name="Elevation of Privilege" desc="Elevation of privilege involves an attacker gaining higher levels of access or permissions than intended. By exploiting vulnerabilities, attackers can escalate their privileges within a system to perform unauthorized actions or access sensitive data." library="client-side-components">
          <threats>
            <threat ref="T-WEB-UI-T1" name="Attackers may exploit weaknesses in authentication and authorization mechanisms" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="client-side-components" editable="true">
              <desc>&lt;p&gt;Weaknesses in authentication and authorization mechanisms represent significant security vulnerabilities within web-based user interfaces. These weaknesses can allow unauthorized access to sensitive information and systems. Authentication weaknesses pertain to flaws in verifying the identity of users attempting to access a service. Authorization weaknesses involve inadequacies in controlling what authenticated users are allowed to do. Together, these vulnerabilities can be exploited to gain unauthorized access or escalate privileges within a system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat Agents:&lt;/strong&gt; The agents can range from automated scripts (bots) scanning the internet for vulnerabilities to exploit, to malicious insiders with legitimate access trying to elevate their privileges. External attackers, including cybercriminals and state-sponsored actors, may also exploit these weaknesses for various purposes.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack Vectors:&lt;/strong&gt; Common attack vectors include credential stuffing, where attackers use previously breached username and password pairs to gain unauthorized access; phishing attacks aimed at tricking users into disclosing their credentials; and exploitation of implementation flaws in authentication mechanisms (e.g., bypassing multi-factor authentication) or authorization schemes (e.g., exploiting insecure direct object references to access unauthorized resources).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The exploitation of weaknesses in authentication and authorization mechanisms can lead to several adverse impacts, including:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Data Breach:&lt;/strong&gt; Unauthorized access to sensitive personal or business data, leading to loss of confidentiality.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Privilege Escalation:&lt;/strong&gt; Attackers gaining higher-level access than what is authorized, potentially leading to full system compromise.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Reputation Damage:&lt;/strong&gt; The loss of customer trust and damage to the organization's reputation following a security breach.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Financial Loss:&lt;/strong&gt; Direct financial loss from theft or fraud, and indirect costs associated with incident response, legal fees, and potential fines for regulatory non-compliance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 1:&lt;/strong&gt; An attacker discovers a web application does not properly enforce password complexity requirements. They use a brute-force attack to guess weak passwords and gain unauthorized access to multiple user accounts.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 2:&lt;/strong&gt; A web application uses predictable resource IDs for user profiles. An authenticated attacker modifies the URL to an ID they do not own, directly accessing and altering another user’s profile due to improper authorization checks.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 3:&lt;/strong&gt; An attacker performs a phishing campaign, sending emails to users of a web application, tricking them into clicking a link that leads to a fake login page designed to steal their credentials. Once successful, the attacker uses these credentials to gain unauthorized access to the web application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mitigating these threats requires implementing robust authentication mechanisms, such as multi-factor authentication, enforcing strong password policies, and regularly auditing and updating authorization logic to ensure that users can only access resources appropriate for their privilege level. Regular security assessments and awareness training for users can also significantly reduce the risk of such attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="50" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-287">
                  <countermeasures>
                    <countermeasure ref="C-WEB-UI-C1" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-WEB-UI-C1" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1078 - Valid Accounts||ATT&amp;CK Enterprise - T1203 - Exploitation for Client Execution||ATT&amp;CK Enterprise - T1199 - Trusted Relationship||ATT&amp;CK Enterprise - T1110 - Brute Force||ATT&amp;CK Enterprise - T1068 - Exploitation for Privilege Escalation"/>
                <customField ref="SF-T-STRIDE-LM" value="Elevation of Privilege"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-SPOOFING" name="Spoofing" desc="Spoofing involves an attacker pretending to be someone else by falsifying data or identity. This can include spoofing email addresses, IP addresses, or user identities to gain unauthorized access to systems or information." library="client-side-components">
          <threats>
            <threat ref="T-WEB-UI-T2" name="Attackers can deceive users into clicking on hidden elements" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="client-side-components" editable="true">
              <desc>&lt;p&gt;This threat involves manipulating the web user interface (UI) to deceive users into clicking on elements that are not what they appear to be. This form of attack, often referred to as "clickjacking," uses various techniques to trick a user into clicking on a concealed or disguised element. These elements, when clicked, can trigger unauthorized actions, such as liking a page, sharing sensitive information, or granting permissions to access data or perform actions on the user's behalf. The attack leverages the trust a user has in the visible UI, exploiting it to facilitate actions unintended by the user and unauthorized by the system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat Agents:&lt;/strong&gt; The primary agents behind these attacks are often cybercriminals aiming to exploit user trust for malicious purposes, ranging from spreading malware to executing phishing campaigns or stealing credentials.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack Vectors:&lt;/strong&gt; Common vectors include: 
  &lt;ul&gt;
   &lt;li&gt;&lt;strong&gt;UI Redressing:&lt;/strong&gt; Overlaying transparent or cleverly disguised iframes over seemingly benign web pages.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Click Transparent Layer:&lt;/strong&gt; Placing a transparent layer over a web page so that clicks intended for visible elements beneath are hijacked.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Cursor Hijacking:&lt;/strong&gt; Altering the appearance or behavior of the cursor to deceive users about the actual point of click.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The impacts of deceiving users into clicking on hidden elements can be widespread, affecting both individual users and organizations, including:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Privacy Violations:&lt;/strong&gt; Unauthorized sharing of personal or sensitive information without the user's knowledge.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Account Compromise:&lt;/strong&gt; Unintentional granting of access or permissions to attackers, leading to account takeover or data breaches.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Malware Infection:&lt;/strong&gt; Users might inadvertently download and install malware, leading to further exploitation.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Reputational Damage:&lt;/strong&gt; Organizations may suffer reputational damage due to the exploitation of their platforms for such attacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 1:&lt;/strong&gt; A user visits a seemingly harmless website that has been compromised with a clickjacking script. The script overlays a transparent iframe over a "Play" button for a video. Instead of playing the video, clicking the button unknowingly shares a malicious link on the user's social media profile.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 2:&lt;/strong&gt; An attacker designs a webpage that mimics a popular game. However, hidden within the game's UI is a disguised button that, when clicked, triggers the download of a piece of malware. The malware is executed unwittingly by the user, compromising their system.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 3:&lt;/strong&gt; On a compromised e-commerce site, attackers overlay a transparent layer over the entire webpage. When users attempt to click on legitimate items, they instead click on this invisible layer, which redirects them to a phishing site designed to steal their credentials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To mitigate these threats, developers can employ various strategies, such as implementing frame-busting scripts, enabling Content Security Policy (CSP) headers to prevent unauthorized framing, and educating users about the risks of clickjacking and similar deceptive practices. Additionally, regular security assessments of web applications can help identify and rectify vulnerabilities that could be exploited in such attacks.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="50" availability="25" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-1021">
                  <countermeasures>
                    <countermeasure ref="C-WEB-UI-C2" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-WEB-UI-C2" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1189 - Drive-by Compromise||ATT&amp;CK Enterprise - T1566.002 - Spearphishing Link||ATT&amp;CK Enterprise - T1562 - Impair Defenses||ATT&amp;CK Enterprise - T1566 - Phishing||ATT&amp;CK Enterprise - T1564.003 - Hidden Window||ATT&amp;CK Enterprise - T1564 - Hide Artifacts||ATT&amp;CK Enterprise - T1204 - User Execution"/>
                <customField ref="SF-T-STRIDE-LM" value="Spoofing"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
        <usecase ref="UC-STRIDE-TAMPERING" name="Tampering" desc="Tampering refers to unauthorized modification of data or systems. Attackers may alter data in transit or modify software components to introduce vulnerabilities or compromise the integrity of the system." library="client-side-components">
          <threats>
            <threat ref="T-WEB-UI-T3" name="Attackers can exploit vulnerabilities in third-party dependencies leading to security breaches" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="client-side-components" editable="true">
              <desc>&lt;p&gt;The exploitation of vulnerabilities in third-party dependencies is a significant threat in software development, particularly in web UI components that rely heavily on external libraries and frameworks. These dependencies can include everything from frontend libraries for UI elements to backend frameworks for data processing. If any of these third-party components are found to have security vulnerabilities, attackers can exploit them to compromise the security of the entire application. This can lead to unauthorized access, data breaches, and a range of other security incidents. The challenge is exacerbated by the complex dependency trees common in modern web development, where a single project might include hundreds of nested third-party dependencies.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat Agents:&lt;/strong&gt; Both opportunistic hackers and targeted attackers can exploit vulnerabilities in third-party dependencies. They might scan a wide range of websites and applications for known vulnerabilities or target specific high-value applications using intelligence gathered about the software stack they rely on.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack Vectors:&lt;/strong&gt; Common vectors include: 
  &lt;ul&gt;
   &lt;li&gt;&lt;strong&gt;Exploiting Known Vulnerabilities:&lt;/strong&gt; Using known vulnerabilities in public databases like CVE (Common Vulnerabilities and Exposures) to attack widely used dependencies.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Supply Chain Attacks:&lt;/strong&gt; Compromising a third-party library or tool directly to inject malicious code, affecting all downstream applications that use that dependency.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Dependency Confusion:&lt;/strong&gt; Trick developers into downloading and using malicious versions of dependencies that mimic legitimate packages.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The exploitation of vulnerabilities in third-party dependencies can have a range of impacts, including:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Data Breach:&lt;/strong&gt; Unauthorized access to sensitive personal and business data, potentially leading to financial loss and damage to reputation.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;System Compromise:&lt;/strong&gt; Full or partial control over the application or underlying systems, allowing for further attacks or persistent access.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Denial of Service (DoS):&lt;/strong&gt; Disabling the application or making it unavailable to legitimate users, possibly as a smokescreen for other malicious activities.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Compliance Violations:&lt;/strong&gt; Breaches may result in violations of regulatory requirements, leading to fines and legal action.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 1:&lt;/strong&gt; An attacker discovers that a popular web UI framework has a known cross-site scripting (XSS) vulnerability. They craft a payload that, when executed, steals session cookies from users of all websites that use the vulnerable version of the framework.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 2:&lt;/strong&gt; A widely used open-source logging library is found to have a remote code execution (RCE) vulnerability. Before the vulnerability is widely known and patched, attackers exploit it to execute arbitrary code on servers running the vulnerable library, leading to data breaches at multiple organizations.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 3:&lt;/strong&gt; Through a sophisticated supply chain attack, malicious code is inserted into a minor update of a common dependency used by e-commerce platforms. This code silently exfiltrates credit card information entered by shoppers on sites using the compromised version of the dependency.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mitigating these threats involves implementing a robust security process for managing third-party dependencies. This includes regularly auditing and updating dependencies, using automated tools to identify known vulnerabilities, employing software composition analysis (SCA) tools, and adopting a secure software development lifecycle (SDLC) that incorporates security considerations from the initial design phase through to deployment and beyond. Additionally, developers should be wary of adding unnecessary dependencies to projects and consider the security posture of any third-party code they incorporate into their applications.&lt;/p&gt;</desc>
              <riskRating confidentiality="75" integrity="75" availability="50" easeOfExploitation="50"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-1395">
                  <countermeasures>
                    <countermeasure ref="C-WEB-UI-C3" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-WEB-UI-C3" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1195 - Supply Chain Compromise||ATT&amp;CK Enterprise - T1203 - Exploitation for Client Execution||ATT&amp;CK Enterprise - T1210 - Exploitation of Remote Services||ATT&amp;CK Enterprise - T1199 - Trusted Relationship"/>
                <customField ref="SF-T-STRIDE-LM" value="Tampering"/>
              </customFields>
            </threat>
            <threat ref="T-WEB-UI-T4" name="Attackers can inject malicious scripts into web pages viewed by other users" state="Expose" source="RULES" edited="false" owner="ddoughty@iriusrisk.com" library="client-side-components" editable="true">
              <desc>&lt;p&gt;The injection of malicious scripts into web pages viewed by other users, commonly known as Cross-Site Scripting (XSS), is a prevalent threat in web application security. XSS attacks involve the insertion of malicious scripts into the output of a web application, which are then executed in the browser of the user viewing the web page. These attacks exploit vulnerabilities in web applications that fail to adequately sanitize user input or content that is displayed to users. The consequences of XSS attacks can range from minor nuisances to significant security breaches, including theft of session tokens, cookies, personal data, and even the delivery of malware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Threat Agents/Attack Vectors&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Threat Agents:&lt;/strong&gt; XSS attacks can be launched by anyone with basic knowledge of HTML and JavaScript, ranging from individual hobbyist hackers to sophisticated cybercriminal groups. The goal might be to target a specific user, a particular organization, or any users of a vulnerable web application.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Attack Vectors:&lt;/strong&gt; There are several vectors through which XSS attacks can be carried out: 
  &lt;ul&gt;
   &lt;li&gt;&lt;strong&gt;Stored XSS:&lt;/strong&gt; Malicious scripts are permanently stored on the target server (e.g., in a database, message forum, visitor log, or comment field), and the script is executed whenever the compromised data is viewed.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;Reflected XSS:&lt;/strong&gt; The malicious script is part of the request sent to the web server, which is then reflected back in such a way that the web server sends the script to the user’s browser, where it is executed.&lt;/li&gt;
   &lt;li&gt;&lt;strong&gt;DOM-based XSS:&lt;/strong&gt; The vulnerability exists in the client-side code rather than the server-side code. The attacker manipulates the Document Object Model (DOM) of the web page and injects a script that is executed by the user’s browser.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Impacts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The impacts of XSS attacks can be significant, including:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Session Hijacking:&lt;/strong&gt; Stealing or manipulating cookies to impersonate the victim.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Phishing:&lt;/strong&gt; Displaying fake login prompts to steal usernames and passwords.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Malware Distribution:&lt;/strong&gt; Spreading malware by including malicious scripts on web pages.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Credential Theft:&lt;/strong&gt; Capturing keystrokes or form input to steal user credentials.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Defacement:&lt;/strong&gt; Altering the appearance of the web page to spread misinformation or harm the organization's reputation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example Attack Scenarios&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 1:&lt;/strong&gt; An attacker discovers a vulnerability in a web application’s comment section that does not sanitize user input. They submit a comment containing a malicious script. When other users view the comment, the script executes, stealing their session cookies and sending them to the attacker.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 2:&lt;/strong&gt; A user receives an email with a link to a seemingly legitimate website but is actually a malicious URL containing a script. Clicking the link sends the user to the vulnerable website, where the script runs in their browser, displaying a fake login page that captures the user's credentials when entered.&lt;/li&gt;
 &lt;li&gt;&lt;strong&gt;Scenario 3:&lt;/strong&gt; An attacker injects a script into a poorly secured web application that rewrites the DOM to include a hidden iframe. This iframe then loads a phishing site or malware, compromising the user’s system or stealing sensitive information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mitigation strategies against XSS include implementing robust input validation and output encoding to ensure that user-supplied data is sanitized before being returned to the user. Content Security Policy (CSP) can also be utilized to reduce the risk of XSS by specifying legitimate sources of executable scripts and effectively limiting where resources can be loaded from. Regular security testing, including automated scanning and manual code review, is crucial to identifying and fixing XSS vulnerabilities before attackers can exploit them.&lt;/p&gt;</desc>
              <riskRating confidentiality="100" integrity="100" availability="25" easeOfExploitation="75"/>
              <references/>
              <weaknesses>
                <weakness ref="CWE-79">
                  <countermeasures>
                    <countermeasure ref="C-WEB-UI-C4" mitigation="100"/>
                  </countermeasures>
                </weakness>
              </weaknesses>
              <countermeasures>
                <countermeasure ref="C-WEB-UI-C4" mitigation="100"/>
              </countermeasures>
              <customFields>
                <customField ref="SF-T-MITRE" value="ATT&amp;CK Enterprise - T1189 - Drive-by Compromise||ATT&amp;CK Enterprise - T1203 - Exploitation for Client Execution||ATT&amp;CK Enterprise - T1059 - Command and Scripting Interpreter||ATT&amp;CK Enterprise - T1059.007 - JavaScript||ATT&amp;CK Enterprise - T1219 - Remote Access Software||ATT&amp;CK Enterprise - T1210 - Exploitation of Remote Services||ATT&amp;CK Enterprise - T1566 - Phishing||ATT&amp;CK ICS - T0853 - Scripting"/>
                <customField ref="SF-T-STRIDE-LM" value="Tampering"/>
              </customFields>
            </threat>
          </threats>
        </usecase>
      </usecases>
    </component>
  </components>
</template>
